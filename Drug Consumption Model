{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7966947,"sourceType":"datasetVersion","datasetId":4687485}],"dockerImageVersionId":30673,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import accuracy_score, roc_auc_score, f1_score\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom scipy.stats import pearsonr, spearmanr, kendalltau\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-30T04:46:26.002134Z","iopub.execute_input":"2024-04-30T04:46:26.002625Z","iopub.status.idle":"2024-04-30T04:46:26.014392Z","shell.execute_reply.started":"2024-04-30T04:46:26.002582Z","shell.execute_reply":"2024-04-30T04:46:26.013475Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"/kaggle/input/drug-consumption-classification/drug_consumption.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# read data\ndf = pd.read_csv('/kaggle/input/drug-consumption-classification/drug_consumption.csv')\ndf","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.054593Z","iopub.execute_input":"2024-04-30T04:46:26.055082Z","iopub.status.idle":"2024-04-30T04:46:26.109015Z","shell.execute_reply.started":"2024-04-30T04:46:26.055048Z","shell.execute_reply":"2024-04-30T04:46:26.107737Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"        ID      Age   Gender  Education  Country  Ethnicity   Nscore   Escore  \\\n0        1  0.49788  0.48246   -0.05921  0.96082    0.12600  0.31287 -0.57545   \n1        2 -0.07854 -0.48246    1.98437  0.96082   -0.31685 -0.67825  1.93886   \n2        3  0.49788 -0.48246   -0.05921  0.96082   -0.31685 -0.46725  0.80523   \n3        4 -0.95197  0.48246    1.16365  0.96082   -0.31685 -0.14882 -0.80615   \n4        5  0.49788  0.48246    1.98437  0.96082   -0.31685  0.73545 -1.63340   \n...    ...      ...      ...        ...      ...        ...      ...      ...   \n1880  1884 -0.95197  0.48246   -0.61113 -0.57009   -0.31685 -1.19430  1.74091   \n1881  1885 -0.95197 -0.48246   -0.61113 -0.57009   -0.31685 -0.24649  1.74091   \n1882  1886 -0.07854  0.48246    0.45468 -0.57009   -0.31685  1.13281 -1.37639   \n1883  1887 -0.95197  0.48246   -0.61113 -0.57009   -0.31685  0.91093 -1.92173   \n1884  1888 -0.95197 -0.48246   -0.61113  0.21128   -0.31685 -0.46725  2.12700   \n\n       Oscore   Ascore  ...  Ecstasy  Heroin  Ketamine Legalh  LSD Meth  \\\n0    -0.58331 -0.91699  ...      CL0     CL0       CL0    CL0  CL0  CL0   \n1     1.43533  0.76096  ...      CL4     CL0       CL2    CL0  CL2  CL3   \n2    -0.84732 -1.62090  ...      CL0     CL0       CL0    CL0  CL0  CL0   \n3    -0.01928  0.59042  ...      CL0     CL0       CL2    CL0  CL0  CL0   \n4    -0.45174 -0.30172  ...      CL1     CL0       CL0    CL1  CL0  CL0   \n...       ...      ...  ...      ...     ...       ...    ...  ...  ...   \n1880  1.88511  0.76096  ...      CL0     CL0       CL0    CL3  CL3  CL0   \n1881  0.58331  0.76096  ...      CL2     CL0       CL0    CL3  CL5  CL4   \n1882 -1.27553 -1.77200  ...      CL4     CL0       CL2    CL0  CL2  CL0   \n1883  0.29338 -1.62090  ...      CL3     CL0       CL0    CL3  CL3  CL0   \n1884  1.65653  1.11406  ...      CL3     CL0       CL0    CL3  CL3  CL0   \n\n     Mushrooms Nicotine Semer  VSA  \n0          CL0      CL2   CL0  CL0  \n1          CL0      CL4   CL0  CL0  \n2          CL1      CL0   CL0  CL0  \n3          CL0      CL2   CL0  CL0  \n4          CL2      CL2   CL0  CL0  \n...        ...      ...   ...  ...  \n1880       CL0      CL0   CL0  CL5  \n1881       CL4      CL5   CL0  CL0  \n1882       CL2      CL6   CL0  CL0  \n1883       CL3      CL4   CL0  CL0  \n1884       CL3      CL6   CL0  CL2  \n\n[1885 rows x 32 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Education</th>\n      <th>Country</th>\n      <th>Ethnicity</th>\n      <th>Nscore</th>\n      <th>Escore</th>\n      <th>Oscore</th>\n      <th>Ascore</th>\n      <th>...</th>\n      <th>Ecstasy</th>\n      <th>Heroin</th>\n      <th>Ketamine</th>\n      <th>Legalh</th>\n      <th>LSD</th>\n      <th>Meth</th>\n      <th>Mushrooms</th>\n      <th>Nicotine</th>\n      <th>Semer</th>\n      <th>VSA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.49788</td>\n      <td>0.48246</td>\n      <td>-0.05921</td>\n      <td>0.96082</td>\n      <td>0.12600</td>\n      <td>0.31287</td>\n      <td>-0.57545</td>\n      <td>-0.58331</td>\n      <td>-0.91699</td>\n      <td>...</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>-0.07854</td>\n      <td>-0.48246</td>\n      <td>1.98437</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.67825</td>\n      <td>1.93886</td>\n      <td>1.43533</td>\n      <td>0.76096</td>\n      <td>...</td>\n      <td>CL4</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL3</td>\n      <td>CL0</td>\n      <td>CL4</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0.49788</td>\n      <td>-0.48246</td>\n      <td>-0.05921</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.46725</td>\n      <td>0.80523</td>\n      <td>-0.84732</td>\n      <td>-1.62090</td>\n      <td>...</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL1</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>1.16365</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.14882</td>\n      <td>-0.80615</td>\n      <td>-0.01928</td>\n      <td>0.59042</td>\n      <td>...</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0.49788</td>\n      <td>0.48246</td>\n      <td>1.98437</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>0.73545</td>\n      <td>-1.63340</td>\n      <td>-0.45174</td>\n      <td>-0.30172</td>\n      <td>...</td>\n      <td>CL1</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL1</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1880</th>\n      <td>1884</td>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>-0.61113</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>-1.19430</td>\n      <td>1.74091</td>\n      <td>1.88511</td>\n      <td>0.76096</td>\n      <td>...</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL3</td>\n      <td>CL3</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL5</td>\n    </tr>\n    <tr>\n      <th>1881</th>\n      <td>1885</td>\n      <td>-0.95197</td>\n      <td>-0.48246</td>\n      <td>-0.61113</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>-0.24649</td>\n      <td>1.74091</td>\n      <td>0.58331</td>\n      <td>0.76096</td>\n      <td>...</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL3</td>\n      <td>CL5</td>\n      <td>CL4</td>\n      <td>CL4</td>\n      <td>CL5</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>1882</th>\n      <td>1886</td>\n      <td>-0.07854</td>\n      <td>0.48246</td>\n      <td>0.45468</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>1.13281</td>\n      <td>-1.37639</td>\n      <td>-1.27553</td>\n      <td>-1.77200</td>\n      <td>...</td>\n      <td>CL4</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL0</td>\n      <td>CL2</td>\n      <td>CL6</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>1883</th>\n      <td>1887</td>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>-0.61113</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>0.91093</td>\n      <td>-1.92173</td>\n      <td>0.29338</td>\n      <td>-1.62090</td>\n      <td>...</td>\n      <td>CL3</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL3</td>\n      <td>CL3</td>\n      <td>CL0</td>\n      <td>CL3</td>\n      <td>CL4</td>\n      <td>CL0</td>\n      <td>CL0</td>\n    </tr>\n    <tr>\n      <th>1884</th>\n      <td>1888</td>\n      <td>-0.95197</td>\n      <td>-0.48246</td>\n      <td>-0.61113</td>\n      <td>0.21128</td>\n      <td>-0.31685</td>\n      <td>-0.46725</td>\n      <td>2.12700</td>\n      <td>1.65653</td>\n      <td>1.11406</td>\n      <td>...</td>\n      <td>CL3</td>\n      <td>CL0</td>\n      <td>CL0</td>\n      <td>CL3</td>\n      <td>CL3</td>\n      <td>CL0</td>\n      <td>CL3</td>\n      <td>CL6</td>\n      <td>CL0</td>\n      <td>CL2</td>\n    </tr>\n  </tbody>\n</table>\n<p>1885 rows × 32 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"EDA","metadata":{}},{"cell_type":"code","source":"df.drop(\"ID\", axis=1, inplace=True)\npsych_score_cols = ['Neuroticism', 'Extraversion', 'Openness', 'Agreeableness', 'Conscientiousness', 'Impulsiveness', 'SensationSeeking']\ndemographic_cols = ['Age', 'Gender', 'Education', 'Country', 'Ethnicity']\ndrug_usage_cols = ['Alcohol', 'Amphet', 'Amyl', 'Benzos', 'Caff', 'Cannabis', 'Choc', 'Coke', 'Crack', 'Ecstasy', 'Heroin', 'Ketamine', 'Legalh', 'LSD', 'Meth', 'Mushrooms', 'Nicotine', 'Semer', 'VSA']","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.111252Z","iopub.execute_input":"2024-04-30T04:46:26.112121Z","iopub.status.idle":"2024-04-30T04:46:26.122210Z","shell.execute_reply.started":"2024-04-30T04:46:26.112065Z","shell.execute_reply":"2024-04-30T04:46:26.120621Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.123856Z","iopub.execute_input":"2024-04-30T04:46:26.124276Z","iopub.status.idle":"2024-04-30T04:46:26.151699Z","shell.execute_reply.started":"2024-04-30T04:46:26.124234Z","shell.execute_reply":"2024-04-30T04:46:26.150136Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"Age          0\nGender       0\nEducation    0\nCountry      0\nEthnicity    0\nNscore       0\nEscore       0\nOscore       0\nAscore       0\nCscore       0\nImpulsive    0\nSS           0\nAlcohol      0\nAmphet       0\nAmyl         0\nBenzos       0\nCaff         0\nCannabis     0\nChoc         0\nCoke         0\nCrack        0\nEcstasy      0\nHeroin       0\nKetamine     0\nLegalh       0\nLSD          0\nMeth         0\nMushrooms    0\nNicotine     0\nSemer        0\nVSA          0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.155147Z","iopub.execute_input":"2024-04-30T04:46:26.155527Z","iopub.status.idle":"2024-04-30T04:46:26.178047Z","shell.execute_reply.started":"2024-04-30T04:46:26.155496Z","shell.execute_reply":"2024-04-30T04:46:26.176535Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1885 entries, 0 to 1884\nData columns (total 31 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Age        1885 non-null   float64\n 1   Gender     1885 non-null   float64\n 2   Education  1885 non-null   float64\n 3   Country    1885 non-null   float64\n 4   Ethnicity  1885 non-null   float64\n 5   Nscore     1885 non-null   float64\n 6   Escore     1885 non-null   float64\n 7   Oscore     1885 non-null   float64\n 8   Ascore     1885 non-null   float64\n 9   Cscore     1885 non-null   float64\n 10  Impulsive  1885 non-null   float64\n 11  SS         1885 non-null   float64\n 12  Alcohol    1885 non-null   object \n 13  Amphet     1885 non-null   object \n 14  Amyl       1885 non-null   object \n 15  Benzos     1885 non-null   object \n 16  Caff       1885 non-null   object \n 17  Cannabis   1885 non-null   object \n 18  Choc       1885 non-null   object \n 19  Coke       1885 non-null   object \n 20  Crack      1885 non-null   object \n 21  Ecstasy    1885 non-null   object \n 22  Heroin     1885 non-null   object \n 23  Ketamine   1885 non-null   object \n 24  Legalh     1885 non-null   object \n 25  LSD        1885 non-null   object \n 26  Meth       1885 non-null   object \n 27  Mushrooms  1885 non-null   object \n 28  Nicotine   1885 non-null   object \n 29  Semer      1885 non-null   object \n 30  VSA        1885 non-null   object \ndtypes: float64(12), object(19)\nmemory usage: 456.6+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.181065Z","iopub.execute_input":"2024-04-30T04:46:26.182042Z","iopub.status.idle":"2024-04-30T04:46:26.238230Z","shell.execute_reply.started":"2024-04-30T04:46:26.181986Z","shell.execute_reply":"2024-04-30T04:46:26.237220Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"              Age       Gender    Education      Country    Ethnicity  \\\ncount  1885.00000  1885.000000  1885.000000  1885.000000  1885.000000   \nmean      0.03461    -0.000256    -0.003806     0.355542    -0.309577   \nstd       0.87836     0.482588     0.950078     0.700335     0.166226   \nmin      -0.95197    -0.482460    -2.435910    -0.570090    -1.107020   \n25%      -0.95197    -0.482460    -0.611130    -0.570090    -0.316850   \n50%      -0.07854    -0.482460    -0.059210     0.960820    -0.316850   \n75%       0.49788     0.482460     0.454680     0.960820    -0.316850   \nmax       2.59171     0.482460     1.984370     0.960820     1.907250   \n\n            Nscore       Escore       Oscore       Ascore       Cscore  \\\ncount  1885.000000  1885.000000  1885.000000  1885.000000  1885.000000   \nmean      0.000047    -0.000163    -0.000534    -0.000245    -0.000386   \nstd       0.998106     0.997448     0.996229     0.997440     0.997523   \nmin      -3.464360    -3.273930    -3.273930    -3.464360    -3.464360   \n25%      -0.678250    -0.695090    -0.717270    -0.606330    -0.652530   \n50%       0.042570     0.003320    -0.019280    -0.017290    -0.006650   \n75%       0.629670     0.637790     0.723300     0.760960     0.584890   \nmax       3.273930     3.273930     2.901610     3.464360     3.464360   \n\n         Impulsive           SS  \ncount  1885.000000  1885.000000  \nmean      0.007216    -0.003292  \nstd       0.954435     0.963701  \nmin      -2.555240    -2.078480  \n25%      -0.711260    -0.525930  \n50%      -0.217120     0.079870  \n75%       0.529750     0.765400  \nmax       2.901610     1.921730  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Education</th>\n      <th>Country</th>\n      <th>Ethnicity</th>\n      <th>Nscore</th>\n      <th>Escore</th>\n      <th>Oscore</th>\n      <th>Ascore</th>\n      <th>Cscore</th>\n      <th>Impulsive</th>\n      <th>SS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1885.00000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n      <td>1885.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.03461</td>\n      <td>-0.000256</td>\n      <td>-0.003806</td>\n      <td>0.355542</td>\n      <td>-0.309577</td>\n      <td>0.000047</td>\n      <td>-0.000163</td>\n      <td>-0.000534</td>\n      <td>-0.000245</td>\n      <td>-0.000386</td>\n      <td>0.007216</td>\n      <td>-0.003292</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.87836</td>\n      <td>0.482588</td>\n      <td>0.950078</td>\n      <td>0.700335</td>\n      <td>0.166226</td>\n      <td>0.998106</td>\n      <td>0.997448</td>\n      <td>0.996229</td>\n      <td>0.997440</td>\n      <td>0.997523</td>\n      <td>0.954435</td>\n      <td>0.963701</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-0.95197</td>\n      <td>-0.482460</td>\n      <td>-2.435910</td>\n      <td>-0.570090</td>\n      <td>-1.107020</td>\n      <td>-3.464360</td>\n      <td>-3.273930</td>\n      <td>-3.273930</td>\n      <td>-3.464360</td>\n      <td>-3.464360</td>\n      <td>-2.555240</td>\n      <td>-2.078480</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-0.95197</td>\n      <td>-0.482460</td>\n      <td>-0.611130</td>\n      <td>-0.570090</td>\n      <td>-0.316850</td>\n      <td>-0.678250</td>\n      <td>-0.695090</td>\n      <td>-0.717270</td>\n      <td>-0.606330</td>\n      <td>-0.652530</td>\n      <td>-0.711260</td>\n      <td>-0.525930</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>-0.07854</td>\n      <td>-0.482460</td>\n      <td>-0.059210</td>\n      <td>0.960820</td>\n      <td>-0.316850</td>\n      <td>0.042570</td>\n      <td>0.003320</td>\n      <td>-0.019280</td>\n      <td>-0.017290</td>\n      <td>-0.006650</td>\n      <td>-0.217120</td>\n      <td>0.079870</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.49788</td>\n      <td>0.482460</td>\n      <td>0.454680</td>\n      <td>0.960820</td>\n      <td>-0.316850</td>\n      <td>0.629670</td>\n      <td>0.637790</td>\n      <td>0.723300</td>\n      <td>0.760960</td>\n      <td>0.584890</td>\n      <td>0.529750</td>\n      <td>0.765400</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2.59171</td>\n      <td>0.482460</td>\n      <td>1.984370</td>\n      <td>0.960820</td>\n      <td>1.907250</td>\n      <td>3.273930</td>\n      <td>3.273930</td>\n      <td>2.901610</td>\n      <td>3.464360</td>\n      <td>3.464360</td>\n      <td>2.901610</td>\n      <td>1.921730</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Get the list of column names\ncolumn_names = df.columns.tolist()\n\nprint(\"List of column names:\", column_names)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.239240Z","iopub.execute_input":"2024-04-30T04:46:26.239550Z","iopub.status.idle":"2024-04-30T04:46:26.246250Z","shell.execute_reply.started":"2024-04-30T04:46:26.239521Z","shell.execute_reply":"2024-04-30T04:46:26.245364Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"List of column names: ['Age', 'Gender', 'Education', 'Country', 'Ethnicity', 'Nscore', 'Escore', 'Oscore', 'Ascore', 'Cscore', 'Impulsive', 'SS', 'Alcohol', 'Amphet', 'Amyl', 'Benzos', 'Caff', 'Cannabis', 'Choc', 'Coke', 'Crack', 'Ecstasy', 'Heroin', 'Ketamine', 'Legalh', 'LSD', 'Meth', 'Mushrooms', 'Nicotine', 'Semer', 'VSA']\n","output_type":"stream"}]},{"cell_type":"code","source":"for d in drug_usage_cols:\n    df[d].replace({\n        \"CL0\": \"1. Never\", \n        \"CL1\": \"2. Over 10Y\", \n        \"CL2\": \"3. Last 10Y\", \n        \"CL3\": \"4. Last 1Y\", \n        \"CL4\": \"5. Last 1M\", \n        \"CL5\": \"6. Last 1W\", \n        \"CL6\": \"7. Last 1D\"\n    }, inplace=True)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.247528Z","iopub.execute_input":"2024-04-30T04:46:26.247884Z","iopub.status.idle":"2024-04-30T04:46:26.323138Z","shell.execute_reply.started":"2024-04-30T04:46:26.247849Z","shell.execute_reply":"2024-04-30T04:46:26.321832Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/2864433228.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  df[d].replace({\n","output_type":"stream"},{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"       Age   Gender  Education  Country  Ethnicity   Nscore   Escore   Oscore  \\\n0  0.49788  0.48246   -0.05921  0.96082    0.12600  0.31287 -0.57545 -0.58331   \n1 -0.07854 -0.48246    1.98437  0.96082   -0.31685 -0.67825  1.93886  1.43533   \n2  0.49788 -0.48246   -0.05921  0.96082   -0.31685 -0.46725  0.80523 -0.84732   \n3 -0.95197  0.48246    1.16365  0.96082   -0.31685 -0.14882 -0.80615 -0.01928   \n4  0.49788  0.48246    1.98437  0.96082   -0.31685  0.73545 -1.63340 -0.45174   \n\n    Ascore   Cscore  ...      Ecstasy    Heroin     Ketamine       Legalh  \\\n0 -0.91699 -0.00665  ...     1. Never  1. Never     1. Never     1. Never   \n1  0.76096 -0.14277  ...   5. Last 1M  1. Never  3. Last 10Y     1. Never   \n2 -1.62090 -1.01450  ...     1. Never  1. Never     1. Never     1. Never   \n3  0.59042  0.58489  ...     1. Never  1. Never  3. Last 10Y     1. Never   \n4 -0.30172  1.30612  ...  2. Over 10Y  1. Never     1. Never  2. Over 10Y   \n\n           LSD        Meth    Mushrooms     Nicotine     Semer       VSA  \n0     1. Never    1. Never     1. Never  3. Last 10Y  1. Never  1. Never  \n1  3. Last 10Y  4. Last 1Y     1. Never   5. Last 1M  1. Never  1. Never  \n2     1. Never    1. Never  2. Over 10Y     1. Never  1. Never  1. Never  \n3     1. Never    1. Never     1. Never  3. Last 10Y  1. Never  1. Never  \n4     1. Never    1. Never  3. Last 10Y  3. Last 10Y  1. Never  1. Never  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Education</th>\n      <th>Country</th>\n      <th>Ethnicity</th>\n      <th>Nscore</th>\n      <th>Escore</th>\n      <th>Oscore</th>\n      <th>Ascore</th>\n      <th>Cscore</th>\n      <th>...</th>\n      <th>Ecstasy</th>\n      <th>Heroin</th>\n      <th>Ketamine</th>\n      <th>Legalh</th>\n      <th>LSD</th>\n      <th>Meth</th>\n      <th>Mushrooms</th>\n      <th>Nicotine</th>\n      <th>Semer</th>\n      <th>VSA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.49788</td>\n      <td>0.48246</td>\n      <td>-0.05921</td>\n      <td>0.96082</td>\n      <td>0.12600</td>\n      <td>0.31287</td>\n      <td>-0.57545</td>\n      <td>-0.58331</td>\n      <td>-0.91699</td>\n      <td>-0.00665</td>\n      <td>...</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>3. Last 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.07854</td>\n      <td>-0.48246</td>\n      <td>1.98437</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.67825</td>\n      <td>1.93886</td>\n      <td>1.43533</td>\n      <td>0.76096</td>\n      <td>-0.14277</td>\n      <td>...</td>\n      <td>5. Last 1M</td>\n      <td>1. Never</td>\n      <td>3. Last 10Y</td>\n      <td>1. Never</td>\n      <td>3. Last 10Y</td>\n      <td>4. Last 1Y</td>\n      <td>1. Never</td>\n      <td>5. Last 1M</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.49788</td>\n      <td>-0.48246</td>\n      <td>-0.05921</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.46725</td>\n      <td>0.80523</td>\n      <td>-0.84732</td>\n      <td>-1.62090</td>\n      <td>-1.01450</td>\n      <td>...</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>2. Over 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>1.16365</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.14882</td>\n      <td>-0.80615</td>\n      <td>-0.01928</td>\n      <td>0.59042</td>\n      <td>0.58489</td>\n      <td>...</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>3. Last 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>3. Last 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.49788</td>\n      <td>0.48246</td>\n      <td>1.98437</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>0.73545</td>\n      <td>-1.63340</td>\n      <td>-0.45174</td>\n      <td>-0.30172</td>\n      <td>1.30612</td>\n      <td>...</td>\n      <td>2. Over 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>2. Over 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n      <td>3. Last 10Y</td>\n      <td>3. Last 10Y</td>\n      <td>1. Never</td>\n      <td>1. Never</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Printing Minimum and maximum values to discern if data needs normalization\nm = len(column_names)\nprint(m)\n\nfor i in range(m):\n    print(f\"Max Value of {column_names[i]} is: {df[column_names[i]].max()}\")\n    print(f\"Min Value of {column_names[i]} is: {df[column_names[i]].min()}\")\n    \n    # Check if the column contains numerical data\n    if df[column_names[i]].dtype != object:\n        # Calculate the range of values in the column\n        column_range = df[column_names[i]].max() - df[column_names[i]].min()\n        print(\"Range of values in\", column_names[i], \":\", column_range)\n    else:\n        print(\"Column\", column_names[i], \"contains non-numeric data, skipping range calculation.\")","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.324617Z","iopub.execute_input":"2024-04-30T04:46:26.324995Z","iopub.status.idle":"2024-04-30T04:46:26.357314Z","shell.execute_reply.started":"2024-04-30T04:46:26.324963Z","shell.execute_reply":"2024-04-30T04:46:26.355519Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"31\nMax Value of Age is: 2.59171\nMin Value of Age is: -0.95197\nRange of values in Age : 3.54368\nMax Value of Gender is: 0.48246\nMin Value of Gender is: -0.48246\nRange of values in Gender : 0.96492\nMax Value of Education is: 1.98437\nMin Value of Education is: -2.43591\nRange of values in Education : 4.42028\nMax Value of Country is: 0.96082\nMin Value of Country is: -0.57009\nRange of values in Country : 1.53091\nMax Value of Ethnicity is: 1.90725\nMin Value of Ethnicity is: -1.10702\nRange of values in Ethnicity : 3.01427\nMax Value of Nscore is: 3.27393\nMin Value of Nscore is: -3.46436\nRange of values in Nscore : 6.73829\nMax Value of Escore is: 3.27393\nMin Value of Escore is: -3.27393\nRange of values in Escore : 6.54786\nMax Value of Oscore is: 2.90161\nMin Value of Oscore is: -3.27393\nRange of values in Oscore : 6.17554\nMax Value of Ascore is: 3.46436\nMin Value of Ascore is: -3.46436\nRange of values in Ascore : 6.92872\nMax Value of Cscore is: 3.46436\nMin Value of Cscore is: -3.46436\nRange of values in Cscore : 6.92872\nMax Value of Impulsive is: 2.90161\nMin Value of Impulsive is: -2.55524\nRange of values in Impulsive : 5.456849999999999\nMax Value of SS is: 1.92173\nMin Value of SS is: -2.07848\nRange of values in SS : 4.00021\nMax Value of Alcohol is: 7. Last 1D\nMin Value of Alcohol is: 1. Never\nColumn Alcohol contains non-numeric data, skipping range calculation.\nMax Value of Amphet is: 7. Last 1D\nMin Value of Amphet is: 1. Never\nColumn Amphet contains non-numeric data, skipping range calculation.\nMax Value of Amyl is: 7. Last 1D\nMin Value of Amyl is: 1. Never\nColumn Amyl contains non-numeric data, skipping range calculation.\nMax Value of Benzos is: 7. Last 1D\nMin Value of Benzos is: 1. Never\nColumn Benzos contains non-numeric data, skipping range calculation.\nMax Value of Caff is: 7. Last 1D\nMin Value of Caff is: 1. Never\nColumn Caff contains non-numeric data, skipping range calculation.\nMax Value of Cannabis is: 7. Last 1D\nMin Value of Cannabis is: 1. Never\nColumn Cannabis contains non-numeric data, skipping range calculation.\nMax Value of Choc is: 7. Last 1D\nMin Value of Choc is: 1. Never\nColumn Choc contains non-numeric data, skipping range calculation.\nMax Value of Coke is: 7. Last 1D\nMin Value of Coke is: 1. Never\nColumn Coke contains non-numeric data, skipping range calculation.\nMax Value of Crack is: 7. Last 1D\nMin Value of Crack is: 1. Never\nColumn Crack contains non-numeric data, skipping range calculation.\nMax Value of Ecstasy is: 7. Last 1D\nMin Value of Ecstasy is: 1. Never\nColumn Ecstasy contains non-numeric data, skipping range calculation.\nMax Value of Heroin is: 7. Last 1D\nMin Value of Heroin is: 1. Never\nColumn Heroin contains non-numeric data, skipping range calculation.\nMax Value of Ketamine is: 7. Last 1D\nMin Value of Ketamine is: 1. Never\nColumn Ketamine contains non-numeric data, skipping range calculation.\nMax Value of Legalh is: 7. Last 1D\nMin Value of Legalh is: 1. Never\nColumn Legalh contains non-numeric data, skipping range calculation.\nMax Value of LSD is: 7. Last 1D\nMin Value of LSD is: 1. Never\nColumn LSD contains non-numeric data, skipping range calculation.\nMax Value of Meth is: 7. Last 1D\nMin Value of Meth is: 1. Never\nColumn Meth contains non-numeric data, skipping range calculation.\nMax Value of Mushrooms is: 7. Last 1D\nMin Value of Mushrooms is: 1. Never\nColumn Mushrooms contains non-numeric data, skipping range calculation.\nMax Value of Nicotine is: 7. Last 1D\nMin Value of Nicotine is: 1. Never\nColumn Nicotine contains non-numeric data, skipping range calculation.\nMax Value of Semer is: 5. Last 1M\nMin Value of Semer is: 1. Never\nColumn Semer contains non-numeric data, skipping range calculation.\nMax Value of VSA is: 7. Last 1D\nMin Value of VSA is: 1. Never\nColumn VSA contains non-numeric data, skipping range calculation.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Map numerical values to labels\ngender_labels = {0.48246: 'Female', -0.48246: 'Male'}\nmapped_gender = df['Gender'].map(gender_labels)\n\n# Plot pie chart\nmapped_gender.value_counts().plot.pie(autopct='%1.1f%%')\nplt.ylabel('')  # Remove ylabel\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.358956Z","iopub.execute_input":"2024-04-30T04:46:26.359308Z","iopub.status.idle":"2024-04-30T04:46:26.493392Z","shell.execute_reply.started":"2024-04-30T04:46:26.359280Z","shell.execute_reply":"2024-04-30T04:46:26.491151Z"},"trusted":true},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the age_col dictionary\nage_col = {\n    -0.95197: '18-24',\n    -0.07854: '25-34',\n    0.49788: '35-44',\n    1.09449: '45-54',\n    1.82213: '55-64',\n    2.59171: '65+'\n}\n\n# Map the ages using the age_col dictionary\nmapped_age = df['Age'].map(age_col)\n\n# Sort the mapped_age series based on the keys of age_col\nmapped_age_sorted = mapped_age.iloc[pd.Categorical(mapped_age, categories=age_col.values()).argsort()]\n\n# Plot the histogram\nplt.figure(figsize=(10, 6))\nsns.histplot(x=mapped_age_sorted, data=df, discrete=True)\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.xticks(rotation=45)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.503297Z","iopub.execute_input":"2024-04-30T04:46:26.504101Z","iopub.status.idle":"2024-04-30T04:46:26.878889Z","shell.execute_reply.started":"2024-04-30T04:46:26.504041Z","shell.execute_reply":"2024-04-30T04:46:26.877568Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"education_col = {\n    -2.43591: 'Left School Before 16 years',\n    -1.73790: 'Left School at 16 years',\n    -1.43719: 'Left School at 17 years',\n    -1.22751: 'Left School at 18 years',\n    -0.61113: 'Some College,No Certificate Or Degree',\n    -0.05921: 'Professional Certificate/ Diploma',\n    0.45468: 'University Degree',\n    1.16365: 'Masters Degree',\n    1.98437: 'Doctorate Degree',\n}\n\n# Sort the keys of education_col dictionary\nsorted_education_keys = sorted(education_col.keys())\n\n# Map the sorted keys to the DataFrame\nmapped_education = df['Education'].map({k: education_col[k] for k in sorted_education_keys})\n\n# Plot the countplot\nplt.figure(figsize=(10, 6))\nsns.countplot(y=mapped_education, order=mapped_education.value_counts().index)\nplt.title('Distribution of Education')\nplt.xlabel('Count')\nplt.ylabel('Education Level')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:26.880952Z","iopub.execute_input":"2024-04-30T04:46:26.881337Z","iopub.status.idle":"2024-04-30T04:46:27.231633Z","shell.execute_reply.started":"2024-04-30T04:46:26.881306Z","shell.execute_reply":"2024-04-30T04:46:27.230286Z"},"trusted":true},"execution_count":56,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABEcAAAIjCAYAAADhk3X4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACft0lEQVR4nOzdeXhN5/7//9dOIoOMhpCERAQJkajE1KJERKVFDa2pitDQFjVXq4OpJcc8fopyJLRaWlVaKkVqqFQrtIhGzRGtoOYTKkj27w+/7K8tQUIibffzcV37OtZa917rve699Tr75b7vZTAajUYBAAAAAABYKKviLgAAAAAAAKA4EY4AAAAAAACLRjgCAAAAAAAsGuEIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALBrhCAAAAAAAsGiEIwAAAAAAwKIRjgAAABSDMWPGyGAwPJJrhYWFKSwszLS9efNmGQwGrVix4pFcPyoqSr6+vo/kWg8qIyND0dHR8vDwkMFg0ODBg4vsWv+E/rjzOwMA/3aEIwAAAA8pLi5OBoPB9LK3t5eXl5datmypWbNm6X//+1+hXOfkyZMaM2aMdu/eXSjnK0x/59ryY8KECYqLi9Orr76qjz76SN27d79rW19fX7PP+/ZXZGTkI6z64aSkpGjMmDFKTU0t7lIAoNjZFHcBAAAA/xbjxo1T5cqVdePGDZ06dUqbN2/W4MGDNW3aNH311VeqVauWqe0777yjN998s0DnP3nypMaOHStfX1/Vrl073+9bv359ga7zIO5V24IFC5SdnV3kNTyM7777To8//rhGjx6dr/a1a9fWsGHDcu338vIq7NKKTEpKisaOHauwsLBcI1kexXcGAP5OCEcAAAAKydNPP626deuatkeOHKnvvvtOrVu31rPPPqv9+/fLwcFBkmRjYyMbm6L9v2JXr15VyZIlZWtrW6TXuZ8SJUoU6/Xz48yZMwoMDMx3+woVKujFF18swoqKV3F/ZwDgUWNaDQAAQBEKDw/Xu+++q+PHj+vjjz827c9rzZENGzaocePGcnNzk5OTkwICAvTWW29JurVOSL169SRJvXr1Mk3jiIuLk3RrjYigoCDt2rVLTZo0UcmSJU3vvdv6EVlZWXrrrbfk4eEhR0dHPfvsszpx4oRZG19fX0VFReV67+3nvF9tea2xceXKFQ0bNkze3t6ys7NTQECApkyZIqPRaNbOYDBowIABWrVqlYKCgmRnZ6eaNWsqPj4+7w6/w5kzZ/TSSy+pfPnysre312OPPabFixebjuesv3Ls2DGtXbvWVHthTTXJqdve3l5BQUH68ssvc7XJqWHz5s1m+1NTU836Mcdvv/2mTp06yd3dXQ4ODgoICNDbb79tOn78+HH169dPAQEBcnBwUJkyZdSxY0eze4qLi1PHjh0lSc2aNTPdd04NeX1n7teXt9c8ZcoUffjhh6pSpYrs7OxUr149JSUlFazzAOARYuQIAABAEevevbveeustrV+/Xn369Mmzza+//qrWrVurVq1aGjdunOzs7HT48GElJiZKkmrUqKFx48Zp1KhR6tu3r5588klJUsOGDU3nOHfunJ5++ml16dJFL774osqXL3/PusaPHy+DwaA33nhDZ86c0YwZMxQREaHdu3ebRrjkR35qu53RaNSzzz6rTZs26aWXXlLt2rX17bff6vXXX9cff/yh6dOnm7Xftm2bVq5cqX79+snZ2VmzZs3Sc889p7S0NJUpU+audf31118KCwvT4cOHNWDAAFWuXFmff/65oqKidPHiRQ0aNEg1atTQRx99pCFDhqhixYqmqTLu7u73vOcbN27o7NmzufY7Ojqa+m79+vV67rnnFBgYqJiYGJ07d069evVSxYoV73nue9m7d6+efPJJlShRQn379pWvr6+OHDmir7/+WuPHj5ckJSUl6YcfflCXLl1UsWJFpaamau7cuQoLC1NKSopKliypJk2aaODAgZo1a5beeust1ahRQ5JM//sgfXm7Tz75RP/73//08ssvy2AwaNKkSerQoYOOHj36jxhJBMACGQEAAPBQYmNjjZKMSUlJd23j6upqDAkJMW2PHj3aePv/FZs+fbpRkvHPP/+86zmSkpKMkoyxsbG5jjVt2tQoyThv3rw8jzVt2tS0vWnTJqMkY4UKFYyXL1827f/ss8+MkowzZ8407atUqZKxZ8+e9z3nvWrr2bOnsVKlSqbtVatWGSUZ33//fbN2zz//vNFgMBgPHz5s2ifJaGtra7Zvz549RknG2bNn57rW7WbMmGGUZPz4449N+65fv2584oknjE5OTmb3XqlSJWOrVq3ueb7b20rK8xUTE2NqV7t2baOnp6fx4sWLpn3r1683SjLrj5zPY9OmTWbX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wQcf6K+//jI7durUKS1dulSdO3cutJDou+++U3JysmnaUH7+jgQEBJh9DyXl2s7L/b7jD9JfAAAAAPAwii0cOXfunMLDw/Xxxx9r7969OnbsmD7//HNNmjRJbdu2lSRFREQoODhY3bp1088//6wdO3aoR48eatq06UNNIYiIiNATTzyhdu3aaf369UpNTdUPP/ygt99+Wzt37szzPd7e3po+fbpmzpypl156SVu2bNHx48eVmJiol19+We+9954kadiwYUpISNB7772ngwcPavHixZozZ46GDx+er9q6deumsmXLqm3btvr+++917Ngxbd68WQMHDtTvv/8uSXrttdcUExOj1atX68CBAxo0aJAuXLhg+qHs7Oys4cOHa8iQIVq8eLGOHDmin3/+WbNnz77rgpZ5adWqlRo0aKD58+eb7X/99dcVFxenuXPn6tChQ5o2bZpWrlx5z3scP368vL291aBBAy1ZskQpKSk6dOiQFi1apJCQEGVkZMjf31/dunVTjx49tHLlSh07dkw7duxQTEyM1q5de89afX19tXfvXh04cEBnz5594EcRjxw5UklJSerXr5/27t2r3377TXPnztXZs2dVqlQplSlTRh9++KEOHz6s7777TkOHDjV7f7ly5eTg4KD4+HidPn3a9IjisWPHKiYmRrNmzdLBgweVnJys2NhYTZs27a61zJkzR5mZmWrZsqW2bt2qEydOKD4+Xi1atFCFChVyPYEpvzIzM3Xq1Cn98ccf+vnnnzVhwgS1bdtWrVu3Vo8ePSTl7+/Ia6+9pv/+979avHixDh06pPfff1979+69b2CTn+/4g/QXAAAAADyoYn1aTYMGDTR9+nQ1adJEQUFBevfdd9WnTx/NmTNH0q2pMKtXr1apUqXUpEkTRUREyM/PT8uXL3+oaxsMBn3zzTdq0qSJevXqJX9/f3Xp0kXHjx9X+fLl7/q+fv36af369frjjz/Uvn17Va9eXdHR0XJxcTEFA6Ghofrss8+0bNkyBQUFadSoURo3bly+pwmVLFlSW7dulY+Pjzp06KAaNWropZde0rVr1+Ti4iJJeuONN9S1a1f16NFDTzzxhJycnNSyZUvZ29ubzvPee+/p3XffVUxMjGrUqKHIyEitXbvW7F/efX19NWbMmHvWM3HiRF27ds1sX7t27TRz5kxNmTJFNWvW1Pz58xUbG2v22No7lS5dWj/++KNefPFFvf/++woJCdGTTz6pTz/9VJMnT5arq6ukWwtz9ujRQ8OGDVNAQIDatWunpKQk+fj43LPOPn36KCAgQHXr1pW7u3uukS355e/vr/Xr12vPnj2qX7++nnjiCa1evVo2NjaysrLSsmXLtGvXLgUFBWnIkCGaPHmy2fttbGw0a9YszZ8/X15eXqagLzo6WgsXLlRsbKyCg4PVtGlTxcXF3XMkRLVq1bRz5075+fmpU6dOqlKlivr27atmzZpp+/btKl269APdY3x8vDw9PeXr66vIyEht2rRJs2bN0urVq02jm/Lzd6Rbt24aOXKkhg8frtDQUB07dkxRUVFm38O85Oc7/iD9BQAAAAAPymAsyIqP+FvKzs5WjRo11KlTJ9MIlvu5evWqypQpo3Xr1t0z1AAKokWLFvLw8NBHH31UrHVcvnxZrq6ueuy1ebK2u/c6MgAAAAAKz67JPYq7BDM5vw0uXbpk+sfYvBT7gqwouOPHj2v9+vVq2rSpMjMzNWfOHB07dkwvvPBCvs+xadMmhYeHE4zggV29elXz5s1Ty5YtZW1trU8//VQbN27Uhg0birs0AAAAACgQwpF/ICsrK8XFxWn48OEyGo0KCgrSxo0bVaNGjXyfo1WrVmrVqlURVol/u5ypN+PHj9e1a9cUEBCgL774QhEREcVdGgAAAAAUCOHIP5C3t/cDr6kBFBYHBwdt3LixuMsAAAAAgIf2t3uULwAAAAAAwKNEOAIAAAAAACwa4QgAAAAAALBohCMAAAAAAMCiEY4AAAAAAACLRjgCAAAAAAAsGuEIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALBrhCAAAAAAAsGg2xV0AABSVre93lYuLS3GXAQAAAOBvjpEjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALBrhCAAAAAAAsGiEIwAAAAAAwKIRjgAAAAAAAItGOAIAAAAAACwa4QgAAAAAALBohCMAAAAAAMCi2RR3AQBQVE7853E521sXdxkAAABAofMZlVzcJfyrMHIEAAAAAABYNMIRAAAAAABg0QhHAAAAAACARSMcAQAAAAAAFo1wBAAAAAAAWDTCEQAAAAAAYNEIRwAAAAAAgEUjHAEAAAAAABaNcAQAAAAAAFg0whEAAAAAAGDRCEcAAAAAAIBFIxwBAAAAAAAWjXAEAAAAAABYNMIRAAAAAABg0QhHAAAAAACARSMcAW7j6+urGTNmFGsNcXFxcnNzK9YaAAAAAMCSEI7gHy8sLEyDBw/Otf9BQoakpCT17du3cAp7QJ07d9bBgwdN22PGjFHt2rUf+rybN2+WwWCQwWCQlZWVXF1dFRISohEjRig9Pf2hzw8AAAAA/1SEI8Bt3N3dVbJkySI7v9Fo1M2bN+/ZxsHBQeXKlSuyGg4cOKCTJ08qKSlJb7zxhjZu3KigoCAlJycX2TWl/N07AAAAABQHwhFYjKioKLVr105TpkyRp6enypQpo/79++vGjRumNrdPq3nhhRfUuXNns3PcuHFDZcuW1ZIlSyRJ2dnZiomJUeXKleXg4KDHHntMK1asMLXPGa2xbt061alTR3Z2dtq2bZv27NmjZs2aydnZWS4uLqpTp4527twpyXzES1xcnMaOHas9e/aYRn3ExcWpd+/eat26da7aypUrp//+97/37Idy5crJw8ND/v7+6tKlixITE+Xu7q5XX33VrN3ChQtVo0YN2dvbq3r16vrggw/Mjv/www+qXbu27O3tVbduXa1atUoGg0G7d+++573fr88kad++fXr66afl5OSk8uXLq3v37jp79uw97wsAAAAAHpRNcRcAPEqbNm2Sp6enNm3apMOHD6tz586qXbu2+vTpk6ttt27d1LFjR2VkZMjJyUmS9O233+rq1atq3769JCkmJkYff/yx5s2bp2rVqmnr1q168cUX5e7urqZNm5rO9eabb2rKlCny8/NTqVKl1KRJE4WEhGju3LmytrbW7t27VaJEiVw1dO7cWfv27VN8fLw2btwoSXJ1dZW/v7+aNGmi9PR0eXp6SpLWrFmjq1ev5gp07sfBwUGvvPKKhgwZojNnzqhcuXJaunSpRo0apTlz5igkJES//PKL+vTpI0dHR/Xs2VOXL19WmzZt9Mwzz+iTTz7R8ePH85zalNe936/PLl68qPDwcEVHR2v69On666+/9MYbb6hTp0767rvv8rxGZmamMjMzTduXL18uUB8AAAAAsGyEI7AopUqV0pw5c2Rtba3q1aurVatWSkhIyDMcadmypRwdHfXll1+qe/fukqRPPvlEzz77rJydnZWZmakJEyZo48aNeuKJJyRJfn5+2rZtm+bPn28WjowbN04tWrQwbaelpen1119X9erVJUnVqlXLs14HBwc5OTnJxsZGHh4epv0NGzZUQECAPvroI40YMUKSFBsbq44dO5qCnILIqSM1NVXlypXT6NGjNXXqVHXo0EGSVLlyZaWkpGj+/Pnq2bOnPvnkExkMBi1YsED29vYKDAzUH3/8kWc/3n7v+emznEBmwoQJpnMsWrRI3t7eOnjwoPz9/XNdIyYmRmPHji3wfQMAAACAxLQaWJiaNWvK2tratO3p6akzZ87k2dbGxkadOnXS0qVLJUlXrlzR6tWr1a1bN0nS4cOHdfXqVbVo0UJOTk6m15IlS3TkyBGzc9WtW9dse+jQoYqOjlZERIT+85//5GqfH9HR0YqNjZUknT59WuvWrVPv3r0LfB7p1nogkmQwGHTlyhUdOXJEL730ktl9vf/++6Y6Dxw4oFq1asne3t50jvr16+d57tvvPT99tmfPHm3atMnseE54c7d+GjlypC5dumR6nThx4oH6AQAAAIBlYuQI/vFcXFx06dKlXPsvXrwoV1dXs313Tl0xGAzKzs6+67m7deumpk2b6syZM9qwYYMcHBwUGRkpScrIyJAkrV27VhUqVDB7n52dndm2o6Oj2faYMWP0wgsvaO3atVq3bp1Gjx6tZcuWmabr5EePHj305ptvavv27frhhx9UuXJlPfnkk/l+/+32798v6daaKzn3tWDBAjVo0MCs3e3BUn7dfu/56bOMjAy1adNGEydOzHWunClEd7Kzs8vV5wAAAACQX4Qj+McLCAjQ+vXrc+3/+eef85yCURANGzaUt7e3li9frnXr1qljx46mgCUwMFB2dnZKS0szm0KTX/7+/vL399eQIUPUtWtXxcbG5hmO2NraKisrK9f+MmXKqF27doqNjdX27dvVq1evgt+gpL/++ksffvihmjRpInd3d0mSl5eXjh49aholc6eAgAB9/PHHyszMNIUSSUlJ971WfvosNDRUX3zxhXx9fWVjw3+iAAAAABQ9fnngH+/VV1/VnDlzNHDgQEVHR8vOzk5r167Vp59+qq+//vqhz//CCy9o3rx5OnjwoDZt2mTa7+zsrOHDh2vIkCHKzs5W48aNdenSJSUmJsrFxUU9e/bM83x//fWXXn/9dT3//POqXLmyfv/9dyUlJem5557Ls72vr6+OHTum3bt3q2LFinJ2djYFEtHR0WrdurWysrLuer07nTlzRteuXdP//vc/7dq1S5MmTdLZs2e1cuVKU5uxY8dq4MCBcnV1VWRkpDIzM7Vz505duHBBQ4cO1QsvvKC3335bffv21Ztvvqm0tDRNmTJF0q3ROHeTnz7r37+/FixYoK5du2rEiBEqXbq0Dh8+rGXLlmnhwoUPNHoFAAAAAO6FcAT/eH5+ftq6davefvttRURE6Pr166pevbo+//xz0xSYh9GtWzeNHz9elSpVUqNGjcyOvffee3J3d1dMTIyOHj0qNzc3hYaG6q233rrr+aytrXXu3Dn16NFDp0+fVtmyZdWhQ4e7Lij63HPPaeXKlWrWrJkuXryo2NhYRUVFSZIiIiLk6empmjVrysvLK1/3ExAQIIPBICcnJ/n5+empp57S0KFDzRZ8jY6OVsmSJTV58mS9/vrrcnR0VHBwsOmJNC4uLvr666/16quvqnbt2goODtaoUaP0wgsvmK1Dkpf79ZmXl5cSExP1xhtv6KmnnlJmZqYqVaqkyMhIWVmxTBIAAACAwmcw5qzECOAfJyMjQxUqVFBsbKzpyTLFZenSperVq5cuXbokBweHYq3l8uXLcnV11b6RNeRsz0gTAAAA/Pv4jEou7hL+EXJ+G1y6dEkuLi53bcfIEeAfKDs7W2fPntXUqVPl5uamZ5999pHXsGTJEvn5+alChQras2eP3njjDXXq1KnYgxEAAAAAKCjCEeAfKC0tTZUrV1bFihUVFxdXLAuXnjp1SqNGjdKpU6fk6empjh07avz48Y+8DgAAAAB4WEyrAfCvw7QaAAAA/NsxrSZ/8juthtUNAQAAAACARSMcAQAAAAAAFo1wBAAAAAAAWDTCEQAAAAAAYNEIRwAAAAAAgEUjHAEAAAAAABaNcAQAAAAAAFg0whEAAAAAAGDRCEcAAAAAAIBFIxwBAAAAAAAWzaa4CwCAouL95o9ycXEp7jIAAAAA/M0xcgQAAAAAAFg0whEAAAAAAGDRCEcAAAAAAIBFIxwBAAAAAAAWjXAEAAAAAABYNMIRAAAAAABg0QhHAAAAAACARSMcAQAAAAAAFo1wBAAAAAAAWDTCEQAAAAAAYNFsirsAACgqLea1kI0D/5kDABStxNcSi7sEAMBDYuQIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALBrhCAAAAAAAsGiEIwAAAAAAwKIRjgAAAAAAAItGOAIAAAAAACwa4QgAAAAAALBohCMAAAAAAMCiEY4AAAAAAACLRjgCAAAAAAAsGuEIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AosXFRUlg8GgV155Jdex/v37y2AwKCoqqtCuZzAYtGrVqkI7X0Hk3KvBYFCJEiVUvnx5tWjRQosWLVJ2dnax1AQAAAAAxY1wBJDk7e2tZcuW6a+//jLtu3btmj755BP5+PgUY2V3d+PGjQd6X2RkpNLT05Wamqp169apWbNmGjRokFq3bq2bN28WcpXmrl+/XqTnBwAAAIAHQTgCSAoNDZW3t7dWrlxp2rdy5Ur5+PgoJCTErG18fLwaN24sNzc3lSlTRq1bt9aRI0dMx69fv64BAwbI09NT9vb2qlSpkmJiYiRJvr6+kqT27dvLYDCYtiVp9erVCg0Nlb29vfz8/DR27FizsMJgMGju3Ll69tln5ejoqPHjx+vChQvq1q2b3N3d5eDgoGrVqik2Nvae92pnZycPDw9VqFBBoaGheuutt7R69WqtW7dOcXFxpnYXL15UdHS03N3d5eLiovDwcO3Zs8fsXO+//77KlSsnZ2dnRUdH680331Tt2rVNx6OiotSuXTuNHz9eXl5eCggIkCSdOHFCnTp1kpubm0qXLq22bdsqNTXV7NwLFy5UjRo1ZG9vr+rVq+uDDz64530BAAAAwIMiHAH+f7179zYLFhYtWqRevXrlanflyhUNHTpUO3fuVEJCgqysrNS+fXvTtJRZs2bpq6++0meffaYDBw5o6dKlphAkKSlJkhQbG6v09HTT9vfff68ePXpo0KBBSklJ0fz58xUXF6fx48ebXXvMmDFq3769kpOT1bt3b7377rtKSUnRunXrtH//fs2dO1dly5Yt8L2Hh4frscceMwuHOnbsqDNnzmjdunXatWuXQkND1bx5c50/f16StHTpUo0fP14TJ07Url275OPjo7lz5+Y6d0JCgg4cOKANGzZozZo1unHjhlq2bClnZ2d9//33SkxMlJOTkyIjI00jS5YuXapRo0Zp/Pjx2r9/vyZMmKB3331XixcvzrP+zMxMXb582ewFAAAAAPllU9wFAH8XL774okaOHKnjx49LkhITE7Vs2TJt3rzZrN1zzz1ntr1o0SK5u7srJSVFQUFBSktLU7Vq1dS4cWMZDAZVqlTJ1Nbd3V2S5ObmJg8PD9P+sWPH6s0331TPnj0lSX5+fnrvvfc0YsQIjR492tTuhRdeMAts0tLSFBISorp160qS2UiUgqpevbr27t0rSdq2bZt27NihM2fOyM7OTpI0ZcoUrVq1SitWrFDfvn01e/ZsvfTSS6Z6Ro0apfXr1ysjI8PsvI6Ojlq4cKFsbW0lSR9//LGys7O1cOFCGQwGSbfCIjc3N23evFlPPfWURo8eralTp6pDhw6SpMqVK5tCo5w+ul1MTIzGjh37wPcOAAAAwLIxcgT4/7m7u6tVq1aKi4tTbGysWrVqlecojEOHDqlr167y8/OTi4uLKZBIS0uTdGsqye7duxUQEKCBAwdq/fr19732nj17NG7cODk5OZleffr0UXp6uq5evWpqlxOC5Hj11Ve1bNky1a5dWyNGjNAPP/zwwPdvNBpNYcWePXuUkZGhMmXKmNV07Ngx0xSiAwcOqH79+mbnuHNbkoKDg03BSM65Dx8+LGdnZ9N5S5curWvXrunIkSO6cuWKjhw5opdeesns2u+//77Z9KXbjRw5UpcuXTK9Tpw48cD9AAAAAMDyMHIEuE3v3r01YMAASdL//d//5dmmTZs2qlSpkhYsWCAvLy9lZ2crKCjINCUkNDRUx44d07p167Rx40Z16tRJERERWrFixV2vm5GRobFjx5pGStzO3t7e9GdHR0ezY08//bSOHz+ub775Rhs2bFDz5s3Vv39/TZkypcD3vn//flWuXNlUj6enZ65RM9KtUS8FcWfNGRkZqlOnjpYuXZqrrbu7u2nkyYIFC9SgQQOz49bW1nlew87OzjTCBQAAAAAKinAEuE3OuhcGg0EtW7bMdfzcuXM6cOCAFixYoCeffFLSrSkod3JxcVHnzp3VuXNnPf/884qMjNT58+dVunRplShRQllZWWbtQ0NDdeDAAVWtWrXANbu7u6tnz57q2bOnnnzySb3++usFDke+++47JScna8iQIaZ6Tp06JRsbm7tO1QkICFBSUpJ69Ohh2pezhsq9hIaGavny5SpXrpxcXFxyHXd1dZWXl5eOHj2qbt26Feg+AAAAAOBBEI4At7G2ttb+/ftNf75TqVKlVKZMGX344Yfy9PRUWlqa3nzzTbM206ZNk6enp0JCQmRlZaXPP/9cHh4ephEXvr6+SkhIUKNGjWRnZ6dSpUpp1KhRat26tXx8fPT888/LyspKe/bs0b59+/T+++/ftd5Ro0apTp06qlmzpjIzM7VmzRrVqFHjnveYmZmpU6dOKSsrS6dPn1Z8fLxiYmLUunVrU9ARERGhJ554Qu3atdOkSZPk7++vkydPau3atWrfvr3q1q2r1157TX369FHdunXVsGFDLV++XHv37pWfn989r9+tWzdNnjxZbdu21bhx41SxYkUdP35cK1eu1IgRI1SxYkWNHTtWAwcOlKurqyIjI5WZmamdO3fqwoULGjp06D3PDwAAAAAFxZojwB1cXFzyHNEgSVZWVlq2bJl27dqloKAgDRkyRJMnTzZr4+zsrEmTJqlu3bqqV6+eUlNT9c0338jK6tZft6lTp2rDhg3y9vY2PSa4ZcuWWrNmjdavX6969erp8ccf1/Tp080Wc82Lra2tRo4cqVq1aqlJkyaytrbWsmXL7vme+Ph4eXp6ytfXV5GRkdq0aZNmzZql1atXmwIhg8Ggb775Rk2aNFGvXr3k7++vLl266Pjx4ypfvrykWyHHyJEjNXz4cNNUoqioKLNpQHkpWbKktm7dKh8fH3Xo0EE1atTQSy+9pGvXrpn6PTo6WgsXLlRsbKyCg4PVtGlTxcXFmab9AAAAAEBhMhiNRmNxFwHg36FFixby8PDQRx99VKx1XL58Wa6urqo/sb5sHBggBwAoWomvJRZ3CQCAu8j5bXDp0qW7/iO4xLQaAA/o6tWrmjdvnlq2bClra2t9+umn2rhxozZs2FDcpQEAAABAgRCOAHggOVNvxo8fr2vXrikgIEBffPGFIiIiirs0AAAAACgQwhEAD8TBwUEbN24s7jIAAAAA4KGxICsAAAAAALBohCMAAAAAAMCiEY4AAAAAAACLRjgCAAAAAAAsGuEIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALBrhCAAAAAAAsGiEIwAAAAAAwKIRjgAAAAAAAItmU9wFAEBR2fDKBrm4uBR3GQAAAAD+5hg5AgAAAAAALBrhCAAAAAAAsGiEIwAAAAAAwKIRjgAAAAAAAItGOAIAAAAAACwa4QgAAAAAALBohCMAAAAAAMCiEY4AAAAAAACLRjgCAAAAAAAsmk1xFwAARWVb5NNytOE/cwCA3Jpu3VLcJQAA/kYYOQIAAAAAACwa4QgAAAAAALBohCMAAAAAAMCiEY4AAAAAAACLRjgCAAAAAAAsGuEIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALBrhCAAAAAAAsGiEIwAAAAAAwKIRjgAAAAAAAItGOAIAAAAAACwa4QgAAAAAALBohCN/E2PGjFH58uVlMBi0atWqIr2Wr6+vZsyYUaTXuFNqaqoMBoN27979SK97P3FxcXJzczPb9+GHH8rb21tWVlaaMWOGxowZo9q1axdLfUUpKipK7dq1K9B7iuO7AwAAAABFjXCkAKKiomQwGGQwGGRra6uqVatq3Lhxunnz5kOdd//+/Ro7dqzmz5+v9PR0Pf3004VUcd6SkpLUt2/fIr3Ggzp8+LB69eqlihUrys7OTpUrV1bXrl21c+fOhz53Xj/sO3furIMHD5q2L1++rAEDBuiNN97QH3/8ob59+2r48OFKSEh46OvnyCuQKYgtW7bI29s7z2ObN282fUetrKzk6uqqkJAQjRgxQunp6WZtZ86cqbi4uAeuAwAAAAD+LQhHCigyMlLp6ek6dOiQhg0bpjFjxmjy5Ml5tr1+/Xq+znnkyBFJUtu2beXh4SE7O7tCqzcv7u7uKlmyZJFe40Hs3LlTderU0cGDBzV//nylpKToyy+/VPXq1TVs2LAHPu+9PgcHBweVK1fOtJ2WlqYbN26oVatW8vT0VMmSJeXk5KQyZco88PUL2+rVq9WmTZt7tjlw4IBOnjyppKQkvfHGG9q4caOCgoKUnJxsauPq6vpQIQ0AAAAA/FsQjhSQnZ2dPDw8VKlSJb366quKiIjQV199Jen/TVMYP368vLy8FBAQIElKTk5WeHi4HBwcVKZMGfXt21cZGRmSbk2nyfmha2VlJYPBYLrWwoULVaNGDdnb26t69er64IMPTMeuX7+uAQMGyNPTU/b29qpUqZJiYmIkSUajUWPGjJGPj4/s7Ozk5eWlgQMHmt575wiKtLQ0tW3bVk5OTnJxcVGnTp10+vRp0/GcaSUfffSRfH195erqqi5duuh///ufqU18fLwaN24sNzc3lSlTRq1btzaFPvlhNBoVFRWlatWq6fvvv1erVq1UpUoV1a5dW6NHj9bq1atNbU+cOKFOnTrJzc1NpUuXVtu2bZWammo6ntfnEBYWpuPHj2vIkCGmkRWS+SiOuLg4BQcHS5L8/PxkMBiUmpqa57SaRYsWqWbNmrKzs5Onp6cGDBhgOjZt2jQFBwfL0dFR3t7e6tevn+nz3rx5s3r16qVLly6Z6hgzZowkKTMzU8OHD1eFChXk6OioBg0aaPPmzbn66quvvtKzzz57z/4sV66cPDw85O/vry5duigxMVHu7u569dVXc/VTjrCwMA0YMEADBgyQq6urypYtq3fffVdGo/Gu18nvd2fRokXy8fGRk5OT+vXrp6ysLE2aNEkeHh4qV66cxo8fb3bee/UhAAAAABS2fIUjpUqVUunSpfP1sjQODg5mIxMSEhJ04MABbdiwQWvWrNGVK1fUsmVLlSpVSklJSfr888+1ceNG04/p4cOHKzY2VpKUnp5umvqwdOlSjRo1SuPHj9f+/fs1YcIEvfvuu1q8eLEkadasWfrqq6/02Wef6cCBA1q6dKl8fX0lSV988YWmT5+u+fPn69ChQ1q1apXpR/+dsrOz1bZtW50/f15btmzRhg0bdPToUXXu3Nms3ZEjR7Rq1SqtWbNGa9as0ZYtW/Sf//zHdPzKlSsaOnSodu7cqYSEBFlZWal9+/bKzs7OVz/u3r1bv/76q4YNGyYrq9xfy5wA48aNG2rZsqWcnZ31/fffKzExUU5OToqMjLzn57By5UpVrFhR48aNM+vn23Xu3FkbN26UJO3YsUPp6el5Tl+ZO3eu+vfvr759+yo5OVlfffWVqlatajpuZWWlWbNm6ddff9XixYv13XffacSIEZKkhg0basaMGXJxcTHVMXz4cEnSgAEDtH37di1btkx79+5Vx44dFRkZqUOHDpnO/euvv+rMmTMKDw/PV7/mcHBw0CuvvKLExESdOXPmru0WL14sGxsb7dixQzNnztS0adO0cOHCPNsW5Luzbt06xcfH69NPP9V///tftWrVSr///ru2bNmiiRMn6p133tFPP/2Urz7MS2Zmpi5fvmz2AgAAAID8sslPIxZgzM1oNCohIUHffvutXnvtNdN+R0dHLVy4ULa2tpKkBQsW6Nq1a1qyZIkcHR0lSXPmzFGbNm00ceJElS9f3vTD38PDw3Se0aNHa+rUqerQoYMkqXLlykpJSdH8+fPVs2dPpaWlqVq1amrcuLEMBoMqVapkem9aWpo8PDwUERGhEiVKyMfHR/Xr18/zPhISEpScnKxjx46ZgoAlS5aoZs2aSkpKUr169STd+iEcFxcnZ2dnSVL37t2VkJBg+hf/5557zuy8ixYtkru7u1JSUhQUFHTf/swJAKpXr37PdsuXL1d2drYWLlxoGv0RGxsrNzc3bd68WU899ZSk3J+DJFlbW8vZ2dmsn2+XM7JHujX16G7t3n//fQ0bNkyDBg0y7cvpJ0kaPHiw6c++vr56//339corr+iDDz6Qra2tXF1dZTAYzM6flpam2NhYpaWlycvLS9Kt4Cw+Pl6xsbGaMGGCpFtTalq2bGl2X/mV07epqalmU4lu5+3trenTp8tgMCggIEDJycmaPn26+vTpk6ttQb47ixYtkrOzswIDA9WsWTMdOHBA33zzjaysrBQQEKCJEydq06ZNatCgwX37MC8xMTEaO3ZsgfsEAAAAAKR8hiM9e/Ys6jr+MdasWSMnJyfduHFD2dnZeuGFF0zTIiQpODjY7Ifr/v379dhjj5mCEUlq1KiRsrOzdeDAAZUvXz7XNa5cuaIjR47opZdeMvtRevPmTbm6ukq6NSWiRYsWCggIUGRkpFq3bm0KBjp27KgZM2bIz89PkZGReuaZZ9SmTRvZ2OT+uPfv3y9vb2+zERKBgYFyc3PT/v37TT9wfX19TcGIJHl6epqNQDh06JBGjRqln376SWfPnjWNGElLS8tXOHKvqRu327Nnjw4fPmxWiyRdu3bNbBrPnZ9DYTlz5oxOnjyp5s2b37XNxo0bFRMTo99++02XL1/WzZs3de3aNV29evWua70kJycrKytL/v7+ZvszMzPN1jtZvXq12RSegsjp49unbt3p8ccfNzv+xBNPaOrUqcrKypK1tbVZ2wf97pQvX17W1tZmI4TKly9v9n0qaB+OHDlSQ4cONW1fvnz5rovWAgAAAMCd8hWO3OnIkSOKjY3VkSNHNHPmTJUrV07r1q2Tj4+PatasWdg1/q00a9ZMc+fOla2trby8vHIFDreHIA8qZ22FBQsWmP4lPUfOD9TQ0FAdO3ZM69at08aNG9WpUydFRERoxYoV8vb21oEDB7Rx40Zt2LBB/fr10+TJk7VlyxaVKFHigWq6830Gg8FsykybNm1UqVIlLViwQF5eXsrOzlZQUFC+F6XNCQV+++03hYSE3LVdRkaG6tSpo6VLl+Y65u7ubvpzYXwOeXFwcLjn8dTUVLVu3Vqvvvqqxo8fr9KlS2vbtm166aWXdP369buGIxkZGbK2ttauXbtyhRBOTk6Sbk27+uWXX9SqVasHqn3//v2SZJp+9ajk9d251/fpQfrQzs6uyBcyBgAAAPDvVeAFWbds2aLg4GD99NNPWrlypemH/J49ezR69OhCL/DvxtHRUVWrVpWPj0+eIzHuVKNGDe3Zs0dXrlwx7UtMTDRNJ8hL+fLl5eXlpaNHj6pq1apmr8qVK5vaubi4qHPnzlqwYIGWL1+uL774QufPn5d060d8mzZtNGvWLG3evFnbt283e1LJ7fWdOHFCJ06cMO1LSUnRxYsXFRgYmK8+OXfunA4cOKB33nlHzZs3V40aNXThwoV8vTdH7dq1FRgYqKlTp+a5TsnFixcl3QqFDh06pHLlyuXqm5xRNXdja2urrKysAtV1J2dnZ/n6+t710b67du1Sdna2pk6dqscff1z+/v46efLkfesICQlRVlaWzpw5k+u+cqbffP3112rYsOEDre3z119/6cMPP1STJk3MQqQ73b7uhyT9+OOPqlatWq7ARiqc705e8tOHAAAAAFCYChyOvPnmm3r//fe1YcMGs2kL4eHh+vHHHwu1uH+Dbt26yd7eXj179tS+ffu0adMmvfbaa+revXueU2pyjB07VjExMZo1a5YOHjyo5ORkxcbGatq0aZJuPc3j008/1W+//aaDBw/q888/l4eHh9zc3BQXF6f//ve/2rdvn44ePaqPP/5YDg4OZuuS5IiIiFBwcLC6deumn3/+WTt27FCPHj3UtGlT1a1bN1/3WKpUKZUpU0YffvihDh8+rO+++85sikN+GAwGxcbG6uDBg3ryySf1zTff6OjRo9q7d6/Gjx+vtm3bmvqzbNmyatu2rb7//nsdO3ZMmzdv1sCBA/X777/f8xq+vr7aunWr/vjjD509e7ZA9d1uzJgxmjp1qmbNmqVDhw7p559/1uzZsyVJVatW1Y0bNzR79mwdPXpUH330kebNm5erjoyMDCUkJOjs2bO6evWq/P391a1bN/Xo0UMrV67UsWPHtGPHDsXExGjt2rWS8veUmhxnzpzRqVOndOjQIS1btkyNGjXS2bNnNXfu3Hu+Ly0tTUOHDtWBAwf06aefavbs2WZrq9yuML47eclPHwIAAABAYSpwOJKcnKz27dvn2l+uXLmH+sH5b1WyZEl9++23On/+vOrVq6fnn39ezZs315w5c+75vujoaC1cuFCxsbEKDg5W06ZNFRcXZxo54uzsrEmTJqlu3bqqV6+eUlNTTQtcurm5acGCBWrUqJFq1aqljRs36uuvvzZbuyKHwWDQ6tWrVapUKTVp0kQRERHy8/PT8uXL832PVlZWWrZsmXbt2qWgoCANGTJEkydPLlhHSapfv7527typqlWrqk+fPqpRo4aeffZZ/frrr6ZFgUuWLKmtW7fKx8dHHTp0UI0aNfTSSy/p2rVrcnFxuef5x40bp9TUVFWpUuWeoyfup2fPnpoxY4Y++OAD1axZU61btzYtKPvYY49p2rRpmjhxooKCgrR06VLTI5ZzNGzYUK+88oo6d+4sd3d3TZo0SdKthWV79OihYcOGKSAgQO3atVNSUpJ8fHx05coVJSQk5DscCQgIkJeXl+rUqaP//Oc/ioiI0L59++47oqNHjx7666+/VL9+ffXv31+DBg1S375982xbGN+dvOSnDwEAAACgMBmM+V0J8/9XsWJFffbZZ2rYsKGcnZ21Z88e+fn56csvv9Tw4cPNFsUEUDhWrlypd955RykpKUV2jbCwMNWuXftf8XSqy5cvy9XVVWufaCjHfEx/AwBYnqZbtxR3CQCARyDnt8GlS5fu+Q/qBR450qVLF73xxhs6deqUaRHFxMREDR8+XD169HioogHkzcnJSRMnTizuMgAAAADgX6nA/6Q6YcIE9e/fX97e3srKylJgYKCysrL0wgsv6J133imKGgGLl/OYZgAAAABA4SvwtJocaWlp2rdvnzIyMhQSEqJq1aoVdm0A8ECYVgMAuB+m1QCAZcjvtJoC/2rYtm2bGjduLB8fH/n4+DxUkQAAAAAAAMWtwGuOhIeHq3LlynrrrbeKdHFIAAAAAACAR6HA4cjJkyc1bNgwbdmyRUFBQapdu7YmT56s33//vSjqAwAAAAAAKFIFDkfKli2rAQMGKDExUUeOHFHHjh21ePFi+fr6Kjw8vChqBAAAAAAAKDIFDkduV7lyZb355pv6z3/+o+DgYG3ZwsJWAAAAAADgn+WBw5HExET169dPnp6eeuGFFxQUFKS1a9cWZm0AAAAAAABFrsBPqxk5cqSWLVumkydPqkWLFpo5c6batm2rkiVLFkV9AAAAAAAARarA4cjWrVv1+uuvq1OnTipbtmxR1AQAAAAAAPDIFDgcSUxMLIo6AAAAAAAAisUDrTny0UcfqVGjRvLy8tLx48clSTNmzNDq1asLtTgAAAAAAICiVuBwZO7cuRo6dKieeeYZXbx4UVlZWZIkNzc3zZgxo7DrAwAAAAAAKFIGo9FoLMgbAgMDNWHCBLVr107Ozs7as2eP/Pz8tG/fPoWFhens2bNFVSsA5Mvly5fl6uqqS5cuycXFpbjLAQAAAFBM8vvboMAjR44dO6aQkJBc++3s7HTlypWCng4AAAAAAKBYFTgcqVy5snbv3p1rf3x8vGrUqFEYNQEAAAAAADwyBX5azdChQ9W/f39du3ZNRqNRO3bs0KeffqqYmBgtXLiwKGoEAAAAAAAoMgUOR6Kjo+Xg4KB33nlHV69e1QsvvCAvLy/NnDlTXbp0KYoaAQAAAAAAikyBF2S93dWrV5WRkaFy5crp6tWr2r17txo2bFiY9QFAgbEgKwAAAAAp/78NCjxy5HYlS5ZUyZIlJUmHDh3Sk08+aXq0LwAAAAAAwD9BgRdkBQAAAAAA+DchHAEAAAAAABaNcAQAAAAAAFi0fK858tVXX93z+LFjxx66GAAoTPPfWicHu5LFXQb+wQZMbVPcJQAAAOARyHc40q5du/u2MRgMD1MLAAAAAADAI5fvcCQ7O7so6wAAAAAAACgWrDkCAAAAAAAsGuEIAAAAAACwaIQjAAAAAADAohGOAAAAAAAAi0Y4AgAAAAAALFq+n1Zzp+vXr+vMmTO5nmLj4+Pz0EUBAAAAAAA8KgUORw4dOqTevXvrhx9+MNtvNBplMBiUlZVVaMUBAAAAAAAUtQKHI1FRUbKxsdGaNWvk6ekpg8FQFHUBAAAAAAA8EgUOR3bv3q1du3apevXqRVEPAAAAAADAI1XgBVkDAwN19uzZoqgFAAAAAADgkStwODJx4kSNGDFCmzdv1rlz53T58mWzFwAAAAAAwD9JgafVRERESJKaN29utp8FWQEAAAAAwD9RgcORTZs2FUUdAAAAAAAAxaLA4UjTpk2Log5YGKPRqJdfflkrVqzQhQsX9Msvv6h27dqP5NphYWGqXbu2ZsyYUaTXMRgM+vLLL9WuXbsivQ4AAAAA4OEUeM0RSbp48aKmTp2q6OhoRUdHa/r06bp06VJh14a/saioqIf60R8fH6+4uDitWbNG6enpCgoKksFg0KpVq+773i1btig8PFylS5dWyZIlVa1aNfXs2VPXr19/4Hr+jlJTU2UwGLR79+77th04cKDq1KkjOzu7u4ZM3377rR5//HE5OzvL3d1dzz33nFJTUwu1ZgAAAAD4JypwOLJz505VqVJF06dP1/nz53X+/HlNmzZNVapU0c8//1wUNeJf6MiRI/L09FTDhg3l4eEhG5v8DWJKSUlRZGSk6tatq61btyo5OVmzZ8+Wra2txa9307t3b3Xu3DnPY8eOHVPbtm0VHh6u3bt369tvv9XZs2fVoUOHR1zl/f3bQi4AAAAAf38FDkeGDBmiZ599VqmpqVq5cqVWrlypY8eOqXXr1ho8eHARlIh/on379unpp5+Wk5OTypcvr+7du5seAR0VFaXXXntNaWlpMhgM8vX1la+vrySpffv2pn15Wb9+vTw8PDRp0iQFBQWpSpUqioyM1IIFC+Tg4GBql5iYqLCwMJUsWVKlSpVSy5YtdeHCBdPx7OxsjRgxQqVLl5aHh4fGjBljdp20tDS1bdtWTk5OcnFxUadOnXT69GmzNnPnzlWVKlVka2urgIAAffTRRwXqo/j4eDVu3Fhubm4qU6aMWrdurSNHjpiOV65cWZIUEhIig8GgsLCwu55r1qxZ6t+/v/z8/PI8vmvXLmVlZen9999XlSpVFBoaquHDh2v37t26ceNGnu8JDw/XgAEDzPb9+eefsrW1VUJCgiQpMzNTw4cPV4UKFeTo6KgGDRpo8+bNpvbnzp1T165dVaFCBZUsWVLBwcH69NNPzc4ZFhamAQMGaPDgwSpbtqxatmwpo9GoMWPGyMfHR3Z2dvLy8tLAgQPvev8AAAAA8DAeaOTIG2+8YfYv/TY2NhoxYoR27txZqMXhn+nixYsKDw9XSEiIdu7cqfj4eJ0+fVqdOnWSJM2cOVPjxo1TxYoVlZ6erqSkJCUlJUmSYmNjTfvy4uHhofT0dG3duvWu19+9e7eaN2+uwMBAbd++Xdu2bVObNm3MRpYsXrxYjo6O+umnnzRp0iSNGzdOGzZskHQrOGnbtq3Onz+vLVu2aMOGDTp69KjZqIwvv/xSgwYN0rBhw7Rv3z69/PLL6tWrV4EWLL5y5YqGDh2qnTt3KiEhQVZWVmrfvr2ys7MlSTt27JAkbdy4Uenp6Vq5cmW+z32nOnXqyMrKSrGxscrKytKlS5f00UcfKSIiQiVKlMjzPdHR0frkk0+UmZlp2vfxxx+rQoUKCg8PlyQNGDBA27dv17Jly7R371517NhRkZGROnTokCTp2rVrqlOnjtauXat9+/apb9++6t69u+necixevFi2trZKTEzUvHnz9MUXX2j69OmaP3++Dh06pFWrVik4OPiu95eZmcljxQEAAAA8sAIvyOri4qK0tDRVr17dbP+JEyfk7OxcaIXhn2vOnDkKCQnRhAkTTPsWLVokb29vHTx4UP7+/nJ2dpa1tbU8PDzM3uvm5pZr3+06duyob7/9Vk2bNpWHh4cef/xxNW/eXD169JCLi4skadKkSapbt64++OAD0/tq1qxpdp5atWpp9OjRkqRq1appzpw5SkhIUIsWLZSQkKDk5GQdO3ZM3t7ekqQlS5aoZs2aSkpKUr169TRlyhRFRUWpX79+kqShQ4fqxx9/1JQpU9SsWbN89dNzzz1ntr1o0SK5u7srJSVFQUFBcnd3lySVKVPmnn2SH5UrV9b69evVqVMnvfzyy8rKytITTzyhb7755q7v6dChgwYMGKDVq1ebgq24uDhFRUXJYDAoLS1NsbGxSktLk5eXlyRp+PDhio+PV2xsrCZMmKAKFSpo+PDhpnO+9tpr+vbbb/XZZ5+pfv36pv3VqlXTpEmTTNtr166Vh4eHKbzx8fExa3+nmJgYjR079oH7BwAAAIBlK/DIkc6dO+ull17S8uXLdeLECZ04cULLli1TdHS0unbtWhQ14h9mz5492rRpk5ycnEyvnDDt9mkjD8La2lqxsbH6/fffNWnSJFWoUEETJkxQzZo1lZ6eLun/jRy5l1q1aplte3p66syZM5Kk/fv3y9vb2xSMSFJgYKDc3Ny0f/9+U5tGjRqZnaNRo0am4/lx6NAhde3aVX5+fnJxcTFNJUpLS8v3OfLr1KlT6tOnj3r27KmkpCRt2bJFtra2ev7552U0GvN8j729vbp3765FixZJkn7++Wft27dPUVFRkqTk5GRlZWXJ39/f7LPesmWL6XPOysrSe++9p+DgYJUuXVpOTk769ttvc91jnTp1zLY7duyov/76S35+furTp4++/PJL3bx58673N3LkSF26dMn0OnHixIN2FQAAAAALVOCRI1OmTJHBYFCPHj1MP1ZKlCihV199Vf/5z38KvUD882RkZKhNmzaaOHFirmOenp6Fco0KFSqoe/fu6t69u9577z35+/tr3rx5Gjt2rNnaI3dz51QSg8Fgms7yqLRp00aVKlXSggUL5OXlpezsbAUFBRXJgqT/93//J1dXV7PRGR9//LG8vb31008/6fHHH8/zfdHR0apdu7Z+//13xcbGKjw8XJUqVZJ063O2trbWrl27ZG1tbfY+JycnSdLkyZM1c+ZMzZgxQ8HBwXJ0dNTgwYNz3aOjo6PZtre3tw4cOKCNGzdqw4YN6tevnyZPnqwtW7bkOQ3Izs5OdnZ2Be8YAAAAANADhCO2traaOXOmYmJiTP86XKVKFZUsWbLQi8M/U2hoqL744gv5+vrm+yk00q3A4kGeOFOqVCl5enrqypUrkm6NCklISHjgaRY1atQwjYrKGT2SkpKiixcvKjAw0NQmMTFRPXv2NL0vMTHRdPx+zp07pwMHDmjBggV68sknJUnbtm0za2NraytJhfIUnqtXr8rKynygWE6gca9QKDg4WHXr1tWCBQv0ySefaM6cOaZjISEhysrK0pkzZ0z3cKfExES1bdtWL774oulaBw8ezFc/OTg4qE2bNmrTpo369++v6tWrKzk5WaGhofd9LwAAAAAURIHDkRw5T56A5bp06ZJ2795ttq9MmTLq37+/FixYoK5du5qeCHP48GEtW7ZMCxcuzDXKIIevr68SEhLUqFEj2dnZqVSpUrnazJ8/X7t371b79u1VpUoVXbt2TUuWLNGvv/6q2bNnS7o1xSI4OFj9+vXTK6+8IltbW23atEkdO3ZU2bJl73tfERERCg4OVrdu3TRjxgzdvHlT/fr1U9OmTVW3bl1J0uuvv65OnTopJCREERER+vrrr7Vy5Upt3LgxX31XqlQplSlTRh9++KE8PT2VlpamN99806xNuXLl5ODgoPj4eFWsWFH29vZydXXN83yHDx9WRkaGTp06pb/++sv0uQQGBsrW1latWrXS9OnTNW7cOHXt2lX/+9//9NZbb6lSpUoKCQm5Z63R0dEaMGCAHB0d1b59e9N+f39/devWTT169NDUqVMVEhKiP//8UwkJCapVq5ZatWqlatWqacWKFfrhhx9UqlQpTZs2TadPn75vOBIXF6esrCw1aNBAJUuW1McffywHBwfTqBUAAAAAKEz5WnOkQ4cOpqc/dOjQ4Z4vWI7NmzcrJCTE7DV27Fh5eXkpMTFRWVlZeuqppxQcHKzBgwfLzc0t1+iF202dOlUbNmyQt7f3XX+w169fXxkZGXrllVdUs2ZNNW3aVD/++KNWrVqlpk2bSrr1o339+vXas2eP6tevryeeeEKrV6/O9ygWg8Gg1atXq1SpUmrSpIkiIiLk5+en5cuXm9q0a9dOM2fO1JQpU1SzZk3Nnz9fsbGx93zc7u2srKy0bNky7dq1S0FBQRoyZIgmT55s1sbGxkazZs3S/Pnz5eXlpbZt2971fNHR0QoJCdH8+fN18OBB0+dx8uRJSbcey/vJJ59o1apVCgkJUWRkpOzs7BQfH3/faUhdu3aVjY2NunbtKnt7e7NjsbGx6tGjh4YNG6aAgAC1a9dOSUlJ8vHxkSS98847Cg0NVcuWLRUWFiYPDw+1a9fuvv3j5uamBQsWqFGjRqpVq5Y2btyor7/+WmXKlLnvewEAAACgoAzGu63GeJtevXpp1qxZcnZ2Nj2p4m5iY2MLtUAAxSs1NVVVqlRRUlLSP2ZKy+XLl2+tsdJ/mRzsmPKHBzdgapviLgEAAAAPIee3waVLl0xPOM1Lvv4p/fbAIy4u7qGLA/D3d+PGDZ07d07vvPOOHn/88X9MMAIAAAAABVXgR/mGh4fr4sWLufZfvnxZ4eHhhVETgL+BxMREeXp6KikpSfPmzSvucgAAAACgyBR4QdbNmzfn+ajRa9eu6fvvvy+UogAUv7CwMOVj1h0AAAAA/OPlOxzZu3ev6c8pKSk6deqUaTsrK0vx8fGqUKFC4VYHAAAAAABQxPIdjtSuXVsGg0EGgyHP6TMODg6mR6kCAAAAAAD8U+Q7HDl27JiMRqP8/Py0Y8cOubu7m47Z2tqqXLlysra2LpIiAQAAAAAAikq+w5FKlSpJkrKzs4usGAAAAAAAgEetwAuy5khJSVFaWlquxVmfffbZhy4KAAAAAADgUSlwOHL06FG1b99eycnJMhgMpqdZGAwGSbcWZwUAAAAAAPinsCroGwYNGqTKlSvrzJkzKlmypH799Vdt3bpVdevW1ebNm4ugRAAAAAAAgKJT4JEj27dv13fffaeyZcvKyspKVlZWaty4sWJiYjRw4ED98ssvRVEnAAAAAABAkSjwyJGsrCw5OztLksqWLauTJ09KurVg64EDBwq3OgAAAAAAgCJW4JEjQUFB2rNnjypXrqwGDRpo0qRJsrW11Ycffig/P7+iqBEAAAAAAKDIGIw5K6rm07fffqsrV66oQ4cOOnz4sFq3bq2DBw+qTJkyWr58ucLDw4uqVgDIl8uXL8vV1VWXLl2Si4tLcZcDAAAAoJjk97dBgcORvJw/f16lSpUyPbEGAIoT4QgAAAAAKf+/DQq85silS5d0/vx5s32lS5fWhQsXdPny5YJXCgAAAAAAUIwKHI506dJFy5Yty7X/s88+U5cuXQqlKAAAAAAAgEelwOHITz/9pGbNmuXaHxYWpp9++qlQigIAAAAAAHhUChyOZGZm6ubNm7n237hxQ3/99VehFAUAAAAAAPCoFDgcqV+/vj788MNc++fNm6c6deoUSlEAAAAAAACPik1B3/D+++8rIiJCe/bsUfPmzSVJCQkJSkpK0vr16wu9QAAAAAAAgKJU4JEjjRo10vbt2+Xt7a3PPvtMX3/9tapWraq9e/fqySefLIoaAQAAAAAAiozBaDQai7sIAChM+X2WOQAAAIB/t/z+NijwtJq0tLR7Hvfx8SnoKQEAAAAAAIpNgcMRX19fGQyGux7Pysp6qIIAoLBM7tNd9iVKFHcZ+Ad6++MVxV0CAAAAHqEChyO//PKL2faNGzf0yy+/aNq0aRo/fnyhFQYAAAAAAPAoFDgceeyxx3Ltq1u3rry8vDR58mR16NChUAoDAAAAAAB4FAr8tJq7CQgIUFJSUmGdDgAAAAAA4JEo8MiRy5cvm20bjUalp6drzJgxqlatWqEVBgAAAAAA8CgUOBxxc3PLtSCr0WiUt7e3li1bVmiFAQAAAAAAPAoFDkc2bdpktm1lZSV3d3dVrVpVNjYFPh0AAAAAAECxKnCa0bRp06KoAwAAAAAAoFjkKxz56quv8n3CZ5999oGLAQAAAAAAeNTyFY60a9fObNtgMMhoNJpt58jKyiqcygAAAAAAAB6BfD3KNzs72/Rav369ateurXXr1unixYu6ePGivvnmG4WGhio+Pr6o6wUAAAAAAChUBV5zZPDgwZo3b54aN25s2teyZUuVLFlSffv21f79+wu1QAAAAAAAgKKUr5Ejtzty5Ijc3Nxy7Xd1dVVqamohlAQAAAAAAPDoFDgcqVevnoYOHarTp0+b9p0+fVqvv/666tevX6jFAQAAAAAAFLUChyOLFi1Senq6fHx8VLVqVVWtWlU+Pj76448/9N///rcoagQAAAAAACgyBQ5Hqlatqr179+rrr7/WwIEDNXDgQK1Zs0bJycmqWrVqUdSIfyGj0ai+ffuqdOnSMhgM2r179yO7dlhYmAYPHlzk1zEYDFq1alWRXwcAAAAA8HAKHI5It370PfXUU6ZwpEWLFmaP88W/X1RUVK5HPBdEfHy84uLitGbNGqWnpysoKCjfYcKWLVsUHh6u0qVLq2TJkqpWrZp69uyp69evP3A9f0epqan5Do4GDhyoOnXqyM7OTrVr186zjdFo1JQpU+Tv7y87OztVqFBB48ePL9yiAQAAAOAfKN/hyDPPPKNLly6Ztv/zn//o4sWLpu1z584pMDCwUIvDv9eRI0fk6emphg0bysPDQzY2+XtwUkpKiiIjI1W3bl1t3bpVycnJmj17tmxtbZWVlVXEVf+99e7dW507d77r8UGDBmnhwoWaMmWKfvvtN3311Vd/y3WC/m0hFwAAAIC/v3yHI99++60yMzNN2xMmTND58+dN2zdv3tSBAwcKtzr8Y+3bt09PP/20nJycVL58eXXv3l1nz56VdGvUyWuvvaa0tDQZDAb5+vrK19dXktS+fXvTvrysX79eHh4emjRpkoKCglSlShVFRkZqwYIFcnBwMLVLTExUWFiYSpYsqVKlSqlly5a6cOGC6Xh2drZGjBih0qVLy8PDQ2PGjDG7Tlpamtq2bSsnJye5uLioU6dOZosQS9LcuXNVpUoV2draKiAgQB999FGB+ig+Pl6NGzeWm5ubypQpo9atW+vIkSOm45UrV5YkhYSEyGAwKCws7K7nmjVrlvr37y8/P788j+/fv19z587V6tWr9eyzz6py5cqqU6eOWrRocddzhoeHa8CAAWb7/vzzT9na2iohIUGSlJmZqeHDh6tChQpydHRUgwYNtHnzZlP7c+fOqWvXrqpQoYJKliyp4OBgffrpp2bnDAsL04ABAzR48GCVLVtWLVu2lNFo1JgxY+Tj4yM7Ozt5eXlp4MCBd60VAAAAAB5GvsMRo9F4z20gx8WLFxUeHq6QkBDt3LlT8fHxOn36tDp16iRJmjlzpsaNG6eKFSsqPT1dSUlJSkpKkiTFxsaa9uXFw8ND6enp2rp1612vv3v3bjVv3lyBgYHavn27tm3bpjZt2piNLFm8eLEcHR31008/adKkSRo3bpw2bNgg6VZw0rZtW50/f15btmzRhg0bdPToUbNRGV9++aUGDRqkYcOGad++fXr55ZfVq1cvbdq0Kd/9dOXKFQ0dOlQ7d+5UQkKCrKys1L59e2VnZ0uSduzYIUnauHGj0tPTtXLlynyf+05ff/21/Pz8tGbNGlWuXFm+vr6Kjo42CzjvFB0drU8++cQsFP34449VoUIFhYeHS5IGDBig7du3a9myZdq7d686duyoyMhIHTp0SJJ07do11alTR2vXrtW+ffvUt29fde/e3XRvORYvXixbW1slJiZq3rx5+uKLLzR9+nTNnz9fhw4d0qpVqxQcHHzXWjMzM3X58mWzFwAAAADkV/7mMgAFMGfOHIWEhGjChAmmfYsWLZK3t7cOHjwof39/OTs7y9raWh4eHmbvdXNzy7Xvdh07dtS3336rpk2bysPDQ48//riaN2+uHj16yMXFRZI0adIk1a1bVx988IHpfTVr1jQ7T61atTR69GhJUrVq1TRnzhwlJCSoRYsWSkhIUHJyso4dOyZvb29J0pIlS1SzZk0lJSWpXr16mjJliqKiotSvXz9J0tChQ/Xjjz9qypQpatasWb766bnnnjPbXrRokdzd3ZWSkqKgoCC5u7tLksqUKXPPPsmPo0eP6vjx4/r888+1ZMkSZWVlaciQIXr++ef13Xff5fmeDh06aMCAAVq9erUp2IqLi1NUVJQMBoPS0tIUGxurtLQ0eXl5SZKGDx+u+Ph4xcbGasKECapQoYKGDx9uOudrr72mb7/9Vp999pnZlJ5q1app0qRJpu21a9fKw8NDERERKlGihHx8fO45BSgmJkZjx459qD4CAAAAYLnyPXLEYDDkWnSVRViRlz179mjTpk1ycnIyvapXry5JZtNGHoS1tbViY2P1+++/a9KkSapQoYImTJigmjVrKj09XdL/GzlyL7Vq1TLb9vT01JkzZyTdmoLi7e1tCkYkKTAwUG5ubtq/f7+pTaNGjczO0ahRI9Px/Dh06JC6du0qPz8/ubi4mKYSpaWl5fsc+ZWdna3MzEwtWbJETz75pMLCwvTf//5XmzZtuut0OHt7e3Xv3l2LFi2SJP3888/at2+foqKiJEnJycnKysqSv7+/2We9ZcsW0+eclZWl9957T8HBwSpdurScnJz07bff5rrHOnXqmG137NhRf/31l/z8/NSnTx99+eWXunnz5l3vb+TIkbp06ZLpdeLEiQftKgAAAAAWKN8jR4xGo6KiomRnZyfp1nD5V155RY6OjpJkNvQeli0jI0Nt2rTRxIkTcx3z9PQslGtUqFBB3bt3V/fu3fXee+/J399f8+bN09ixY83W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qCeffFKurq5ycnJSSEiIiouL72isAAAAAHC3oThiw7766it5eXnpN7/5jTw9PWVvb9+g444ePaqoqCj169dPu3fv1uHDh7VixQo5ODiopqbmV4769ouKilJpaalKS0uVkZEhe3t7PfHEEzd1jq+++kqSFBMTI09PTzk6Ot5SLJcvX76l46qrq9W7d2+tWrXqujE+/PDD6tGjh7KysnTo0CHNnTtXzZo1u6Vr/loMw9CVK1caOwwAAAAANoTiyH3syJEjGj58uJydndWuXTuNHTtW//rXvyTVjZh4/vnnVVxcLIvFos6dO6tz586SpNjYWHNffXbt2iVPT08lJiaqV69e6tatm6KiorRu3To1b97c7Jebm6tBgwapRYsWcnd3V2RkpH744Qezvba2Vi+++KI8PDzk6empBQsWWF2nuLhYMTExcnZ2louLi0aNGqXvvvvOqs/q1avVrVs3OTg46IEHHtBf/vKXm35Ojo6O8vT0lKenpx588EHNmTNHJSUl+v77780+JSUlGjVqlNzc3OTh4aGYmBidPHlSUt10mujoaEmSnZ2dLBaLeX8vv/yyOnToIEdHRz344INKS0szz3ny5ElZLBZt2rRJ4eHhatasmTZs2CBJSkpKUs+ePdWsWTP16NFDf/rTn657D8OHD9fixYsVGxt7zT7/+Z//qccee0yJiYkKDg5Wt27d9OSTT6pt27b19t+9e7eaNm2qsrIyq/0zZszQI488Ym7n5OTokUceUfPmzeXj46Np06apurrabP/LX/6ifv36qWXLlvL09NQzzzyj06dPm+1ZWVmyWCzauXOn+vbtK0dHR+Xk5OjgwYMaPHiwWrZsKRcXF/Xt21f79++/7nMAAAAAgFtBceQ+VV5eriFDhig4OFj79+9XWlqavvvuO40aNUqS9Oabb5o/3EtLS5WXl6e8vDxJUnJysrmvPp6eniotLdXu3buvef2CggINHTpU/v7++uyzz5STk6Po6GirkSVvv/22nJyctHfvXiUmJurll19Wenq6pLrCQkxMjM6ePavs7Gylp6fr66+/1ujRo83jt27dqunTp2vWrFk6cuSIfve732nChAnKzMy85edWVVWld955R927d1erVq0k1Y3miIyMVMuWLfXpp58qNzdXzs7OioqK0qVLl/T73/9eycnJkmSOQPnxGb/++utaunSpDh06pMjI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"},"metadata":{}}]},{"cell_type":"code","source":"country_col = {\n            -0.09765: 'Australia',\n            0.24923: 'Canada',\n            -0.46841: 'New Zealand',\n            -0.28519: 'Other',\n            0.21128: 'Republic of Ireland',\n            0.96082: 'UK',\n            -0.57009: 'USA'\n            }\nmapped_country = df['Country'].map(country_col)\n\nmapped_country.value_counts().plot.pie(autopct='%1.1f%%')\nplt.title('Country Distribution')\nplt.show()\nplt.clf()\n\nsns.countplot(x=mapped_country, order=mapped_country.value_counts().index)\nplt.title('Country Distribution')\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.xticks(rotation=45)  # Rotate x-axis labels\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:27.233594Z","iopub.execute_input":"2024-04-30T04:46:27.234064Z","iopub.status.idle":"2024-04-30T04:46:27.921837Z","shell.execute_reply.started":"2024-04-30T04:46:27.234023Z","shell.execute_reply":"2024-04-30T04:46:27.920503Z"},"trusted":true},"execution_count":57,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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hQoVkjp16si8efMkOTlZbZeWliYTJ04UDw8PsbS0FDc3NwkNDdVrIyKSkZEhH3/8sRQtWlQKFCggQUFBcvHixederv/Py9l1l8rv3LlTXRYbGystW7aUQoUKCQD1cvPnbSOzlJQUcXJyEgcHB3n69OkLHRNdDbqHpaWlFCtWTOrXry+ff/65xMfHZ3nNPy/XP3LkiPzvf/+TUqVKibW1tRQvXlxatWolhw8f1nvdgQMHxMfHR6ysrPQuj+/Zs6fY2dllW9/zLtf/8ssv5euvvxY3NzextraWevXqybFjx7K8/scffxRPT0+xsrKS6tWry9atW7Ns899q++fl+iIv/vlwd3eXli1bZqnpedMIEJka3iuNiIxaeno6XF1d8e677+K7774zdDlElMdxjBERGbXff/8dd+/eRY8ePQxdChHlA+wxIiKjFBUVhePHj2Py5MkoWrQojhw5YuiSiCgfYI8RERkl3b2+ihcvzhuUElGuYY8RERERkYI9RkREREQKzmP0ArRaLW7fvo1ChQrl+Ey3RERE9GaICB49egRXV9cXvj0Pg9ELuH37Ntzc3AxdBhEREb2CGzduvPANnRmMXoDuDtw3btxQ72pORERExi0xMRFubm7q3/EXwWD0AnSnz+zt7RmMiIiITMzLDIPh4GsiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFBaGLiAv8BkVbugS3rjoL3sYugQiIqI3jj1GRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIihUGD0Z49e/Duu+/C1dUVGo0Gv//+u956EcG4ceNQokQJ2NraIjAwEBcuXNBrc//+fXTt2hX29vZwdHRE37598fjxY702x48fR7169WBjYwM3NzfMmDHjTe8aERERmSCDBqOkpCRUq1YNYWFh2a6fMWMG5s6di4ULFyIqKgp2dnYICgpCcnKy2qZr1644deoUtm/fjg0bNmDPnj0YMGCAuj4xMRHNmjWDu7s7oqOj8eWXX2LChAlYvHjxG98/IiIiMi0GvYlsixYt0KJFi2zXiQhmz56Nzz77DK1btwYAhIeHw9nZGb///ju6dOmCM2fOYMuWLTh06BB8fX0BAPPmzcM777yDr776Cq6urlixYgVSU1Px/fffw8rKCt7e3oiJicHMmTP1AhQRERGR0Y4xunLlCmJjYxEYGKguc3BwgJ+fHyIjIwEAkZGRcHR0VEMRAAQGBsLMzAxRUVFqm/r168PKykptExQUhHPnzuHBgwfZvndKSgoSExP1HkRERJT3GW0wio2NBQA4OzvrLXd2dlbXxcbGonjx4nrrLSwsULhwYb022W0j83v807Rp0+Dg4KA+3NzcXn+HiIiIyOgZbTAypNDQUDx8+FB93Lhxw9AlERERUS4w2mDk4uICAIiLi9NbHhcXp65zcXFBfHy83vr09HTcv39fr01228j8Hv9kbW0Ne3t7vQcRERHlfUYbjDw8PODi4oKIiAh1WWJiIqKiouDv7w8A8Pf3R0JCAqKjo9U2O3bsgFarhZ+fn9pmz549SEtLU9ts374d5cuXh5OTUy7tDREREZkCgwajx48fIyYmBjExMQCeDbiOiYnB9evXodFoMGzYMEyZMgXr1q3DiRMn0KNHD7i6uqJNmzYAgIoVK6J58+bo378/Dh48iP3792Po0KHo0qULXF1dAQDvv/8+rKys0LdvX5w6dQqrVq3CnDlzMGLECAPtNRERERkrg16uf/jwYTRq1Eh9rgsrPXv2xLJlyzB69GgkJSVhwIABSEhIQN26dbFlyxbY2Nior1mxYgWGDh2KJk2awMzMDO3bt8fcuXPV9Q4ODti2bRuCg4Ph4+ODokWLYty4cbxUn4iIiLLQiIgYughjl5iYCAcHBzx8+DDb8UY+o8INUFXuiv6yh6FLICIiein/9fc7O0Y7xoiIiIgotzEYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFAxGRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFAxGRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIYdTDKyMjA2LFj4eHhAVtbW3h5eWHy5MkQEbWNiGDcuHEoUaIEbG1tERgYiAsXLuht5/79++jatSvs7e3h6OiIvn374vHjx7m9O0RERGTkjDoYffHFF/jmm28wf/58nDlzBl988QVmzJiBefPmqW1mzJiBuXPnYuHChYiKioKdnR2CgoKQnJystunatStOnTqF7du3Y8OGDdizZw8GDBhgiF0iIiIiI2Zh6AL+zYEDB9C6dWu0bNkSAFC6dGn89NNPOHjwIIBnvUWzZ8/GZ599htatWwMAwsPD4ezsjN9//x1dunTBmTNnsGXLFhw6dAi+vr4AgHnz5uGdd97BV199BVdX1yzvm5KSgpSUFPV5YmLim95VIiIiMgJG3WMUEBCAiIgInD9/HgBw7Ngx7Nu3Dy1atAAAXLlyBbGxsQgMDFRf4+DgAD8/P0RGRgIAIiMj4ejoqIYiAAgMDISZmRmioqKyfd9p06bBwcFBfbi5ub2pXSQiIiIjYtQ9Rp988gkSExNRoUIFmJubIyMjA59//jm6du0KAIiNjQUAODs7673O2dlZXRcbG4vixYvrrbewsEDhwoXVNv8UGhqKESNGqM8TExMZjoiIiPIBow5Gv/zyC1asWIGVK1fC29sbMTExGDZsGFxdXdGzZ8839r7W1tawtrZ+Y9snIiIi42TUwWjUqFH45JNP0KVLFwBAlSpVcO3aNUybNg09e/aEi4sLACAuLg4lSpRQXxcXF4fq1asDAFxcXBAfH6+33fT0dNy/f199PRERERFg5GOMnjx5AjMz/RLNzc2h1WoBAB4eHnBxcUFERIS6PjExEVFRUfD39wcA+Pv7IyEhAdHR0WqbHTt2QKvVws/PLxf2goiIiEyFUfcYvfvuu/j8889RqlQpeHt74+jRo5g5cyb69OkDANBoNBg2bBimTJmCsmXLwsPDA2PHjoWrqyvatGkDAKhYsSKaN2+O/v37Y+HChUhLS8PQoUPRpUuXbK9IIyIiovzLqIPRvHnzMHbsWAwZMgTx8fFwdXXFwIEDMW7cOLXN6NGjkZSUhAEDBiAhIQF169bFli1bYGNjo7ZZsWIFhg4diiZNmsDMzAzt27fH3LlzDbFLREREZMQ0knkaacpWYmIiHBwc8PDhQ9jb22dZ7zMq3ABV5a7oL3sYugQiIqKX8l9/v7Nj1GOMiIiIiHITgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFAxGRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFAxGRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKow9Gt27dQrdu3VCkSBHY2tqiSpUqOHz4sLpeRDBu3DiUKFECtra2CAwMxIULF/S2cf/+fXTt2hX29vZwdHRE37598fjx49zeFSIiIjJyRh2MHjx4gDp16sDS0hKbN2/G6dOn8fXXX8PJyUltM2PGDMydOxcLFy5EVFQU7OzsEBQUhOTkZLVN165dcerUKWzfvh0bNmzAnj17MGDAAEPsEhERERkxjYiIoYt4nk8++QT79+/H3r17s10vInB1dcXIkSPx0UcfAQAePnwIZ2dnLFu2DF26dMGZM2dQqVIlHDp0CL6+vgCALVu24J133sHNmzfh6ur6n3UkJibCwcEBDx8+hL29fZb1PqPCX2MvTUP0lz0MXQIREdFL+a+/39kx6h6jdevWwdfXFx07dkTx4sVRo0YNLFmyRF1/5coVxMbGIjAwUF3m4OAAPz8/REZGAgAiIyPh6OiohiIACAwMhJmZGaKiorJ935SUFCQmJuo9iIiIKO97pWDk6emJe/fuZVmekJAAT0/P1y5K5/Lly/jmm29QtmxZbN26FYMHD8YHH3yA5cuXAwBiY2MBAM7Oznqvc3Z2VtfFxsaiePHieustLCxQuHBhtc0/TZs2DQ4ODurDzc0tx/aJiIiIjNcrBaOrV68iIyMjy/KUlBTcunXrtYvS0Wq1qFmzJqZOnYoaNWpgwIAB6N+/PxYuXJhj75Gd0NBQPHz4UH3cuHHjjb4fERERGQeLl2m8bt069d9bt26Fg4OD+jwjIwMREREoXbp0jhVXokQJVKpUSW9ZxYoVsWbNGgCAi4sLACAuLg4lSpRQ28TFxaF69epqm/j4eL1tpKen4/79++rr/8na2hrW1tY5tRtERERkIl4qGLVp0wYAoNFo0LNnT711lpaWKF26NL7++uscK65OnTo4d+6c3rLz58/D3d0dAODh4QEXFxdERESoQSgxMRFRUVEYPHgwAMDf3x8JCQmIjo6Gj48PAGDHjh3QarXw8/PLsVqJiIjI9L1UMNJqtQCeBZJDhw6haNGib6QoneHDhyMgIABTp05Fp06dcPDgQSxevBiLFy8G8CygDRs2DFOmTEHZsmXh4eGBsWPHwtXVVQ1xFStWRPPmzdVTcGlpaRg6dCi6dOnyQlekERERUf7xUsFI58qVKzldR7Zq1aqFtWvXIjQ0FJMmTYKHhwdmz56Nrl27qm1Gjx6NpKQkDBgwAAkJCahbty62bNkCGxsbtc2KFSswdOhQNGnSBGZmZmjfvj3mzp2bK/tAREREpuOV5zGKiIhAREQE4uPj1Z4kne+//z5HijMWnMeI8xgREZHpeZV5jF6px2jixImYNGkSfH19UaJECWg0mlfZDBEREZFReaVgtHDhQixbtgzdu3fP6XqIiIiIDOaV5jFKTU1FQEBATtdCREREZFCvFIz69euHlStX5nQtRERERAb1SqfSkpOTsXjxYvz555+oWrUqLC0t9dbPnDkzR4ojIiIiyk2vFIyOHz+uTqh48uRJvXUciE1ERESm6pWC0c6dO3O6DiIiIiKDe6VgRPSirk+qYugS3rhS404YugQiIsohrxSMGjVq9K+nzHbs2PHKBREREREZyisFI934Ip20tDTExMTg5MmTWW4uS0RERGQqXikYzZo1K9vlEyZMwOPHj1+rICIiIiJDeaV5jJ6nW7duee4+aURERJR/5GgwioyM1LurPREREZEpeaVTae3atdN7LiK4c+cODh8+jLFjx+ZIYURERES57ZWCkYODg95zMzMzlC9fHpMmTUKzZs1ypDAiIiKi3PZKwWjp0qU5XQcRERGRwb3WBI/R0dE4c+YMAMDb2xs1atTIkaKIiIiIDOGVglF8fDy6dOmCXbt2wdHREQCQkJCARo0a4eeff0axYsVyskYiIiKiXPFKV6WFhITg0aNHOHXqFO7fv4/79+/j5MmTSExMxAcffJDTNRIRERHlilfqMdqyZQv+/PNPVKxYUV1WqVIlhIWFcfA1ERERmaxX6jHSarWwtLTMstzS0hJarfa1iyIiIiIyhFcKRo0bN8aHH36I27dvq8tu3bqF4cOHo0mTJjlWHBEREVFueqVgNH/+fCQmJqJ06dLw8vKCl5cXPDw8kJiYiHnz5uV0jURERES54pXGGLm5ueHIkSP4888/cfbsWQBAxYoVERgYmKPFEREREeWml+ox2rFjBypVqoTExERoNBo0bdoUISEhCAkJQa1ateDt7Y29e/e+qVqJiIiI3qiXCkazZ89G//79YW9vn2Wdg4MDBg4ciJkzZ+ZYcURERES56aWC0bFjx9C8efPnrm/WrBmio6NfuygiIiIiQ3ipYBQXF5ftZfo6FhYWuHv37msXRURERGQILxWM3nrrLZw8efK5648fP44SJUq8dlFEREREhvBSweidd97B2LFjkZycnGXd06dPMX78eLRq1SrHiiMiIiLKTS91uf5nn32G3377DeXKlcPQoUNRvnx5AMDZs2cRFhaGjIwMjBkz5o0USkRERPSmvVQwcnZ2xoEDBzB48GCEhoZCRAAAGo0GQUFBCAsLg7Oz8xsplIiIiOhNe+kJHt3d3bFp0yY8ePAAFy9ehIigbNmycHJyehP1EREREeWaV5r5GgCcnJxQq1atnKyFiIiIyKBe6V5pRERERHkRgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFCYVjKZPnw6NRoNhw4apy5KTkxEcHIwiRYqgYMGCaN++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GTMQGxuLzz77DMHBwewVIiIiIj1GHYy++eYbAEDDhg31li9duhS9evUCAMyaNQtmZmZo3749UlJSEBQUhAULFqhtzc3NsWHDBgwePBj+/v6ws7NDz549MWnSpNzaDSIiIjIRRh2MXmSKJRsbG4SFhSEsLOy5bdzd3bFp06acLI2IiIjyIKMeY0RERESUmxiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBYERERESkYDAiIiIiUjAYERERESkYjIiIiIgUDEZERERECgYjIiIiIgWDEREREZGCwYiIiIhIwWBEREREpGAwIiIiIlIwGBEREREpGIyIiIiIFAxGRERERAoGIyIiIiKFhaELIMqv6syrY+gS3rj9IfsNXQIR0UthjxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQKBiMiIiIiBYMRERERkYLBiIiIiEjBW4IQkdHZXb+BoUt44xrs2W3oEogoG+wxIiIiIlIwGBEREREpGIyIiIiIFAxGRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKXhLECIiEzJ/5HpDl/DGDf36XUOXQPkYe4yIiIiIFAxGRERERAoGIyIiIiIFgxERERGRgsGIiIiISMFgRERERKRgMCIiIiJSMBgRERERKRiMiIiIiBQMRkREREQK3hKEiIjyhM+7dTB0CW/UmB9XG7qEfIE9RkREREQKBiMiIiIiRb4KRmFhYShdujRsbGzg5+eHgwcPGrokIiIiMiL5JhitWrUKI0aMwPjx43HkyBFUq1YNQUFBiI+PN3RpREREZCTyzeDrmTNnon///ujduzcAYOHChdi4cSO+//57fPLJJwaujoiI6M058/kOQ5fwRlUc0zjHtpUvglFqaiqio6MRGhqqLjMzM0NgYCAiIyOztE9JSUFKSor6/OHDhwCAxMTEbLefkfI0hys2Ps/b9//yKDkjhysxPq96bNKfpudwJcbnVY9NUjqPzfM8TXmSw5UYn1c9NslpaTlciXF51eMCAI+Tk3KwEuPzvGOjWy4iL74xyQdu3bolAOTAgQN6y0eNGiVvv/12lvbjx48XAHzwwQcffPDBRx543Lhx44UzQ77oMXpZoaGhGDFihPpcq9Xi/v37KFKkCDQa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ifr166Np06ZYtGhRltc/ePAATk5OuVmy0WCPERER5Ru///47Hj16hLfffhtWVlaYP38++vXrp06KqZvBukOHDuqs1omJiRg5ciRiYmLg5eVlqNJfiK6v48mTJwD+f6B1cnIyLl++jHbt2uHvv/9G7dq19ULRDz/8gEePHqnbya+hCGAwIiKifGLRokUYPnw4Fi9erIaesmXLIiYmBvPmzcPJkycREBCAcePG4datW/Dw8EDdunXRoEED3Lp1C1u3blWvPjNWGo0G8fHxKF26NH755ReYmZlBRFC0aFFUqVIFP/30E3x8fPDuu+9i/vz5AIC7d+9i7dq12LRpk4GrNw7Gf10hERFRDujduzdiYmLw66+/QqvVYtCgQQgKCkJ4eDj69u2LKVOmYPz48ejQoQPq1auH8PBwpKamwsnJCQMHDoS5uTnS09ON/pJ8MzMzvPfee+jevTusra3RunVrpKWlwcvLC19//TUCAgLwzTffqO1nzpyJ8+fPIyAgwIBVGw+OMSIiojxPd2l6WloaQkJCcOTIEXTo0AFDhgxBwYIFsWPHDvTr1w9+fn74+OOPUb169eduw9hkd9VcfHw8Pv/8c8ybNw9r1qxB27Zt8eDBA/zvf//D3bt3UbduXZQrVw7R0dH47bffsGvXrmz3OT9iMCIionxB19uTmpqKoUOHIiYmJks46t+/PwICAjBkyBD4+/sbuuT/pBscnpSUhIyMDNjb26vr7ty5g6lTpyIsLAy//vor2rdvj3v37mH69Ok4dOgQkpKSUK5cOYSGhqJy5coG3AvjwmBERER51vNOfaWkpCAkJCRLONq5cydatmyJjz/+GOPHjzdAxS/vwoUL6NSpEwoWLIj+/fvDxcUFzZo1A/BsP0eOHIkFCxZg1apV6NixI9LT02FmZoa0tDSYm5sb/anB3MajQUREec7Vq1dRunRp9Y/+t99+i+PHj8PJyQl+fn545513MH/+fISEhGD16tXQaDQYPHgwGjVqhH379qFatWoG3oMXo9VqsWzZMhw7dgw2NjZISEjAkydPULhwYbz99tvo06cPevfujSJFiqBz586wt7dHUFCQes83yoo9RkRElKdMmDABf/75JxYsWICqVavik08+wTfffIOAgAAkJSVh3759GDt2LCZOnKieVjtx4gSaNm2K0NBQ2NraAjDeMUX/FBsbiy+++AKX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"},"metadata":{}}]},{"cell_type":"code","source":"ethnicity_col = {\n            -0.50212: 'Asian',\n            -1.10702: 'Black',\n            1.90725: 'Mixed-Black/Asian',\n            0.12600: 'Mixed-White/Asian',\n            -0.22166: 'Mixed-White/Black',\n            0.11440: 'Other',\n            -0.31685: 'White'\n            }\nmapped_ethnicity = df['Ethnicity'].map(ethnicity_col)\n\nmapped_ethnicity.value_counts().plot.pie(autopct='%1.1f%%')\nplt.title('Ethnicity Distribution')\nplt.show()\nplt.clf()\n\nsns.countplot(x=mapped_ethnicity, order=mapped_ethnicity.value_counts().index)\nplt.title('Ethnicity Distribution')\nplt.xlabel('Ethnicity')\nplt.ylabel('Count')\nplt.xticks(rotation=45)  # Rotate x-axis labels\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:27.924172Z","iopub.execute_input":"2024-04-30T04:46:27.925038Z","iopub.status.idle":"2024-04-30T04:46:28.384793Z","shell.execute_reply.started":"2024-04-30T04:46:27.924987Z","shell.execute_reply":"2024-04-30T04:46:28.382868Z"},"trusted":true},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df.rename(columns={\n    'Nscore': 'Neuroticism', \n    'Escore': 'Extraversion', \n    'Oscore': 'Openness',\n    'Ascore': 'Agreeableness',\n    'Cscore':'Conscientiousness',\n    'Impulsive':'Impulsiveness',\n    'SS': 'SensationSeeking'\n}, inplace=True)\n\nfor col in psych_score_cols:\n    plt.figure()\n    plt.title(col)\n    plt.boxplot(df[col])","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:28.387059Z","iopub.execute_input":"2024-04-30T04:46:28.387593Z","iopub.status.idle":"2024-04-30T04:46:30.184664Z","shell.execute_reply.started":"2024-04-30T04:46:28.387544Z","shell.execute_reply":"2024-04-30T04:46:30.183634Z"},"trusted":true},"execution_count":59,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"\nfor col in drug_usage_cols:\n    print(col)\n    sns.histplot(data=df.sort_values(col), x=col)\n    plt.title(f'Histogram of {col}')\n    plt.xlabel('Frequency')\n    plt.ylabel('Count')\n    plt.xticks(rotation=45) \n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:30.186687Z","iopub.execute_input":"2024-04-30T04:46:30.187239Z","iopub.status.idle":"2024-04-30T04:46:36.596321Z","shell.execute_reply.started":"2024-04-30T04:46:30.187193Z","shell.execute_reply":"2024-04-30T04:46:36.595378Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"Alcohol\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Amphet\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Amyl\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAkQAAAH8CAYAAAAwkbDfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABgGUlEQVR4nO3dd1gUV9sG8HvpigKiAhIBscTeK9FYUSyxxG5QsWtssUSNiYkliUasscfYY02M0diIBRRiF2NHxQoWQKQJSn++P/yY1xU1aoCBnft3XXslO3N295mR3bnnzJkZnYgIiIiIiDTMSO0CiIiIiNTGQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdAREQAgBIlSqBPnz5ql2HwZs2ahZIlS8LY2BjVqlVTu5y3cvv2beh0OqxZs0btUoiyHAMRkQFas2YNdDodTp8+/dL5jRs3RqVKlf7z5+zZswdTpkz5z++jFfv27cP48eNRv359rF69GtOnT3+j13Xt2hU6nQ4TJkzI5gqJtMtE7QKIKHe4evUqjIzebh9pz549WLx4MUPRG/L19YWRkRFWrlwJMzOzN3pNXFwcdu7ciRIlSmDTpk344YcfoNPpsrlSIu1hDxERAQDMzc1hamqqdhlvJSEhQe0S3kpERATy5cv3xmEIAH7//XekpaVh1apVCA0Nhb+/fzZWSKRdDEREBCDzGKKUlBRMnToVZcqUgYWFBQoXLowGDRpg//79AIA+ffpg8eLFAACdTqc8MiQkJGDs2LFwcnKCubk5ypYti9mzZ0NE9D736dOnGDlyJIoUKYKCBQuiXbt2uHfvHnQ6nV7P05QpU6DT6XD58mV88sknKFSoEBo0aAAAOH/+PPr06YOSJUvCwsICDg4O6NevHx49eqT3WRnvce3aNfTs2RPW1tYoWrQovv76a4gIQkND0b59e1hZWcHBwQFz5sx5o3WXmpqKb7/9FqVKlYK5uTlKlCiBL7/8EklJSUobnU6H1atXIyEhQVlXbzIWZ8OGDWjevDmaNGmC8uXLY8OGDZnaZBwi/fvvvzFy5EgULVoUNjY2GDx4MJKTkxETE4PevXujUKFCKFSoEMaPH6/8O4gISpQogfbt22d638TERFhbW2Pw4MFvtB6I8jIeMiMyYLGxsYiMjMw0PSUl5V9fO2XKFMyYMQMDBgxAnTp1EBcXh9OnT+PMmTNo3rw5Bg8ejPv372P//v345Zdf9F4rImjXrh38/PzQv39/VKtWDX/99RfGjRuHe/fuYd68eUrbPn364Ndff0WvXr1Qr149HD58GG3atHllXV26dEGZMmUwffp0ZaO+f/9+3Lx5E3379oWDgwMuXbqE5cuX49KlSzh+/HimQ0zdunVD+fLl8cMPP2D37t347rvvYGtri59++glNmzbFzJkzsWHDBnz++eeoXbs2GjZs+Np1NWDAAKxduxadO3fG2LFjceLECcyYMQNBQUH4448/AAC//PILli9fjpMnT2LFihUAgA8++OC173v//n34+flh7dq1AIAePXpg3rx5WLRo0Ut7mUaMGAEHBwdMnToVx48fx/Lly2FjY4OjR4/C2dkZ06dPx549ezBr1ixUqlQJvXv3hk6nQ8+ePeHt7Y2oqCjY2toq77dz507ExcWhZ8+er62TyCAIERmc1atXC4DXPipWrKj3GhcXF/Hy8lKeV61aVdq0afPazxk2bJi87Gdk+/btAkC+++47vemdO3cWnU4n169fFxGRwMBAASCjRo3Sa9enTx8BIJMnT1amTZ48WQBIjx49Mn3ekydPMk3btGmTABB/f/9M7zFo0CBlWmpqqhQvXlx0Op388MMPyvTo6GjJly+f3jp5mbNnzwoAGTBggN70zz//XACIr6+vMs3Ly0ssLS1f+37Pmz17tuTLl0/i4uJEROTatWsCQP744w+9dhn/3h4eHpKenq5Md3NzE51OJ0OGDMm0vI0aNVKmXb16VQDI0qVL9d63Xbt2UqJECeU9b926JQBk9erVb7wMRHkFD5kRGbDFixdj//79mR5VqlT519fa2Njg0qVLCA4OfuvP3bNnD4yNjTFy5Ei96WPHjoWIYO/evQAAHx8fAMDQoUP12o0YMeKV7z1kyJBM0/Lly6f8f2JiIiIjI1GvXj0AwJkzZzK1HzBggPL/xsbGqFWrFkQE/fv3V6bb2NigbNmyuHnz5itrAZ4tKwCMGTNGb/rYsWMBALt3737t619nw4YNaNOmDQoWLAgAKFOmDGrWrPnSw2YA0L9/f73esLp162ZarozlfX653n//fdStW1fvfaOiorB37154enpyEDdpAg+ZERmwOnXqoFatWpmmFypU6KWH0p43bdo0tG/fHu+//z4qVaqEli1bolevXm8Upu7cuQNHR0dlQ56hfPnyyvyM/xoZGcHV1VWvXenSpV/53i+2BZ5tvKdOnYrNmzcjIiJCb15sbGym9s7OznrPra2tYWFhgSJFimSa/uI4pBdlLMOLNTs4OMDGxkZZ1rcVFBSEf/75B71798b169eV6Y0bN8bixYsRFxcHKysrvde8bLkAwMnJKdP06OhovWm9e/fG8OHDcefOHbi4uOC3335DSkoKevXq9U71E+U17CEiopdq2LAhbty4gVWrVqFSpUpYsWIFatSooYx/UcvzvUEZunbtip9//hlDhgzBtm3bsG/fPqX3KT09PVN7Y2PjN5oGINMg8FfJ6l6U9evXAwBGjx6NMmXKKI85c+YgMTERv//+e6bXvGoZXjb9xeXq3r07TE1NlV6i9evXo1atWihbtux/XRSiPIGBiIheydbWFn379sWmTZsQGhqKKlWq6J359aoQ4OLigvv37+Px48d6069cuaLMz/hveno6bt26pdfu+R6RfxMdHY2DBw/iiy++wNSpU/Hxxx+jefPmKFmy5Bu/x3+RsQwvHloMDw9HTEyMsqxvQ0SwceNGNGnSBL/99lumR5UqVV552Oxd2draok2bNtiwYQPu3LmDI0eOsHeINIWBiIhe6sVDRQUKFEDp0qX1TiW3tLQEAMTExOi1bd26NdLS0rBo0SK96fPmzYNOp0OrVq0AAB4eHgCAJUuW6LVbuHDhG9eZ0fvxYo/H/Pnz3/g9/ovWrVu/9PPmzp0LAK89Y+5Vjhw5gtu3b6Nv377o3Llzpke3bt3g5+eH+/fv/+f6n9erVy9cvnwZ48aNg7GxMbp3756l70+Um3EMERG9VIUKFdC4cWPUrFkTtra2OH36NLZu3Yrhw4crbWrWrAkAGDlyJDw8PJSNaNu2bdGkSRN89dVXuH37NqpWrYp9+/Zhx44dGDVqFEqVKqW8vlOnTpg/fz4ePXqknHZ/7do1AG92GMrKygoNGzaEt7c3UlJS8N5772Hfvn2Zep2yS9WqVeHl5YXly5cjJiYGjRo1wsmTJ7F27Vp06NABTZo0eev33LBhA4yNjV8Zptq1a4evvvoKmzdvzjSY+79o06YNChcujN9++w2tWrWCnZ1dlr03UW7HHiIieqmRI0fi9u3bmDFjBkaOHInDhw/ju+++07tYYceOHTFixAj4+PigV69e6NGjBwDAyMgIf/75J0aNGoVdu3Zh1KhRuHz5MmbNmqX0nGRYt24dhg0bht27d2PChAlITk7Gli1bAAAWFhZvVOvGjRvh4eGBxYsXY+LEiTA1NVXOZMsJK1aswNSpU3Hq1CmMGjUKvr6+mDhxIjZv3vzW75WSkoLffvsNH3zwgd41gZ5XqVIluLq6KuOMsoqZmRm6desGADxcRpqjkzcdMUhElEPOnj2L6tWrY/369fD09FS7HE0ZPXo0Vq5cibCwMOTPn1/tcohyDHuIiEhVT58+zTRt/vz5MDIy+tcrRFPWSkxMxPr169GpUyeGIdIcjiEiIlV5e3sjMDAQTZo0gYmJCfbu3Yu9e/di0KBBma6fQ9kjIiICBw4cwNatW/Ho0SN89tlnapdElOMYiIhIVR988AH279+Pb7/9FvHx8XB2dsaUKVPw1VdfqV2aZly+fBmenp6ws7PDggULUK1aNbVLIspxHENEREREmscxRERERKR5DERERESkeRxD9AbS09Nx//59FCxYkHd9JiIiyiNEBI8fP4ajoyOMjF7fB8RA9Abu37/Ps12IiIjyqNDQUBQvXvy1bRiI3kDBggUBPFuhVlZWKldDREREbyIuLg5OTk7Kdvx1GIjeQMZhMisrKwYiIiKiPOZNhrtwUDURERFpHgMRERERaR4DEREREWkeAxERERFpHgMRERERaR4DEREREWkeAxERERFpHgMRERERaR4DEREREWkeAxERERFpHgMRERERaR4DEREREWkeAxERERFpHu92nwuEhIQgMjJS7TJUU6RIETg7O6tdBhERaRgDkcpCQkJQrlx5PH36RO1SVJMvX35cuRLEUERERKphIFJZZGQknj59grr9JsOqWAm1y8lxcQ9u48SqqYiMjGQgIiIi1TAQ5RJWxUrA1rms2mUQERFpEgdVExERkeYxEBEREZHmMRARERGR5jEQERERkeYxEBEREZHmMRARERGR5jEQERERkeYxEBEREZHmMRARERGR5jEQERERkeYxEBEREZHmMRARERGR5jEQERERkeYxEBEREZHmMRARERGR5jEQERERkeYxEBEREZHmMRARERGR5jEQERERkeYxEBEREZHmMRARERGR5jEQERERkeapGoj8/f3Rtm1bODo6QqfTYfv27cq8lJQUTJgwAZUrV4alpSUcHR3Ru3dv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ncYQERERERmSd+ohatKkyWsPjfn6+r5zQUREREQ57Z0CUcb4oQwpKSk4e/YsLl68mOmmr0RERES53TsFonnz5r10+pQpUxAfH/+fCiIiIiLKaVk6hqhnz568jxkRERHlOVkaiI4dOwYLC4usfEsiIiKibPdOh8w6duyo91xE8ODBA5w+fRpff/11lhRGRERElFPeKRBZW1vrPTcyMkLZsmUxbdo0tGjRIksKIyIiIsop7xSIVq9endV1EBEREanmnQJRhsDAQAQFBQEAKlasiOrVq2dJUUREREQ56Z0CUUREBLp3745Dhw7BxsYGABATE4MmTZpg8+bNKFq0aFbWSERERJSt3ukssxEjRuDx48e4dOkSoqKiEBUVhYsXLyIuLg4jR47M6hqJiIiIstU79RD5+PjgwIEDKF++vDKtQoUKWLx4MQdVExERUZ7zTj1E6enpMDU1zTTd1NQU6enp/7koIiIiopz0ToGoadOm+Oyzz3D//n1l2r179zB69Gg0a9Ysy4ojIiIiygnvFIgWLVqEuLg4lChRAqVKlUKpUqXg6uqKuLg4LFy4MKtrJCIiIspW7zSGyMnJCWfOnMGBAwdw5coVAED58uXh7u6epcURERER5YS36iHy9fVFhQoVEBcXB51Oh+bNm2PEiBEYMWIEateujYoVKyIgICC7aiUiIiLKFm8ViObPn4+BAwfCysoq0zxra2sMHjwYc+fOzbLiiIiIiHLCWwWic+fOoWXLlq+c36JFCwQGBv7nooiIiIhy0lsFovDw8Jeebp/BxMQEDx8+/M9FEREREeWktwpE7733Hi5evPjK+efPn0exYsX+c1FEREREOemtAlHr1q3x9ddfIzExMdO8p0+fYvLkyfjoo4+yrDgiIiKinPBWgWjSpEmIiorC+++/D29vb+zYsQM7duzAzJkzUbZsWURFReGrr77K0gLv3buHnj17onDhwsiXLx8qV66M06dPK/NFBN988w2KFSuGfPnywd3dHcHBwXrvERUVBU9PT1hZWcHGxgb9+/dHfHx8ltZJREREeddbXYfI3t4eR48exaeffoqJEydCRAAAOp0OHh4eWLx4Mezt7bOsuOjoaNSvXx9NmjTB3r17UbRoUQQHB6NQoUJKG29vbyxYsABr166Fq6srvv76a3h4eODy5cuwsLAAAHh6euLBgwfYv38/UlJS0LdvXwwaNAgbN27MslqJiIgo73rrCzO6uLhgz549iI6OxvXr1yEiKFOmjF5IySozZ86Ek5MTVq9erUxzdXVV/l9EMH/+fEyaNAnt27cHAKxbtw729vbYvn07unfvjqCgIPj4+ODUqVOoVasWAGDhwoVo3bo1Zs+eDUdHxyyvm4iIiPKWd7p1BwAUKlQItWvXRp06dbIlDAHAn3/+iVq1aqFLly6ws7ND9erV8fPPPyvzb926hbCwML0rZFtbW6Nu3bo4duwYAODYsWOwsbFRwhAAuLu7w8jICCdOnHjp5yYlJSEuLk7vQURERIbrnQNRTrh58yaWLl2KMmXK4K+//sKnn36KkSNHYu3atQCAsLAwAMh0mM7e3l6ZFxYWBjs7O735JiYmsLW1Vdq8aMaMGbC2tlYeTk5OWb1oRERElIvk6kCUnp6OGjVqYPr06ahevToGDRqEgQMHYtmyZdn6uRMnTkRsbKzyCA0NzdbPIyIiInXl6kBUrFgxVKhQQW9a+fLlERISAgBwcHAA8OyCkc8LDw9X5jk4OCAiIkJvfmpqKqKiopQ2LzI3N4eVlZXeg4iIiAxXrg5E9evXx9WrV/WmXbt2DS4uLgCeDbB2cHDAwYMHlflxcXE4ceIE3NzcAABubm6IiYnRu6WIr68v0tPTUbdu3RxYCiIiIsrt3voss5w0evRofPDBB5g+fTq6du2KkydPYvny5Vi+fDmAZ6f7jxo1Ct999x3KlCmjnHbv6OiIDh06AHjWo9SyZUvlUFtKSgqGDx+O7t278wwzIiIiApDLA1Ht2rXxxx9/YOLEiZg2bRpcXV0xf/58eHp6Km3Gjx+PhIQEDBo0CDExMWjQoAF8fHyUaxABwIYNGzB8+HA0a9YMRkZG6NSpExYsWKDGIhEREVEulKsDEQB89NFHr70diE6nw7Rp0zBt2rRXtrG1teVFGImIiOiVcvUYIiIiIqKcwEBEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESal6cC0Q8//ACdTodRo0Yp0xITEzFs2DAULlwYBQoUQKdOnRAeHq73upCQELRp0wb58+eHnZ0dxo0bh9TU1ByunoiIiHKrPBOITp06hZ9++glVqlTRmz569Gjs3LkTv/32Gw4fPoz79++jY8eOyvy0tDS0adMGycnJOHr0KNauXYs1a9bgm2++yelFICIiolwqTwSi+Ph4eHp64ueff0ahQoWU6bGxsVi5ciXmzp2Lpk2bombNmli9ejWOHj2K48ePAwD27duHy5cvY/369ahWrRpatWqFb7/9FosXL0ZycvJLPy8pKQlxcXF6DyIiIjJceSIQDRs2DG3atIG7u7ve9MDAQKSkpOhNL1euHJydnXHs2DEAwLFjx1C5cmXY29srbTw8PBAXF4dLly699PNmzJgBa2tr5eHk5JQNS0VERES5Ra4PRJs3b8aZM2cwY8aMTPPCwsJgZmYGGxsbven29vYICwtT2jwfhjLmZ8x7mYkTJyI2NlZ5hIaGZsGSEBERUW5lonYBrxMaGorPPvsM+/fvh4WFRY59rrm5OczNzXPs84iIiEhdubqHKDAwEBEREahRowZMTExgYmKCw4cPY8GCBTAxMYG9vT2Sk5MRExOj97rw8HA4ODgAABwcHDKddZbxPKMNERERaVuuDkTNmjXDhQsXcPbsWeVRq1YteHp6Kv9vamqKgwcPKq+5evUqQkJC4ObmBgBwc3PDhQsXEBERobTZv38/rKysUKFChRxfJiIiIsp9cvUhs4IFC6JSpUp60ywtLVG4cGFlev/+/TFmzBjY2trCysoKI0aMgJubG+rVqwcAaNGiBSpUqIBevXrB29sbYWFhmDRpEoYNG8bDYkRERAQglweiNzFv3jwYGRmhU6dOSEpKgoeHB5YsWaLMNzY2xq5du/Dpp5/Czc0NlpaW8PLywrRp01SsmoiIiHKTPBeIDh06pPfcwsICixcvxuLFi1/5GhcXF+zZsyebKyMiIqK8KlePISIiIiLKCQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkmahdAREBISAgiIyPVLkM1RYoUgbOzs9plEJGGMRARqSwkJATlypXH06dP1C5FNfny5ceVK0EMRUSkGgYiIpVFRkbi6dMnqNtvMqyKlVC7nBwX9+A2TqyaisjISAYiIlINAxFRLmFVrARsncuqXQYRkSZxUDURERFpHgMRERERaR4DEREREWlerg5EM2bMQO3atVGwYEHY2dmhQ4cOuHr1ql6bxMREDBs2DIULF0aBAgXQqVMnhIeH67UJCQlBmzZtkD9/ftjZ2WHcuHFITU3NyUUhIiKiXCxXD6o+fPgwhg0bhtq1ayM1NRVffvklWrRogcuXL8PS0hIAMHr0aOzevRu//fYbrK2tMXz4cHTs2BFHjhwBAKSlpaFNmzZwcHDA0aNH8eDBA/Tu3RumpqaYPn26motHzwkKClK7BNVoedmJiHKLXB2IfHx89J6vWbMGdnZ2CAwMRMOGDREbG4uVK1di48aNaNq0KQBg9erVKF++PI4fP4569eph3759uHz5Mg4cOAB7e3tUq1YN3377LSZMmIApU6bAzMxMjUWj//c09hEAHXr27Kl2KapLSUpWuwQiIs3K1YHoRbGxsQAAW1tbAEBgYCBSUlLg7u6utClXrhycnZ1x7Ngx1KtXD8eOHUPlypVhb2+vtPHw8MCnn36KS5cuoXr16pk+JykpCUlJScrzuLi47FokzUt58hiAoNonE1DUtZza5ajiwYVjuPjnch7GJSJSUZ4JROnp6Rg1ahTq16+PSpUqAQDCwsJgZmYGGxsbvbb29vYICwtT2jwfhjLmZ8x7mRkzZmDq1KlZvAT0OgXsnDV7DZ64B7fVLoGISPNy9aDq5w0bNgwXL17E5s2bs/2zJk6ciNjYWOURGhqa7Z9JRERE6skTPUTDhw/Hrl274O/vj+LFiyvTHRwckJycjJiYGL1eovDwcDg4OChtTp48qfd+GWehZbR5kbm5OczNzbN4KYiIiCi3ytU9RCKC4cOH448//oCvry9cXV315tesWROmpqY4ePCgMu3q1asICQmBm5sbAMDNzQ0XLlxARESE0mb//v2wsrJChQoVcmZBiIiIKFfL1T1Ew4YNw8aNG7Fjxw4ULFhQGfNjbW2NfPnywdraGv3798eYMWNga2sLKysrjBgxAm5ubqhXrx4AoEWLFqhQoQJ69eoFb29vhIWFYdKkSRg2bBh7gYiIiAhALg9ES5cuBQA0btxYb/rq1avRp08fAMC8efNgZGSETp06ISkpCR4eHliyZInS1tjYGLt27cKnn34KNzc3WFpawsvLC9OmTcupxSAiIqJcLlcHIhH51zYWFhZYvHgxFi9e/Mo2Li4u2LNnT1aWRkRERAYkV48hIiIiIsoJDERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5DERERESkeQxEREREpHkMRERERKR5JmoXQEQEAEFBQWqXoKoiRYrA2dlZ7TKINIuBiIhU9TT2EQAdevbsqXYpqsqXLz+uXAliKCJSCQMREakq5cljAIJqn0xAUddyapejirgHt3Fi1VRERkYyEBGphIGIiHKFAnbOsHUuq3YZRKRRHFRNREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJrHQERERESax0BEREREmsdARERERJpnonYBRET0TFBQkNolqKZIkSJwdnZWuwzSMAYiIiKVPY19BECHnj17ql2KavLly48rV4IYikg1DERERCpLefIYgKDaJxNQ1LWc2uXkuLgHt3Fi1VRERkYyEJFqNBWIFi9ejFmzZiEsLAxVq1bFwoULUadOHbXLIiICABSwc4atc1m1y1ANDxkyDKpJM4Foy5YtGDNmDJYtW4a6deti/vz58PDwwNWrV2FnZ6d2eUREmsVDhjxkmBtoJhDNnTsXAwcORN++fQEAy5Ytw+7du7Fq1Sp8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"},"metadata":{}},{"name":"stdout","text":"Benzos\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Caff\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Cannabis\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Choc\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Coke\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Crack\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Ecstasy\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Heroin\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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uXNn3L59G05OTgCA5cuXY/Lkybh79y4sLCxyfW+tVgutVqs8T0lJgaurK5KTk2Fra5tHS/04DFWpUhUPHz7Is/csbIoUKYoLFyIYioiIKM+lpKTAzs7uudtvg/YQPYtOp8POnTsxadIkeHt7459//oG7uzumTJmihKbQ0FBkZGTAy8tLeV2VKlVQtmxZJRAdOXIENWrUUMIQAHh7e2PEiBEIDw9HnTp1cv38OXPmYObMma91GQEgPj4eDx8+QKPB02Fbutxr/7yCJuXOdRxbNRPx8fEMREREZDAFNhDFxcUhNTUVX331Fb744gvMnTsXAQEB6NGjB4KCgtCiRQvExMTAwsIC9vb2eq91cnJCTEwMACAmJkYvDGXPz573NFOmTMH48eOV59k9RK+LbelycChb+bW9PxERET1dgQ1EOp0OANCtWzeMGzcOAFC7dm0cPnwYy5cvR4sWLV7r51taWsLS0vK1fgYREREVDAX2tPuSJUvCzMwM1apV05tetWpV5SwzZ2dnpKenIykpSa9NbGwsnJ2dlTb/Puss+3l2GyIiIlK3AhuILCws0KBBA1y8eFFv+qVLl+Dm5gYAqFevHszNzbFv3z5l/sWLFxEVFQVPT08AgKenJ86ePYu4uDilTWBgIGxtbXOELSIiIlIngx4yS01NxeXLl5Xn165dQ1hYGBwcHFC2bFlMnDgRffr0QfPmzdGqVSsEBATgzz//xIEDBwAAdnZ2GDJkCMaPHw8HBwfY2tpi9OjR8PT0ROPGjQEA7dq1Q7Vq1dC/f3/4+/sjJiYGU6dOxahRo3hIjIiIiAAYOBCdPHkSrVq1Up5nD2L29fXFmjVr8Pbbb2P58uWYM2cOxowZg8qVK+O3335D06ZNldcsXLgQJiYm6NmzJ7RaLby9vbFs2TJlvqmpKXbs2IERI0bA09MT1tbW8PX1xaxZs/JvQYmIiKhAKzDXISroXvQ6Bi/r1KlTqFevHtp+ulqVZ5klRF1E4JeDEBoairp16xq6HCIiMjIvuv0usGOIiIiIiPILAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpnkEDUXBwMLp06QIXFxdoNBps27btqW0/+OADaDQaLFq0SG96QkICfHx8YGtrC3t7ewwZMgSpqal6bc6cOYNmzZrBysoKrq6u8Pf3fw1LQ0RERIWVQQNRWloaatWqhaVLlz6z3datW3H06FG4uLjkmOfj44Pw8HAEBgZix44dCA4OxvDhw5X5KSkpaNeuHdzc3BAaGop58+ZhxowZWLFiRZ4vDxERERVOZob88A4dOqBDhw7PbHPr1i2MHj0af/31Fzp16qQ3LyIiAgEBAThx4gTq168PAFiyZAk6duyIr7/+Gi4uLtiwYQPS09OxatUqWFhYwMPDA2FhYViwYIFecCIiIiL1KtBjiHQ6Hfr374+JEyfCw8Mjx/wjR47A3t5eCUMA4OXlBRMTExw7dkxp07x5c1hYWChtvL29cfHiRSQmJj71s7VaLVJSUvQeREREZJwKdCCaO3cuzMzMMGbMmFznx8TEwNHRUW+amZkZHBwcEBMTo7RxcnLSa5P9PLtNbubMmQM7Ozvl4erq+l8WhYiIiAqwAhuIQkND8c0332DNmjXQaDT5/vlTpkxBcnKy8oiOjs73GoiIiCh/FNhAFBISgri4OJQtWxZmZmYwMzPDjRs3MGHCBJQrVw4A4OzsjLi4OL3XZWZmIiEhAc7Ozkqb2NhYvTbZz7Pb5MbS0hK2trZ6DyIiIjJOBTYQ9e/fH2fOnEFYWJjycHFxwcSJE/HXX38BADw9PZGUlITQ0FDldfv374dOp0OjRo2UNsHBwcjIyFDaBAYGonLlyihevHj+LhQREREVSAY9yyw1NRWXL19Wnl+7dg1hYWFwcHBA2bJlUaJECb325ubmcHZ2RuXKlQEAVatWRfv27TFs2DAsX74cGRkZ8PPzQ9++fZVT9N977z3MnDkTQ4YMweTJk3Hu3Dl88803WLhwYf4tKBERERVoBg1EJ0+eRKtWrZTn48ePBwD4+vpizZo1L/QeGzZsgJ+fH9q0aQMTExP07NkTixcvVubb2dlhz549GDVqFOrVq4eSJUti2rRpPOWeiIiIFAYNRC1btoSIvHD769ev55jm4OCAjRs3PvN1NWvWREhIyMuWR0RERCpRYMcQEREREeUXBiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj2DBqLg4GB06dIFLi4u0Gg02LZtmzIvIyMDkydPRo0aNWBtbQ0XFxcMGDAAt2/f1nuPhIQE+Pj4wNbWFvb29hgyZAhSU1P12pw5cwbNmjWDlZUVXF1d4e/vnx+LR0RERIWEQQNRWloaatWqhaVLl+aY9+DBA5w6dQqfffYZTp06hd9//x0XL15E165d9dr5+PggPDwcgYGB2LFjB4KDgzF8+HBlfkpKCtq1awc3NzeEhoZi3rx5mDFjBlasWPHal4+IiIgKBzNDfniHDh3QoUOHXOfZ2dkhMDBQb9q3336Lhg0bIioqCmXLlkVERAQCAgJw4sQJ1K9fHwCwZMkSdOzYEV9//TVcXFywYcMGpKenY9WqVbCwsICHhwfCwsKwYMECveBERERE6lWoxhAlJydDo9HA3t4eAHDkyBHY29srYQgAvLy8YGJigmPHjiltmjdvDgsLC6WNt7c3Ll68iMTExKd+llarRUpKit6DiIiIjFOhCUSPHj3C5MmT8e6778LW1hYAEBMTA0dHR712ZmZmcHBwQExMjNLGyclJr0328+w2uZkzZw7s7OyUh6ura14uDhERERUghSIQZWRkoHfv3hARfPfdd/nymVOmTEFycrLyiI6OzpfPJSIiovxn0DFELyI7DN24cQP79+9XeocAwNnZGXFxcXrtMzMzkZCQAGdnZ6VNbGysXpvs59ltcmNpaQlLS8u8WgwiIiIqwAp0D1F2GIqMjMTevXtRokQJvfmenp5ISkpCaGioMm3//v3Q6XRo1KiR0iY4OBgZGRlKm8DAQFSuXBnFixfPnwUhIiKiAs2ggSg1NRVhYWEICwsDAFy7dg1hYWGIiopCRkYGevXqhZMnT2LDhg3IyspCTEwMYmJikJ6eDgCoWrUq2rdvj2HDhuH48eM4dOgQ/Pz80LdvX7i4uAAA3nvvPVhYWGDIkCEIDw/H5s2b8c0332D8+PGGWmwiIiIqYAx6yOzkyZNo1aqV8jw7pPj6+mLGjBn4448/AAC1a9fWe11QUBBatmwJANiwYQP8/PzQpk0bmJiYoGfPnli8eLHS1s7ODnv27MGoUaNQr149lCxZEtOmTeMp90RERKQwaCBq2bIlROSp8581L5uDgwM2btz4zDY1a9ZESEjIS9dHRERE6lCgxxARERER5QcGIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPQYiIiIiUj0GIiIiIlI9BiIiIiJSPYMGouDgYHTp0gUuLi7QaDTYtm2b3nwRwbRp01C6dGkUKVIEXl5eiIyM1GuTkJAAHx8f2Nrawt7eHkOGDEFqaqpemzNnzqBZs2awsrKCq6sr/P39X/eiERERUSFi0ECUlpaGWrVqYenSpbnO9/f3x+LFi7F8+XIcO3YM1tbW8Pb2xqNHj5Q2Pj4+CA8PR2BgIHbs2IHg4GAMHz5cmZ+SkoJ27drBzc0NoaGhmDdvHmbMmIEVK1a89uUjIiKiwsHMkB/eoUMHdOjQIdd5IoJFixZh6tSp6NatGwBg3bp1cHJywrZt29C3b19EREQgICAAJ06cQP369QEAS5YsQceOHfH111/DxcUFGzZsQHp6OlatWgULCwt4eHggLCwMCxYs0AtOREREpF4FdgzRtWvXEBMTAy8vL2WanZ0dGjVqhCNHjgAAjhw5Ant7eyUMAYCXlxdMTExw7NgxpU3z5s1hYWGhtPH29sbFixeRmJj41M/XarVISUnRexAREZFxKrCBKCYmBgDg5OSkN93JyUmZFxMTA0dHR735ZmZmcHBw0GuT23s8+Rm5mTNnDuzs7JSHq6vrf1sgIiIiKrAKbCAytClTpiA5OVl5REdHG7okIiIiek0KbCBydnYGAMTGxupNj42NVeY5OzsjLi5Ob35mZiYSEhL02uT2Hk9+Rm4sLS1ha2ur9yAiIiLjVGADkbu7O5ydnbFv3z5lWkpKCo4dOwZPT08AgKenJ5KSkhAaGqq02b9/P3Q6HRo1aqS0CQ4ORkZGhtImMDAQlStXRvHixfNpaYiIiKggM2ggSk1NRVhYGMLCwgA8HkgdFhaGqKgoaDQajB07Fl988QX++OMPnD17FgMGDICLiwu6d+8OAKhatSrat2+PYcOG4fjx4zh06BD8/PzQt29fuLi4AADee+89WFhYYMiQIQgPD8fmzZvxzTffYPz48QZaaiIiIipoDHra/cmTJ9GqVSvleXZI8fX1xZo1azBp0iSkpaVh+PDhSEpKQtOmTREQEAArKyvlNRs2bICfnx/atGkDExMT9OzZE4sXL1bm29nZYc+ePRg1ahTq1auHkiVLYtq0aTzlnoiIiBQGDUQtW7aEiDx1vkajwaxZszBr1qyntnFwcMDGjRuf+Tk1a9ZESEjIK9dJRERExq3AjiEiIiIiyi8MRERERKR6DERERESkegxEREREpHoMRERERKR6DERERESkegxEREREpHoMRERERKR6DERERESkegxEREREpHqvFIjKly+Pe/fu5ZielJSE8uXL/+eiiIiIiPLTKwWi69evIysrK8d0rVaLW7du/eeiiIiIiPLTS93c9Y8//lD+/6+//oKdnZ3yPCsrC/v27UO5cuXyrDgiIiKi/PBSgah79+4AHt+F3tfXV2+eubk5ypUrh/nz5+dZcURERET54aUCkU6nAwC4u7vjxIkTKFmy5GspioiIiCg/vVQgynbt2rW8roOIiIjIYF4pEAHAvn37sG/fPsTFxSk9R9lWrVr1nwsjIiIiyi+vFIhmzpyJWbNmoX79+ihdujQ0Gk1e10VERESUb14pEC1fvhxr1qxB//7987oeIiIionz3StchSk9Px1tvvZXXtRAREREZxCsFoqFDh2Ljxo15XQsRERGRQbzSIbNHjx5hxYoV2Lt3L2rWrAlzc3O9+QsWLMiT4oiIiIjywysFojNnzqB27doAgHPnzunN4wBrIiIiKmxeKRAFBQXldR1EREREBvNKY4iIiIiIjMkr9RC1atXqmYfG9u/f/8oFEREREeW3VwpE2eOHsmVkZCAsLAznzp3LcdNXIiIiooLulQLRwoULc50+Y8YMpKam/qeCiIiIiPJbno4h6tevH+9jRkRERIVOngaiI0eOwMrKKi/fkoiIiOi1e6VDZj169NB7LiK4c+cOTp48ic8++yxPCiMiIiLKL68UiOzs7PSem5iYoHLlypg1axbatWuXJ4URERER5ZdXCkSrV6/O6zqIiIiIDOY/jSEKDQ3F+vXrsX79evzzzz95VZMiKysLn332Gdzd3VGkSBFUqFABn3/+OUREaSMimDZtGkqXLo0iRYrAy8sLkZGReu+TkJAAHx8f2Nrawt7eHkOGDOHZcERERKR4pR6iuLg49O3bFwcOHIC9vT0AICkpCa1atcLPP/+MUqVK5Ulxc+fOxXfffYe1a9fCw8MDJ0+exKBBg2BnZ4cxY8YAAPz9/bF48WKsXbsW7u7u+Oyzz+Dt7Y3z588rA7x9fHxw584dBAYGIiMjA4MGDcLw4cOxcePGPKmTiIiICrdX6iEaPXo07t+/j/DwcCQkJCAhIQHnzp1DSkqKElTywuHDh9GtWzd06tQJ5cqVQ69evdCuXTscP34cwOPeoUWLFmHq1Kno1q0batasiXXr1uH27dvYtm0bACAiIgIBAQFYuXIlGjVqhKZNm2LJkiX4+eefcfv27TyrlYiIiAqvVwpEAQEBWLZsGapWrapMq1atGpYuXYrdu3fnWXFvvfUW9u3bh0uXLgEATp8+jb///hsdOnQAAFy7dg0xMTHw8vJSXmNnZ4dGjRrhyJEjAB5fCsDe3h7169dX2nh5ecHExATHjh176mdrtVqkpKToPYiIiMg4vdIhM51OB3Nz8xzTzc3NodPp/nNR2T7++GOkpKSgSpUqMDU1RVZWFr788kv4+PgAAGJiYgAATk5Oeq9zcnJS5sXExMDR0VFvvpmZGRwcHJQ2uZkzZw5mzpyZZ8tCREREBdcr9RC1bt0aH374od4hp1u3bmHcuHFo06ZNnhX3yy+/YMOGDdi4cSNOnTqFtWvX4uuvv8batWvz7DOeZsqUKUhOTlYe0dHRr/0ziYiIyDBeqYfo22+/RdeuXVGuXDm4uroCAKKjo1G9enWsX78+z4qbOHEiPv74Y/Tt2xcAUKNGDdy4cQNz5syBr68vnJ2dAQCxsbEoXbq08rrY2FjlBrTOzs6Ii4vTe9/MzEwkJCQor8+NpaUlLC0t82xZiIiIqOB6pUDk6uqKU6dOYe/evbhw4QIAoGrVqnpjefLCgwcPYGKi34llamqqHJZzd3eHs7Mz9u3bpwSglJQUHDt2DCNGjAAAeHp6IikpCaGhoahXrx4AYP/+/dDpdGjUqFGe1ktERESF00sFov3798PPzw9Hjx6Fra0t2rZti7Zt2wIAkpOT4eHhgeXLl6NZs2Z5UlyXLl3w5ZdfomzZsvDw8MA///yDBQsWYPDgwQAAjUaDsWPH4osvvkClSpWU0+5dXFzQvXt3AI+DWvv27TFs2DAsX74cGRkZ8PPzQ9++feHi4pIndRIREVHh9lKBaNGiRRg2bBhsbW1zzLOzs8P777+PBQsW5FkgWrJkCT777DOMHDkScXFxcHFxwfvvv49p06YpbSZNmoS0tDQMHz4cSUlJaNq0KQICAvRuMrthwwb4+fmhTZs2MDExQc+ePbF48eI8qZGIiIgKP408ednn53Bzc0NAQIDe6fZPunDhAtq1a4eoqKg8K7CgSElJgZ2dHZKTk3MNhK/q1KlTqFevHtp+uhoOZSvn2fsWFglRFxH45SCEhoaibt26hi6HiIiMzItuv1/qLLPY2NhcT7fPZmZmhrt3777MWxIREREZ3EsFojfeeAPnzp176vwzZ87one1FREREVBi8VCDq2LEjPvvsMzx69CjHvIcPH2L69Ono3LlznhVHRERElB9ealD11KlT8fvvv+PNN9+En58fKld+POblwoULWLp0KbKysvDpp5++lkKJiIiIXpeXCkROTk44fPgwRowYgSlTpiB7PLZGo4G3tzeWLl2a4zYaRERERAXdS1+Y0c3NDbt27UJiYiIuX74MEUGlSpVQvHjx11EfERER0Wv3SleqBoDixYujQYMGeVkLERERkUG80s1diYiIiIwJAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpHgMRERERqR4DEREREakeAxERERGpXoEPRLdu3UK/fv1QokQJFClSBDVq1MDJkyeV+SKCadOmoXTp0ihSpAi8vLwQ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"},"metadata":{}},{"name":"stdout","text":"Ketamine\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Legalh\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"LSD\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Meth\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Mushrooms\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Nicotine\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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xgx07twZR44cweLFi7F48WIAgE6nw4gRI/DVV1+hdOnS8PDwwBdffIFixYqhffv2AJ70BLVo0ULZ/ZWcnIyhQ4eia9euPBKLiIiI1A07tWrVwvr16zFhwgRMnToVHh4emDdvHnr06KG0GTduHBITEzFo0CDExsaifv36CAwMhJWVldLmt99+w9ChQ9G0aVPlpILz589XY5GIiIgol1H9DMrvv/8+3n///RfO1+l0mDp1KqZOnfrCNg4ODli1alV2lEdERER5nKpjdoiIiIiyG8MOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaRrDDhEREWkaww4RERFpGsMOERERaZqqYWfy5MnQ6XQGt7JlyyrzHz9+DD8/PxQqVAg2Njbo2LEjoqKiDJ4jPDwcrVu3Rv78+eHo6IixY8ciJSUlpxeFiIiIcikztQuoUKECdu7cqdw3M/uvpJEjR2LLli34888/YWdnh6FDh6JDhw44cOAAACA1NRWtW7eGs7MzDh48iNu3b6N3794wNzfHjBkzcnxZiIiIKPdRPeyYmZnB2dk5w/S4uDgsXboUq1atgpeXFwBg2bJlKFeuHIKDg1G3bl1s374d58+fx86dO+Hk5ISqVati2rRpGD9+PCZPngwLC4ucXhwiIiLKZVQfsxMaGopixYqhRIkS6NGjB8LDwwEAx48fR3JyMry9vZW2ZcuWhaurKw4dOgQAOHToECpVqgQnJyeljY+PD+Lj43Hu3LkXvqZer0d8fLzBjYiIiLRJ1bBTp04dLF++HIGBgVi4cCGuXr2KBg0a4MGDB4iMjISFhQXs7e0NHuPk5ITIyEgAQGRk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1KpVKytrISIiIspymbo2FhEREVFewbBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJrGsENERESaxrBDREREmsawQ0RERJqmatiZOXMmatWqhQIFCsDR0RHt27fHxYsXDdo8fvwYfn5+KFSoEGxsbNCxY0dERUUZtAkPD0fr1q2RP39+ODo6YuzYsUhJScnJRSEiIqJcykzNF9+7dy/8/PxQq1YtpKSk4LPPPkPz5s1x/vx5WFtbAwBGjhyJLVu24M8//4SdnR2GDh2KDh064MCBAwCA1NRUtG7dGs7Ozjh48CBu376N3r17w9zcHDNmzFBz8YgAPAnjMTExapehmsKFC8PV1VXtMojIiKkadgIDAw3uL1++HI6Ojjh+/DgaNmyIuLg4LF26FKtWrYKXlxcAYNmyZShXrhyCg4NRt25dbN++HefPn8fOnTvh5OSEqlWrYtq0aRg/fjwmT54MCwsLNRaNCMCToFO2bDk8evRQ7VJUky9ffly4EMLAQ0SqUTXsPCsuLg4A4ODgAAA4fvw4kpOT4e3trbQpW7YsXF1dcejQIdStWxeHDh1CpUqV4OTkpLTx8fHB4MGDce7cOVSrVi3D6+j1euj1euV+fHx8di0SGbmYmBg8evQQdfpNgm1Rd7XLyXHxt6/h8M9TEBMTw7BDRKrJNWEnLS0NI0aMQL169VCxYkUAQGRkJCwsLGBvb2/Q1snJCZGRkUqbp4NO+vz0ec8zc+ZMTJkyJYuXgOjFbIu6w8G1jNplEBEZpVxzNJafnx/Onj2LNWvWZPtrTZgwAXFxccotIiIi21+TiIiI1JErenaGDh2KzZs3Y9++fShevLgy3dnZGUlJSYiNjTXo3YmKioKzs7PS5siRIwbPl360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"},"metadata":{}},{"name":"stdout","text":"Semer\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"VSA\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Preprocessing","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import OrdinalEncoder\n\n# Define the columns you want to encode\ncolumns_to_encode = ['Alcohol', 'Amphet', 'Amyl', 'Benzos', 'Caff', 'Cannabis', \n                     'Choc', 'Coke', 'Crack', 'Ecstasy', 'Heroin', 'Ketamine', \n                     'Legalh', 'LSD', 'Meth', 'Mushrooms', 'Nicotine', 'Semer', 'VSA']\n\n# Create an OrdinalEncoder instance\nencoder = OrdinalEncoder()\n\n# Fit and transform the specified columns\ndf[columns_to_encode] = encoder.fit_transform(df[columns_to_encode])\n\ndf","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:36.597901Z","iopub.execute_input":"2024-04-30T04:46:36.598488Z","iopub.status.idle":"2024-04-30T04:46:36.673780Z","shell.execute_reply.started":"2024-04-30T04:46:36.598447Z","shell.execute_reply":"2024-04-30T04:46:36.672331Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"          Age   Gender  Education  Country  Ethnicity  Neuroticism  \\\n0     0.49788  0.48246   -0.05921  0.96082    0.12600      0.31287   \n1    -0.07854 -0.48246    1.98437  0.96082   -0.31685     -0.67825   \n2     0.49788 -0.48246   -0.05921  0.96082   -0.31685     -0.46725   \n3    -0.95197  0.48246    1.16365  0.96082   -0.31685     -0.14882   \n4     0.49788  0.48246    1.98437  0.96082   -0.31685      0.73545   \n...       ...      ...        ...      ...        ...          ...   \n1880 -0.95197  0.48246   -0.61113 -0.57009   -0.31685     -1.19430   \n1881 -0.95197 -0.48246   -0.61113 -0.57009   -0.31685     -0.24649   \n1882 -0.07854  0.48246    0.45468 -0.57009   -0.31685      1.13281   \n1883 -0.95197  0.48246   -0.61113 -0.57009   -0.31685      0.91093   \n1884 -0.95197 -0.48246   -0.61113  0.21128   -0.31685     -0.46725   \n\n      Extraversion  Openness  Agreeableness  Conscientiousness  ...  Ecstasy  \\\n0         -0.57545  -0.58331       -0.91699           -0.00665  ...      0.0   \n1          1.93886   1.43533        0.76096           -0.14277  ...      4.0   \n2          0.80523  -0.84732       -1.62090           -1.01450  ...      0.0   \n3         -0.80615  -0.01928        0.59042            0.58489  ...      0.0   \n4         -1.63340  -0.45174       -0.30172            1.30612  ...      1.0   \n...            ...       ...            ...                ...  ...      ...   \n1880       1.74091   1.88511        0.76096           -1.13788  ...      0.0   \n1881       1.74091   0.58331        0.76096           -1.51840  ...      2.0   \n1882      -1.37639  -1.27553       -1.77200           -1.38502  ...      4.0   \n1883      -1.92173   0.29338       -1.62090           -2.57309  ...      3.0   \n1884       2.12700   1.65653        1.11406            0.41594  ...      3.0   \n\n      Heroin  Ketamine  Legalh  LSD  Meth  Mushrooms  Nicotine  Semer  VSA  \n0        0.0       0.0     0.0  0.0   0.0        0.0       2.0    0.0  0.0  \n1        0.0       2.0     0.0  2.0   3.0        0.0       4.0    0.0  0.0  \n2        0.0       0.0     0.0  0.0   0.0        1.0       0.0    0.0  0.0  \n3        0.0       2.0     0.0  0.0   0.0        0.0       2.0    0.0  0.0  \n4        0.0       0.0     1.0  0.0   0.0        2.0       2.0    0.0  0.0  \n...      ...       ...     ...  ...   ...        ...       ...    ...  ...  \n1880     0.0       0.0     3.0  3.0   0.0        0.0       0.0    0.0  5.0  \n1881     0.0       0.0     3.0  5.0   4.0        4.0       5.0    0.0  0.0  \n1882     0.0       2.0     0.0  2.0   0.0        2.0       6.0    0.0  0.0  \n1883     0.0       0.0     3.0  3.0   0.0        3.0       4.0    0.0  0.0  \n1884     0.0       0.0     3.0  3.0   0.0        3.0       6.0    0.0  2.0  \n\n[1885 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Education</th>\n      <th>Country</th>\n      <th>Ethnicity</th>\n      <th>Neuroticism</th>\n      <th>Extraversion</th>\n      <th>Openness</th>\n      <th>Agreeableness</th>\n      <th>Conscientiousness</th>\n      <th>...</th>\n      <th>Ecstasy</th>\n      <th>Heroin</th>\n      <th>Ketamine</th>\n      <th>Legalh</th>\n      <th>LSD</th>\n      <th>Meth</th>\n      <th>Mushrooms</th>\n      <th>Nicotine</th>\n      <th>Semer</th>\n      <th>VSA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.49788</td>\n      <td>0.48246</td>\n      <td>-0.05921</td>\n      <td>0.96082</td>\n      <td>0.12600</td>\n      <td>0.31287</td>\n      <td>-0.57545</td>\n      <td>-0.58331</td>\n      <td>-0.91699</td>\n      <td>-0.00665</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.07854</td>\n      <td>-0.48246</td>\n      <td>1.98437</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.67825</td>\n      <td>1.93886</td>\n      <td>1.43533</td>\n      <td>0.76096</td>\n      <td>-0.14277</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.49788</td>\n      <td>-0.48246</td>\n      <td>-0.05921</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.46725</td>\n      <td>0.80523</td>\n      <td>-0.84732</td>\n      <td>-1.62090</td>\n      <td>-1.01450</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>1.16365</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>-0.14882</td>\n      <td>-0.80615</td>\n      <td>-0.01928</td>\n      <td>0.59042</td>\n      <td>0.58489</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.49788</td>\n      <td>0.48246</td>\n      <td>1.98437</td>\n      <td>0.96082</td>\n      <td>-0.31685</td>\n      <td>0.73545</td>\n      <td>-1.63340</td>\n      <td>-0.45174</td>\n      <td>-0.30172</td>\n      <td>1.30612</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1880</th>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>-0.61113</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>-1.19430</td>\n      <td>1.74091</td>\n      <td>1.88511</td>\n      <td>0.76096</td>\n      <td>-1.13788</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>1881</th>\n      <td>-0.95197</td>\n      <td>-0.48246</td>\n      <td>-0.61113</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>-0.24649</td>\n      <td>1.74091</td>\n      <td>0.58331</td>\n      <td>0.76096</td>\n      <td>-1.51840</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1882</th>\n      <td>-0.07854</td>\n      <td>0.48246</td>\n      <td>0.45468</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>1.13281</td>\n      <td>-1.37639</td>\n      <td>-1.27553</td>\n      <td>-1.77200</td>\n      <td>-1.38502</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1883</th>\n      <td>-0.95197</td>\n      <td>0.48246</td>\n      <td>-0.61113</td>\n      <td>-0.57009</td>\n      <td>-0.31685</td>\n      <td>0.91093</td>\n      <td>-1.92173</td>\n      <td>0.29338</td>\n      <td>-1.62090</td>\n      <td>-2.57309</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1884</th>\n      <td>-0.95197</td>\n      <td>-0.48246</td>\n      <td>-0.61113</td>\n      <td>0.21128</td>\n      <td>-0.31685</td>\n      <td>-0.46725</td>\n      <td>2.12700</td>\n      <td>1.65653</td>\n      <td>1.11406</td>\n      <td>0.41594</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1885 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Calculate the correlation matrix\npearson_correlation_matrix = df.corr(method='pearson')\n# Initialize an empty DataFrame to store P-values\np_values = pd.DataFrame(index=pearson_correlation_matrix.columns, columns=pearson_correlation_matrix.columns)\n\n# Calculate P-values for each pair of columns\nfor col1 in pearson_correlation_matrix.columns:\n    for col2 in pearson_correlation_matrix.columns:\n        if col1 != col2:\n            _, p_value = pearsonr(df[col1], df[col2])\n            p_values.loc[col1, col2] = p_value\n\n# Visualize the correlation matrix\nplt.figure(figsize=(10, 8))\n\nsns.heatmap(pearson_correlation_matrix, cmap='coolwarm')\nplt.title('Pearson Correlation Matrix')\nplt.show()\n\n# Plotting the correlation matrix as an image\nplt.matshow(pearson_correlation_matrix)\nplt.xticks(range(len(pearson_correlation_matrix.columns)), pearson_correlation_matrix.columns, rotation=90)\nplt.yticks(range(len(pearson_correlation_matrix.columns)), pearson_correlation_matrix.columns)\nplt.colorbar()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:36.675561Z","iopub.execute_input":"2024-04-30T04:46:36.675963Z","iopub.status.idle":"2024-04-30T04:46:39.939977Z","shell.execute_reply.started":"2024-04-30T04:46:36.675930Z","shell.execute_reply":"2024-04-30T04:46:39.938555Z"},"trusted":true},"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 480x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"columns_to_compare = ['Age', 'Gender', 'Education', 'Country', 'Ethnicity','Neuroticism', 'Extraversion', 'Openness', 'Agreeableness', 'Conscientiousness', 'Impulsiveness', 'SensationSeeking', \n                      'Alcohol', 'Amphet', 'Amyl', 'Benzos', 'Caff', 'Cannabis', 'Choc', \n                      'Coke', 'Crack', 'Ecstasy', 'Heroin', 'Ketamine', 'Legalh', 'LSD', \n                      'Meth', 'Mushrooms', 'Nicotine', 'Semer', 'VSA']\n\n# Initialize empty lists to store the results\ncorr_results = []\n\n# Calculate correlations for all columns in columns_to_compare\nfor col in columns_to_compare:\n    corr_values = df.corrwith(df[col]).sort_values(ascending=False)\n    corr_results.append((col, corr_values))\n\n# Print the results\nfor col, values in corr_results:\n    print(f\"\\nCorrelations with respect to '{col}':\\n\")\n    print(values)\n#df.corrwith(df['LSD']).sort_values(ascending=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:39.942505Z","iopub.execute_input":"2024-04-30T04:46:39.943361Z","iopub.status.idle":"2024-04-30T04:46:40.306526Z","shell.execute_reply.started":"2024-04-30T04:46:39.943313Z","shell.execute_reply":"2024-04-30T04:46:40.305079Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"\nCorrelations with respect to 'Age':\n\nAge                  1.000000\nCountry              0.354241\nConscientiousness    0.183564\nEducation            0.158811\nGender               0.110286\nAgreeableness        0.063504\nChoc                 0.047522\nCaff                 0.037413\nAlcohol             -0.028773\nExtraversion        -0.033849\nSemer               -0.049729\nCrack               -0.051355\nEthnicity           -0.069753\nAmyl                -0.098108\nHeroin              -0.121675\nBenzos              -0.126416\nNeuroticism         -0.136654\nImpulsiveness       -0.190939\nMeth                -0.191503\nCoke                -0.220664\nKetamine            -0.220689\nOpenness            -0.226778\nVSA                 -0.229657\nAmphet              -0.246748\nNicotine            -0.248883\nLSD                 -0.323207\nMushrooms           -0.331456\nSensationSeeking    -0.332188\nEcstasy             -0.384784\nLegalh              -0.419839\nCannabis            -0.446846\ndtype: float64\n\nCorrelations with respect to 'Gender':\n\nGender               1.000000\nAgreeableness        0.219743\nCountry              0.216271\nEducation            0.196774\nConscientiousness    0.183831\nAge                  0.110286\nNeuroticism          0.074646\nChoc                 0.074584\nExtraversion         0.057864\nSemer                0.013354\nEthnicity           -0.001213\nAlcohol             -0.002537\nCaff                -0.011195\nOpenness            -0.131021\nBenzos              -0.133717\nVSA                 -0.134852\nHeroin              -0.136728\nCrack               -0.151324\nAmyl                -0.162250\nImpulsiveness       -0.167492\nCoke                -0.176704\nMeth                -0.181489\nKetamine            -0.189825\nNicotine            -0.192084\nAmphet              -0.222440\nEcstasy             -0.228574\nSensationSeeking    -0.244277\nMushrooms           -0.272431\nLSD                 -0.278983\nCannabis            -0.301579\nLegalh              -0.315676\ndtype: float64\n\nCorrelations with respect to 'Education':\n\nEducation            1.000000\nConscientiousness    0.240417\nCountry              0.225311\nGender               0.196774\nAge                  0.158811\nAlcohol              0.130657\nExtraversion         0.115645\nAgreeableness        0.091088\nOpenness             0.057994\nCaff                 0.036019\nChoc                 0.027837\nAmyl                -0.002560\nEthnicity           -0.036099\nSemer               -0.036342\nKetamine            -0.076479\nNeuroticism         -0.100993\nCoke                -0.108433\nVSA                 -0.120540\nHeroin              -0.131051\nSensationSeeking    -0.131146\nImpulsiveness       -0.132482\nBenzos              -0.133038\nCrack               -0.147743\nAmphet              -0.153895\nEcstasy             -0.159819\nMushrooms           -0.169762\nMeth                -0.170103\nLSD                 -0.177817\nLegalh              -0.208656\nNicotine            -0.240547\nCannabis            -0.265405\ndtype: float64\n\nCorrelations with respect to 'Country':\n\nCountry              1.000000\nAge                  0.354241\nEducation            0.225311\nGender               0.216271\nConscientiousness    0.214000\nAgreeableness        0.150921\nChoc                 0.124505\nExtraversion         0.109524\nAmyl                 0.080596\nAlcohol              0.076361\nCaff                 0.004974\nSemer               -0.068018\nKetamine            -0.112577\nEthnicity           -0.127946\nNeuroticism         -0.136191\nCrack               -0.229899\nImpulsiveness       -0.231572\nVSA                 -0.267033\nCoke                -0.277531\nNicotine            -0.277913\nHeroin              -0.300210\nEcstasy             -0.336328\nOpenness            -0.341969\nSensationSeeking    -0.345415\nAmphet              -0.395836\nBenzos              -0.401114\nMeth                -0.413946\nLegalh              -0.426030\nMushrooms           -0.490052\nLSD                 -0.498263\nCannabis            -0.551938\ndtype: float64\n\nCorrelations with respect to 'Ethnicity':\n\nEthnicity            1.000000\nCannabis             0.136049\nLSD                  0.129031\nBenzos               0.118517\nMushrooms            0.115962\nSensationSeeking     0.100304\nVSA                  0.087011\nCoke                 0.086853\nOpenness             0.084816\nAmphet               0.084407\nCaff                 0.084292\nImpulsiveness        0.082411\nNicotine             0.077724\nLegalh               0.077511\nEcstasy              0.071826\nMeth                 0.063805\nAlcohol              0.053825\nNeuroticism          0.047642\nHeroin               0.042881\nAmyl                 0.038790\nCrack                0.035478\nKetamine             0.031961\nChoc                 0.024475\nSemer                0.022716\nExtraversion         0.018402\nGender              -0.001213\nConscientiousness   -0.029923\nEducation           -0.036099\nAgreeableness       -0.038726\nAge                 -0.069753\nCountry             -0.127946\ndtype: float64\n\nCorrelations with respect to 'Neuroticism':\n\nNeuroticism          1.000000\nBenzos               0.272221\nMeth                 0.184672\nImpulsiveness        0.174399\nHeroin               0.172685\nCoke                 0.139915\nAmphet               0.131120\nNicotine             0.128430\nVSA                  0.115086\nLegalh               0.113342\nCrack                0.111435\nCannabis             0.095535\nSensationSeeking     0.079988\nGender               0.074646\nEcstasy              0.069948\nKetamine             0.062750\nEthnicity            0.047642\nMushrooms            0.042386\nLSD                  0.037095\nAmyl                 0.033317\nCaff                 0.013032\nChoc                 0.012583\nOpenness             0.010177\nSemer               -0.001673\nAlcohol             -0.001882\nEducation           -0.100993\nCountry             -0.136191\nAge                 -0.136654\nAgreeableness       -0.216964\nConscientiousness   -0.391088\nExtraversion        -0.431051\ndtype: float64\n\nCorrelations with respect to 'Extraversion':\n\nExtraversion         1.000000\nConscientiousness    0.308024\nOpenness             0.245277\nSensationSeeking     0.210130\nAgreeableness        0.157336\nEducation            0.115645\nImpulsiveness        0.114151\nCountry              0.109524\nAlcohol              0.092303\nEcstasy              0.078822\nGender               0.057864\nCaff                 0.054343\nCoke                 0.030942\nAmyl                 0.030199\nSemer                0.022909\nMushrooms            0.021105\nChoc                 0.020305\nKetamine             0.018727\nEthnicity            0.018402\nLSD                  0.018166\nCannabis            -0.014369\nNicotine            -0.019196\nVSA                 -0.032910\nAge                 -0.033849\nLegalh              -0.037383\nAmphet              -0.041095\nCrack               -0.050969\nHeroin              -0.079998\nBenzos              -0.103442\nMeth                -0.121708\nNeuroticism         -0.431051\ndtype: float64\n\nCorrelations with respect to 'Openness':\n\nOpenness             1.000000\nSensationSeeking     0.421709\nCannabis             0.414163\nLSD                  0.369759\nMushrooms            0.369139\nLegalh               0.317322\nEcstasy              0.296306\nImpulsiveness        0.277512\nExtraversion         0.245277\nAmphet               0.221116\nBenzos               0.201334\nNicotine             0.195460\nCoke                 0.188276\nKetamine             0.185061\nMeth                 0.171984\nVSA                  0.150502\nHeroin               0.134194\nCrack                0.097002\nEthnicity            0.084816\nAmyl                 0.060511\nEducation            0.057994\nAgreeableness        0.038516\nAlcohol              0.032711\nCaff                 0.027304\nSemer                0.026774\nNeuroticism          0.010177\nChoc                 0.001239\nConscientiousness   -0.056811\nGender              -0.131021\nAge                 -0.226778\nCountry             -0.341969\ndtype: float64\n\nCorrelations with respect to 'Agreeableness':\n\nAgreeableness        1.000000\nConscientiousness    0.247482\nGender               0.219743\nExtraversion         0.157336\nCountry              0.150921\nEducation            0.091088\nAge                  0.063504\nOpenness             0.038516\nChoc                 0.036266\nSemer                0.019750\nCaff                -0.016190\nAlcohol             -0.021806\nEthnicity           -0.038726\nLSD                 -0.093888\nAmyl                -0.096057\nCrack               -0.103945\nKetamine            -0.110763\nNicotine            -0.111075\nMushrooms           -0.111424\nVSA                 -0.114083\nEcstasy             -0.114550\nLegalh              -0.139983\nCannabis            -0.148481\nAmphet              -0.148868\nMeth                -0.156847\nBenzos              -0.164512\nHeroin              -0.169886\nCoke                -0.198147\nSensationSeeking    -0.208061\nNeuroticism         -0.216964\nImpulsiveness       -0.229690\ndtype: float64\n\nCorrelations with respect to 'Conscientiousness':\n\nConscientiousness    1.000000\nExtraversion         0.308024\nAgreeableness        0.247482\nEducation            0.240417\nCountry              0.214000\nGender               0.183831\nAge                  0.183564\nSemer                0.008524\nChoc                 0.000357\nAlcohol             -0.000203\nCaff                -0.027744\nEthnicity           -0.029923\nOpenness            -0.056811\nAmyl                -0.117803\nCrack               -0.133287\nKetamine            -0.153482\nHeroin              -0.158398\nVSA                 -0.159442\nLSD                 -0.160699\nMushrooms           -0.191237\nMeth                -0.191380\nCoke                -0.195228\nBenzos              -0.206383\nEcstasy             -0.217335\nSensationSeeking    -0.229038\nNicotine            -0.230862\nAmphet              -0.236235\nLegalh              -0.254417\nCannabis            -0.274780\nImpulsiveness       -0.335133\nNeuroticism         -0.391088\ndtype: float64\n\nCorrelations with respect to 'Impulsiveness':\n\nImpulsiveness        1.000000\nSensationSeeking     0.623120\nCannabis             0.310529\nAmphet               0.289438\nOpenness             0.277512\nLegalh               0.267579\nMushrooms            0.263684\nEcstasy              0.260864\nCoke                 0.260042\nNicotine             0.246299\nLSD                  0.229205\nBenzos               0.223374\nHeroin               0.197701\nCrack                0.185731\nMeth                 0.181524\nVSA                  0.181019\nKetamine             0.177665\nNeuroticism          0.174399\nAmyl                 0.126264\nExtraversion         0.114151\nEthnicity            0.082411\nCaff                 0.049388\nAlcohol              0.045972\nSemer                0.011178\nChoc                -0.020178\nEducation           -0.132482\nGender              -0.167492\nAge                 -0.190939\nAgreeableness       -0.229690\nCountry             -0.231572\nConscientiousness   -0.335133\ndtype: float64\n\nCorrelations with respect to 'SensationSeeking':\n\nSensationSeeking     1.000000\nImpulsiveness        0.623120\nCannabis             0.456137\nOpenness             0.421709\nLegalh               0.405578\nEcstasy              0.388186\nMushrooms            0.378285\nLSD                  0.365536\nCoke                 0.343352\nAmphet               0.331105\nNicotine             0.305635\nVSA                  0.250599\nBenzos               0.247903\nKetamine             0.243609\nMeth                 0.218884\nHeroin               0.213684\nExtraversion         0.210130\nAmyl                 0.195280\nCrack                0.190201\nAlcohol              0.108472\nEthnicity            0.100304\nNeuroticism          0.079988\nCaff                 0.052049\nSemer                0.047986\nChoc                -0.039836\nEducation           -0.131146\nAgreeableness       -0.208061\nConscientiousness   -0.229038\nGender              -0.244277\nAge                 -0.332188\nCountry             -0.345415\ndtype: float64\n\nCorrelations with respect to 'Alcohol':\n\nAlcohol              1.000000\nEducation            0.130657\nCaff                 0.126937\nSensationSeeking     0.108472\nExtraversion         0.092303\nCoke                 0.089585\nAmyl                 0.086749\nCountry              0.076361\nEcstasy              0.073585\nKetamine             0.065895\nNicotine             0.062264\nEthnicity            0.053825\nImpulsiveness        0.045972\nChoc                 0.045885\nOpenness             0.032711\nLegalh               0.027828\nMushrooms            0.027419\nVSA                  0.025353\nCannabis             0.022956\nLSD                  0.012123\nConscientiousness   -0.000203\nNeuroticism         -0.001882\nGender              -0.002537\nAmphet              -0.009988\nBenzos              -0.010229\nCrack               -0.020121\nAgreeableness       -0.021806\nAge                 -0.028773\nHeroin              -0.033786\nSemer               -0.036110\nMeth                -0.079022\ndtype: float64\n\nCorrelations with respect to 'Amphet':\n\nAmphet               1.000000\nCoke                 0.530951\nEcstasy              0.521537\nBenzos               0.500642\nLegalh               0.474993\nCannabis             0.458576\nMushrooms            0.427977\nLSD                  0.419616\nMeth                 0.397671\nKetamine             0.373587\nHeroin               0.360896\nNicotine             0.352249\nSensationSeeking     0.331105\nAmyl                 0.316096\nCrack                0.294352\nImpulsiveness        0.289438\nVSA                  0.269259\nOpenness             0.221116\nNeuroticism          0.131120\nEthnicity            0.084407\nCaff                 0.058039\nSemer                0.029641\nAlcohol             -0.009988\nExtraversion        -0.041095\nChoc                -0.060228\nAgreeableness       -0.148868\nEducation           -0.153895\nGender              -0.222440\nConscientiousness   -0.236235\nAge                 -0.246748\nCountry             -0.395836\ndtype: float64\n\nCorrelations with respect to 'Amyl':\n\nAmyl                 1.000000\nCoke                 0.377278\nEcstasy              0.358947\nKetamine             0.343731\nAmphet               0.316096\nLegalh               0.260235\nNicotine             0.223269\nCannabis             0.220254\nBenzos               0.217358\nMushrooms            0.212167\nSensationSeeking     0.195280\nLSD                  0.161425\nVSA                  0.151936\nCrack                0.142129\nHeroin               0.129242\nImpulsiveness        0.126264\nAlcohol              0.086749\nCountry              0.080596\nCaff                 0.079876\nOpenness             0.060511\nMeth                 0.057083\nEthnicity            0.038790\nNeuroticism          0.033317\nExtraversion         0.030199\nSemer                0.006498\nChoc                 0.001838\nEducation           -0.002560\nAgreeableness       -0.096057\nAge                 -0.098108\nConscientiousness   -0.117803\nGender              -0.162250\ndtype: float64\n\nCorrelations with respect to 'Benzos':\n\nBenzos               1.000000\nMeth                 0.519292\nAmphet               0.500642\nCoke                 0.443109\nHeroin               0.427162\nCannabis             0.358553\nLegalh               0.357506\nCrack                0.347740\nMushrooms            0.344434\nEcstasy              0.342400\nNicotine             0.303475\nLSD                  0.302735\nKetamine             0.297018\nVSA                  0.274071\nNeuroticism          0.272221\nSensationSeeking     0.247903\nImpulsiveness        0.223374\nAmyl                 0.217358\nOpenness             0.201334\nEthnicity            0.118517\nCaff                 0.055515\nSemer                0.026093\nAlcohol             -0.010229\nChoc                -0.052064\nExtraversion        -0.103442\nAge                 -0.126416\nEducation           -0.133038\nGender              -0.133717\nAgreeableness       -0.164512\nConscientiousness   -0.206383\nCountry             -0.401114\ndtype: float64\n\nCorrelations with respect to 'Caff':\n\nCaff                 1.000000\nAlcohol              0.126937\nNicotine             0.126669\nChoc                 0.115299\nEthnicity            0.084292\nAmyl                 0.079876\nCoke                 0.076768\nAmphet               0.058039\nVSA                  0.057259\nBenzos               0.055515\nExtraversion         0.054343\nSensationSeeking     0.052049\nImpulsiveness        0.049388\nCannabis             0.040527\nMushrooms            0.040013\nAge                  0.037413\nEducation            0.036019\nEcstasy              0.033983\nOpenness             0.027304\nMeth                 0.023196\nHeroin               0.014683\nCrack                0.014551\nKetamine             0.013997\nNeuroticism          0.013032\nLegalh               0.006747\nCountry              0.004974\nLSD                 -0.004510\nSemer               -0.011084\nGender              -0.011195\nAgreeableness       -0.016190\nConscientiousness   -0.027744\ndtype: float64\n\nCorrelations with respect to 'Cannabis':\n\nCannabis             1.000000\nMushrooms            0.579934\nLegalh               0.554048\nEcstasy              0.552978\nLSD                  0.521048\nNicotine             0.515145\nAmphet               0.458576\nSensationSeeking     0.456137\nCoke                 0.448776\nOpenness             0.414163\nBenzos               0.358553\nImpulsiveness        0.310529\nKetamine             0.309144\nMeth                 0.295021\nVSA                  0.271175\nCrack                0.234511\nHeroin               0.233546\nAmyl                 0.220254\nEthnicity            0.136049\nNeuroticism          0.095535\nSemer                0.043969\nCaff                 0.040527\nAlcohol              0.022956\nExtraversion        -0.014369\nChoc                -0.064303\nAgreeableness       -0.148481\nEducation           -0.265405\nConscientiousness   -0.274780\nGender              -0.301579\nAge                 -0.446846\nCountry             -0.551938\ndtype: float64\n\nCorrelations with respect to 'Choc':\n\nChoc                 1.000000\nCountry              0.124505\nCaff                 0.115299\nGender               0.074584\nAge                  0.047522\nAlcohol              0.045885\nAgreeableness        0.036266\nEducation            0.027837\nEthnicity            0.024475\nExtraversion         0.020305\nNeuroticism          0.012583\nAmyl                 0.001838\nOpenness             0.001239\nConscientiousness    0.000357\nImpulsiveness       -0.020178\nKetamine            -0.026126\nSemer               -0.039510\nSensationSeeking    -0.039836\nNicotine            -0.040433\nMeth                -0.044426\nEcstasy             -0.049131\nBenzos              -0.052064\nLegalh              -0.055693\nAmphet              -0.060228\nCoke                -0.062289\nCannabis            -0.064303\nVSA                 -0.073982\nMushrooms           -0.073984\nLSD                 -0.078222\nHeroin              -0.078250\nCrack               -0.118066\ndtype: float64\n\nCorrelations with respect to 'Coke':\n\nCoke                 1.000000\nEcstasy              0.610783\nAmphet               0.530951\nCannabis             0.448776\nBenzos               0.443109\nKetamine             0.441656\nMushrooms            0.426584\nHeroin               0.424215\nLegalh               0.412975\nNicotine             0.401253\nCrack                0.390403\nLSD                  0.384027\nAmyl                 0.377278\nMeth                 0.343801\nSensationSeeking     0.343352\nVSA                  0.281865\nImpulsiveness        0.260042\nOpenness             0.188276\nNeuroticism          0.139915\nAlcohol              0.089585\nEthnicity            0.086853\nCaff                 0.076768\nSemer                0.046451\nExtraversion         0.030942\nChoc                -0.062289\nEducation           -0.108433\nGender              -0.176704\nConscientiousness   -0.195228\nAgreeableness       -0.198147\nAge                 -0.220664\nCountry             -0.277531\ndtype: float64\n\nCorrelations with respect to 'Crack':\n\nCrack                1.000000\nHeroin               0.527120\nCoke                 0.390403\nMeth                 0.355952\nBenzos               0.347740\nAmphet               0.294352\nMushrooms            0.261605\nVSA                  0.250285\nNicotine             0.241017\nCannabis             0.234511\nEcstasy              0.232394\nLSD                  0.230271\nKetamine             0.229557\nLegalh               0.194630\nSensationSeeking     0.190201\nImpulsiveness        0.185731\nAmyl                 0.142129\nNeuroticism          0.111435\nOpenness             0.097002\nEthnicity            0.035478\nSemer                0.026438\nCaff                 0.014551\nAlcohol             -0.020121\nExtraversion        -0.050969\nAge                 -0.051355\nAgreeableness       -0.103945\nChoc                -0.118066\nConscientiousness   -0.133287\nEducation           -0.147743\nGender              -0.151324\nCountry             -0.229899\ndtype: float64\n\nCorrelations with respect to 'Ecstasy':\n\nEcstasy              1.000000\nCoke                 0.610783\nLSD                  0.570946\nLegalh               0.554134\nCannabis             0.552978\nMushrooms            0.547536\nAmphet               0.521537\nKetamine             0.508329\nSensationSeeking     0.388186\nNicotine             0.380399\nAmyl                 0.358947\nBenzos               0.342400\nOpenness             0.296306\nHeroin               0.265752\nImpulsiveness        0.260864\nMeth                 0.259177\nVSA                  0.251542\nCrack                0.232394\nExtraversion         0.078822\nAlcohol              0.073585\nEthnicity            0.071826\nNeuroticism          0.069948\nSemer                0.039119\nCaff                 0.033983\nChoc                -0.049131\nAgreeableness       -0.114550\nEducation           -0.159819\nConscientiousness   -0.217335\nGender              -0.228574\nCountry             -0.336328\nAge                 -0.384784\ndtype: float64\n\nCorrelations with respect to 'Heroin':\n\nHeroin               1.000000\nCrack                0.527120\nMeth                 0.478264\nBenzos               0.427162\nCoke                 0.424215\nAmphet               0.360896\nLSD                  0.279543\nMushrooms            0.268299\nEcstasy              0.265752\nVSA                  0.256073\nKetamine             0.249613\nLegalh               0.242205\nCannabis             0.233546\nNicotine             0.224314\nSensationSeeking     0.213684\nImpulsiveness        0.197701\nNeuroticism          0.172685\nOpenness             0.134194\nAmyl                 0.129242\nEthnicity            0.042881\nSemer                0.016959\nCaff                 0.014683\nAlcohol             -0.033786\nChoc                -0.078250\nExtraversion        -0.079998\nAge                 -0.121675\nEducation           -0.131051\nGender              -0.136728\nConscientiousness   -0.158398\nAgreeableness       -0.169886\nCountry             -0.300210\ndtype: float64\n\nCorrelations with respect to 'Ketamine':\n\nKetamine             1.000000\nEcstasy              0.508329\nCoke                 0.441656\nLegalh               0.410852\nMushrooms            0.410059\nLSD                  0.409933\nAmphet               0.373587\nAmyl                 0.343731\nCannabis             0.309144\nBenzos               0.297018\nNicotine             0.255897\nHeroin               0.249613\nSensationSeeking     0.243609\nCrack                0.229557\nVSA                  0.196172\nMeth                 0.186836\nOpenness             0.185061\nImpulsiveness        0.177665\nAlcohol              0.065895\nNeuroticism          0.062750\nSemer                0.059400\nEthnicity            0.031961\nExtraversion         0.018727\nCaff                 0.013997\nChoc                -0.026126\nEducation           -0.076479\nAgreeableness       -0.110763\nCountry             -0.112577\nConscientiousness   -0.153482\nGender              -0.189825\nAge                 -0.220689\ndtype: float64\n\nCorrelations with respect to 'Legalh':\n\nLegalh               1.000000\nEcstasy              0.554134\nCannabis             0.554048\nMushrooms            0.531819\nAmphet               0.474993\nLSD                  0.471942\nCoke                 0.412975\nKetamine             0.410852\nSensationSeeking     0.405578\nBenzos               0.357506\nNicotine             0.341127\nMeth                 0.324824\nVSA                  0.319639\nOpenness             0.317322\nImpulsiveness        0.267579\nAmyl                 0.260235\nHeroin               0.242205\nCrack                0.194630\nNeuroticism          0.113342\nEthnicity            0.077511\nAlcohol              0.027828\nSemer                0.015995\nCaff                 0.006747\nExtraversion        -0.037383\nChoc                -0.055693\nAgreeableness       -0.139983\nEducation           -0.208656\nConscientiousness   -0.254417\nGender              -0.315676\nAge                 -0.419839\nCountry             -0.426030\ndtype: float64\n\nCorrelations with respect to 'LSD':\n\nLSD                  1.000000\nMushrooms            0.668627\nEcstasy              0.570946\nCannabis             0.521048\nLegalh               0.471942\nAmphet               0.419616\nKetamine             0.409933\nCoke                 0.384027\nOpenness             0.369759\nSensationSeeking     0.365536\nBenzos               0.302735\nNicotine             0.292235\nVSA                  0.286189\nHeroin               0.279543\nMeth                 0.266792\nCrack                0.230271\nImpulsiveness        0.229205\nAmyl                 0.161425\nEthnicity            0.129031\nSemer                0.071252\nNeuroticism          0.037095\nExtraversion         0.018166\nAlcohol              0.012123\nCaff                -0.004510\nChoc                -0.078222\nAgreeableness       -0.093888\nConscientiousness   -0.160699\nEducation           -0.177817\nGender              -0.278983\nAge                 -0.323207\nCountry             -0.498263\ndtype: float64\n\nCorrelations with respect to 'Meth':\n\nMeth                 1.000000\nBenzos               0.519292\nHeroin               0.478264\nAmphet               0.397671\nCrack                0.355952\nCoke                 0.343801\nLegalh               0.324824\nCannabis             0.295021\nMushrooms            0.277258\nLSD                  0.266792\nEcstasy              0.259177\nVSA                  0.258825\nNicotine             0.220544\nSensationSeeking     0.218884\nKetamine             0.186836\nNeuroticism          0.184672\nImpulsiveness        0.181524\nOpenness             0.171984\nEthnicity            0.063805\nAmyl                 0.057083\nCaff                 0.023196\nSemer               -0.003798\nChoc                -0.044426\nAlcohol             -0.079022\nExtraversion        -0.121708\nAgreeableness       -0.156847\nEducation           -0.170103\nGender              -0.181489\nConscientiousness   -0.191380\nAge                 -0.191503\nCountry             -0.413946\ndtype: float64\n\nCorrelations with respect to 'Mushrooms':\n\nMushrooms            1.000000\nLSD                  0.668627\nCannabis             0.579934\nEcstasy              0.547536\nLegalh               0.531819\nAmphet               0.427977\nCoke                 0.426584\nKetamine             0.410059\nSensationSeeking     0.378285\nOpenness             0.369139\nBenzos               0.344434\nNicotine             0.323034\nMeth                 0.277258\nHeroin               0.268299\nImpulsiveness        0.263684\nCrack                0.261605\nVSA                  0.245239\nAmyl                 0.212167\nEthnicity            0.115962\nSemer                0.099120\nNeuroticism          0.042386\nCaff                 0.040013\nAlcohol              0.027419\nExtraversion         0.021105\nChoc                -0.073984\nAgreeableness       -0.111424\nEducation           -0.169762\nConscientiousness   -0.191237\nGender              -0.272431\nAge                 -0.331456\nCountry             -0.490052\ndtype: float64\n\nCorrelations with respect to 'Nicotine':\n\nNicotine             1.000000\nCannabis             0.515145\nCoke                 0.401253\nEcstasy              0.380399\nAmphet               0.352249\nLegalh               0.341127\nMushrooms            0.323034\nSensationSeeking     0.305635\nBenzos               0.303475\nLSD                  0.292235\nKetamine             0.255897\nVSA                  0.255023\nImpulsiveness        0.246299\nCrack                0.241017\nHeroin               0.224314\nAmyl                 0.223269\nMeth                 0.220544\nOpenness             0.195460\nNeuroticism          0.128430\nCaff                 0.126669\nEthnicity            0.077724\nAlcohol              0.062264\nSemer                0.026760\nExtraversion        -0.019196\nChoc                -0.040433\nAgreeableness       -0.111075\nGender              -0.192084\nConscientiousness   -0.230862\nEducation           -0.240547\nAge                 -0.248883\nCountry             -0.277913\ndtype: float64\n\nCorrelations with respect to 'Semer':\n\nSemer                1.000000\nMushrooms            0.099120\nLSD                  0.071252\nKetamine             0.059400\nVSA                  0.056072\nSensationSeeking     0.047986\nCoke                 0.046451\nCannabis             0.043969\nEcstasy              0.039119\nAmphet               0.029641\nOpenness             0.026774\nNicotine             0.026760\nCrack                0.026438\nBenzos               0.026093\nExtraversion         0.022909\nEthnicity            0.022716\nAgreeableness        0.019750\nHeroin               0.016959\nLegalh               0.015995\nGender               0.013354\nImpulsiveness        0.011178\nConscientiousness    0.008524\nAmyl                 0.006498\nNeuroticism         -0.001673\nMeth                -0.003798\nCaff                -0.011084\nAlcohol             -0.036110\nEducation           -0.036342\nChoc                -0.039510\nAge                 -0.049729\nCountry             -0.068018\ndtype: float64\n\nCorrelations with respect to 'VSA':\n\nVSA                  1.000000\nLegalh               0.319639\nLSD                  0.286189\nCoke                 0.281865\nBenzos               0.274071\nCannabis             0.271175\nAmphet               0.269259\nMeth                 0.258825\nHeroin               0.256073\nNicotine             0.255023\nEcstasy              0.251542\nSensationSeeking     0.250599\nCrack                0.250285\nMushrooms            0.245239\nKetamine             0.196172\nImpulsiveness        0.181019\nAmyl                 0.151936\nOpenness             0.150502\nNeuroticism          0.115086\nEthnicity            0.087011\nCaff                 0.057259\nSemer                0.056072\nAlcohol              0.025353\nExtraversion        -0.032910\nChoc                -0.073982\nAgreeableness       -0.114083\nEducation           -0.120540\nGender              -0.134852\nConscientiousness   -0.159442\nAge                 -0.229657\nCountry             -0.267033\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"features = ['Age', 'Gender', 'Education', 'Country', 'Ethnicity', 'Neuroticism', 'Extraversion', 'Openness', 'Agreeableness', 'Conscientiousness', 'Impulsiveness', 'SensationSeeking']\nX = df[features]\ny_toPred = df[['Alcohol', 'Amphet', 'Amyl', 'Benzos', 'Caff', 'Cannabis', \n        'Choc', 'Coke', 'Ecstasy', 'Heroin', 'Ketamine', \n        'Legalh', 'LSD', 'Meth', 'Mushrooms', 'Nicotine','VSA']]  # Target variables\nother_target = df[['Crack', 'Semer']]\ny_toPred.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:40.308331Z","iopub.execute_input":"2024-04-30T04:46:40.308751Z","iopub.status.idle":"2024-04-30T04:46:40.346698Z","shell.execute_reply.started":"2024-04-30T04:46:40.308714Z","shell.execute_reply":"2024-04-30T04:46:40.345565Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"   Alcohol  Amphet  Amyl  Benzos  Caff  Cannabis  Choc  Coke  Ecstasy  Heroin  \\\n0      5.0     2.0   0.0     2.0   6.0       0.0   5.0   0.0      0.0     0.0   \n1      5.0     2.0   2.0     0.0   6.0       4.0   6.0   3.0      4.0     0.0   \n2      6.0     0.0   0.0     0.0   6.0       3.0   4.0   0.0      0.0     0.0   \n3      4.0     0.0   0.0     3.0   5.0       2.0   4.0   2.0      0.0     0.0   \n4      4.0     1.0   1.0     0.0   6.0       3.0   6.0   0.0      1.0     0.0   \n\n   Ketamine  Legalh  LSD  Meth  Mushrooms  Nicotine  VSA  \n0       0.0     0.0  0.0   0.0        0.0       2.0  0.0  \n1       2.0     0.0  2.0   3.0        0.0       4.0  0.0  \n2       0.0     0.0  0.0   0.0        1.0       0.0  0.0  \n3       2.0     0.0  0.0   0.0        0.0       2.0  0.0  \n4       0.0     1.0  0.0   0.0        2.0       2.0  0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Alcohol</th>\n      <th>Amphet</th>\n      <th>Amyl</th>\n      <th>Benzos</th>\n      <th>Caff</th>\n      <th>Cannabis</th>\n      <th>Choc</th>\n      <th>Coke</th>\n      <th>Ecstasy</th>\n      <th>Heroin</th>\n      <th>Ketamine</th>\n      <th>Legalh</th>\n      <th>LSD</th>\n      <th>Meth</th>\n      <th>Mushrooms</th>\n      <th>Nicotine</th>\n      <th>VSA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>6.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>3.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"other_target.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:40.348145Z","iopub.execute_input":"2024-04-30T04:46:40.349191Z","iopub.status.idle":"2024-04-30T04:46:40.364544Z","shell.execute_reply.started":"2024-04-30T04:46:40.349150Z","shell.execute_reply":"2024-04-30T04:46:40.363064Z"},"trusted":true},"execution_count":65,"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"Crack  Semer\n0.0    0.0      1622\n2.0    0.0       109\n1.0    0.0        67\n3.0    0.0        59\n4.0    0.0         9\n5.0    0.0         9\n0.0    2.0         2\n6.0    0.0         2\n0.0    1.0         1\n       3.0         1\n       4.0         1\n2.0    1.0         1\n       2.0         1\n       3.0         1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, f1_score\nimport numpy as np\n\n# Define the list of classification algorithms to evaluate\nalgorithms = {\n    'Random Forest': RandomForestClassifier(),\n    'Logistic Regression': LogisticRegression(),\n    'Support Vector Machine': SVC(probability=True),\n    'Decision Tree': DecisionTreeClassifier(),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Naive Bayes': GaussianNB(),\n    'Gradient Boosting': GradientBoostingClassifier(),\n    'AdaBoost': AdaBoostClassifier(),\n    'XGBoost': XGBClassifier()\n}\n\n# Initialize the dictionary to store evaluation results\nevaluation_results = {}\n\nfor i in y_toPred:\n    y = y_toPred[i]\n    \n    # Split the data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\n    \n    # Evaluate each algorithm\n    for algorithm_name, model in algorithms.items():\n        # Create and train the model\n        model.fit(X_train, y_train)\n\n        # Predict probabilities for the test set\n        y_pred_proba = model.predict_proba(X_test)\n\n        # Predict labels for the test set\n        y_pred = model.predict(X_test)\n\n        # Calculate evaluation metrics\n        accuracy = accuracy_score(y_test, y_pred)\n        roc_auc = roc_auc_score(y_test, y_pred_proba, multi_class='ovr')\n        f1 = f1_score(y_test, y_pred, average='weighted')\n\n        # Print evaluation metrics\n        print(f\"Evaluating {algorithm_name} for {i}:\")\n        print(f\"Accuracy: {accuracy}\")\n        print(f\"ROC AUC: {roc_auc}\")\n        print(f\"F1-score: {f1}\")\n\n        # Store evaluation metrics in the dictionary\n        if i not in evaluation_results:\n            evaluation_results[i] = {}\n        evaluation_results[i][algorithm_name] = {'Accuracy': accuracy, 'ROC_AUC': roc_auc, 'F1_score': f1}\n\n# Print the evaluation results\nprint(\"\\nEvaluation results:\")\nprint(evaluation_results)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:46:40.366545Z","iopub.execute_input":"2024-04-30T04:46:40.366955Z","iopub.status.idle":"2024-04-30T04:47:54.739760Z","shell.execute_reply.started":"2024-04-30T04:46:40.366921Z","shell.execute_reply":"2024-04-30T04:47:54.738812Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"Evaluating Random Forest for Alcohol:\nAccuracy: 0.36925795053003535\nROC AUC: 0.5857351703570393\nF1-score: 0.31426589186025383\nEvaluating Logistic Regression for Alcohol:\nAccuracy: 0.40636042402826855\nROC AUC: 0.6172541829619488\nF1-score: 0.310497739865071\nEvaluating Support Vector Machine for Alcohol:\nAccuracy: 0.3869257950530035\nROC AUC: 0.5802127661968001\nF1-score: 0.2755436206806189\nEvaluating Decision Tree for Alcohol:\nAccuracy: 0.3003533568904594\nROC AUC: 0.5085726602691011\nF1-score: 0.3017817412328392\nEvaluating K-Nearest Neighbors for Alcohol:\nAccuracy: 0.32685512367491165\nROC AUC: 0.5159220011607785\nF1-score: 0.3146654693284055\nEvaluating Naive Bayes for Alcohol:\nAccuracy: 0.35335689045936397\nROC AUC: 0.5997824650160487\nF1-score: 0.3091665528914293\nEvaluating Gradient Boosting for Alcohol:\nAccuracy: 0.3745583038869258\nROC AUC: 0.6116545992556315\nF1-score: 0.32924349774982375\nEvaluating AdaBoost for Alcohol:\nAccuracy: 0.22614840989399293\nROC AUC: 0.5407102565051605\nF1-score: 0.23637623194961907\nEvaluating XGBoost for Alcohol:\nAccuracy: 0.35335689045936397\nROC AUC: 0.6057705096464858\nF1-score: 0.32876958133109846\nEvaluating Random Forest for Amphet:\nAccuracy: 0.49469964664310956\nROC AUC: 0.7314909292135056\nF1-score: 0.3946675706612681\nEvaluating Logistic Regression for Amphet:\nAccuracy: 0.5265017667844523\nROC AUC: 0.7428295384663594\nF1-score: 0.4200925489701222\nEvaluating Support Vector Machine for Amphet:\nAccuracy: 0.519434628975265\nROC AUC: 0.7259130649730554\nF1-score: 0.3623388851697358\nEvaluating Decision Tree for Amphet:\nAccuracy: 0.3957597173144876\nROC AUC: 0.5422367120864248\nF1-score: 0.3948553046461072\nEvaluating K-Nearest Neighbors for Amphet:\nAccuracy: 0.5\nROC AUC: 0.6272400313037517\nF1-score: 0.4313601372344664\nEvaluating Naive Bayes for Amphet:\nAccuracy: 0.4558303886925795\nROC AUC: 0.7417466340772637\nF1-score: 0.4479150440556291\nEvaluating Gradient Boosting for Amphet:\nAccuracy: 0.5159010600706714\nROC AUC: 0.7423588871796659\nF1-score: 0.4452615713609305\nEvaluating AdaBoost for Amphet:\nAccuracy: 0.3551236749116608\nROC AUC: 0.6027947571176618\nF1-score: 0.37811717516383697\nEvaluating XGBoost for Amphet:\nAccuracy: 0.4823321554770318\nROC AUC: 0.7237867159176451\nF1-score: 0.43219271336640214\nEvaluating Random Forest for Amyl:\nAccuracy: 0.6872791519434629\nROC AUC: 0.6703088296684095\nF1-score: 0.5936698973681374\nEvaluating Logistic Regression for Amyl:\nAccuracy: 0.6802120141342756\nROC AUC: 0.7576580046360811\nF1-score: 0.5740481243939631\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Evaluating Support Vector Machine for Amyl:\nAccuracy: 0.6943462897526502\nROC AUC: 0.7139373111811473\nF1-score: 0.5708580143152002\nEvaluating Decision Tree for Amyl:\nAccuracy: 0.5282685512367491\nROC AUC: 0.525419416009749\nF1-score: 0.5445422004763901\nEvaluating K-Nearest Neighbors for Amyl:\nAccuracy: 0.6625441696113075\nROC AUC: 0.5752193494464508\nF1-score: 0.5899862735947102\nEvaluating Naive Bayes for Amyl:\nAccuracy: 0.549469964664311\nROC AUC: 0.6569756236110365\nF1-score: 0.5716189193858844\nEvaluating Gradient Boosting for Amyl:\nAccuracy: 0.6749116607773852\nROC AUC: 0.7106065844305888\nF1-score: 0.6093452303122359\nEvaluating AdaBoost for Amyl:\nAccuracy: 0.6925795053003534\nROC AUC: 0.6159009693678612\nF1-score: 0.566787403085049\nEvaluating XGBoost for Amyl:\nAccuracy: 0.6501766784452296\nROC AUC: 0.7191795262528732\nF1-score: 0.5966127656595741\nEvaluating Random Forest for Benzos:\nAccuracy: 0.5265017667844523\nROC AUC: 0.6898115261010328\nF1-score: 0.4204883857058052\nEvaluating Logistic Regression for Benzos:\nAccuracy: 0.5335689045936396\nROC AUC: 0.7193953178359164\nF1-score: 0.4163979189699522\nEvaluating Support Vector Machine for Benzos:\nAccuracy: 0.5300353356890459\nROC AUC: 0.7042472177219574\nF1-score: 0.3737171090049133\nEvaluating Decision Tree for Benzos:\nAccuracy: 0.3586572438162544\nROC AUC: 0.5174154900622974\nF1-score: 0.37006623096003444\nEvaluating K-Nearest Neighbors for Benzos:\nAccuracy: 0.48056537102473496\nROC AUC: 0.6116600454216129\nF1-score: 0.4027831174287144\nEvaluating Naive Bayes for Benzos:\nAccuracy: 0.45229681978798586\nROC AUC: 0.6957057840433067\nF1-score: 0.42251490825870136\nEvaluating Gradient Boosting for Benzos:\nAccuracy: 0.5106007067137809\nROC AUC: 0.7022465659059639\nF1-score: 0.43002424542128753\nEvaluating AdaBoost for Benzos:\nAccuracy: 0.4293286219081272\nROC AUC: 0.6205248729057615\nF1-score: 0.4085981759479232\nEvaluating XGBoost for Benzos:\nAccuracy: 0.4876325088339223\nROC AUC: 0.6782073467430341\nF1-score: 0.4290915114309039\nEvaluating Random Forest for Caff:\nAccuracy: 0.7332155477031802\nROC AUC: 0.5917072292875635\nF1-score: 0.6218504950958675\nEvaluating Logistic Regression for Caff:\nAccuracy: 0.734982332155477\nROC AUC: 0.5946724723740934\nF1-score: 0.6227141551459846\nEvaluating Support Vector Machine for Caff:\nAccuracy: 0.734982332155477\nROC AUC: 0.46229237037031146\nF1-score: 0.6227141551459846\nEvaluating Decision Tree for Caff:\nAccuracy: 0.5530035335689046\nROC AUC: 0.49948322788614063\nF1-score: 0.5623668026933374\nEvaluating K-Nearest Neighbors for Caff:\nAccuracy: 0.666077738515901\nROC AUC: 0.5260062495828948\nF1-score: 0.6153157375169742\nEvaluating Naive Bayes for Caff:\nAccuracy: 0.6890459363957597\nROC AUC: 0.5672961717317276\nF1-score: 0.6169230017072541\nEvaluating Gradient Boosting for Caff:\nAccuracy: 0.7190812720848057\nROC AUC: 0.5671025128497683\nF1-score: 0.6259304202098189\nEvaluating AdaBoost for Caff:\nAccuracy: 0.4929328621908127\nROC AUC: 0.4848831332214295\nF1-score: 0.5126501766784451\nEvaluating XGBoost for Caff:\nAccuracy: 0.7102473498233216\nROC AUC: 0.5436981450245058\nF1-score: 0.6331979317020274\nEvaluating Random Forest for Cannabis:\nAccuracy: 0.3957597173144876\nROC AUC: 0.7322971572472026\nF1-score: 0.34073072786062775\nEvaluating Logistic Regression for Cannabis:\nAccuracy: 0.4045936395759717\nROC AUC: 0.7364786248566777\nF1-score: 0.3160977402036804\nEvaluating Support Vector Machine for Cannabis:\nAccuracy: 0.4134275618374558\nROC AUC: 0.7357923122706689\nF1-score: 0.3179321279503898\nEvaluating Decision Tree for Cannabis:\nAccuracy: 0.2703180212014134\nROC AUC: 0.5534860418423363\nF1-score: 0.27453367571893256\nEvaluating K-Nearest Neighbors for Cannabis:\nAccuracy: 0.36395759717314485\nROC AUC: 0.6596474411226\nF1-score: 0.33334294358862226\nEvaluating Naive Bayes for Cannabis:\nAccuracy: 0.36042402826855124\nROC AUC: 0.7269422000036304\nF1-score: 0.3336373920503561\nEvaluating Gradient Boosting for Cannabis:\nAccuracy: 0.3763250883392226\nROC AUC: 0.7267159872913853\nF1-score: 0.33918772675169073\nEvaluating AdaBoost for Cannabis:\nAccuracy: 0.3127208480565371\nROC AUC: 0.6847148483215703\nF1-score: 0.29867916858827154\nEvaluating XGBoost for Cannabis:\nAccuracy: 0.3568904593639576\nROC AUC: 0.7039146351335004\nF1-score: 0.33464629505345983\nEvaluating Random Forest for Choc:\nAccuracy: 0.3957597173144876\nROC AUC: 0.5192522966628008\nF1-score: 0.35925323707850315\nEvaluating Logistic Regression for Choc:\nAccuracy: 0.43109540636042404\nROC AUC: 0.5328391716542077\nF1-score: 0.35016807883810613\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Evaluating Support Vector Machine for Choc:\nAccuracy: 0.42579505300353354\nROC AUC: 0.5636027130844907\nF1-score: 0.3516542532954211\nEvaluating Decision Tree for Choc:\nAccuracy: 0.31448763250883394\nROC AUC: 0.4986486015811558\nF1-score: 0.31519001456342943\nEvaluating K-Nearest Neighbors for Choc:\nAccuracy: 0.36395759717314485\nROC AUC: 0.5094095577671142\nF1-score: 0.35198737966154364\nEvaluating Naive Bayes for Choc:\nAccuracy: 0.34452296819787986\nROC AUC: 0.5243906627985556\nF1-score: 0.25249873994335575\nEvaluating Gradient Boosting for Choc:\nAccuracy: 0.4169611307420495\nROC AUC: 0.6529210165700061\nF1-score: 0.38192499067808555\nEvaluating AdaBoost for Choc:\nAccuracy: 0.41519434628975266\nROC AUC: 0.552385016981018\nF1-score: 0.356871879603893\nEvaluating XGBoost for Choc:\nAccuracy: 0.39399293286219084\nROC AUC: 0.5946916517833494\nF1-score: 0.3652573287530808\nEvaluating Random Forest for Coke:\nAccuracy: 0.5388692579505301\nROC AUC: 0.6892539441453703\nF1-score: 0.4666756969801674\nEvaluating Logistic Regression for Coke:\nAccuracy: 0.5371024734982333\nROC AUC: 0.730860630567283\nF1-score: 0.45426291212920167\nEvaluating Support Vector Machine for Coke:\nAccuracy: 0.5742049469964664\nROC AUC: 0.702196157981928\nF1-score: 0.4744152672874518\nEvaluating Decision Tree for Coke:\nAccuracy: 0.4134275618374558\nROC AUC: 0.5522976712885093\nF1-score: 0.42750952776429907\nEvaluating K-Nearest Neighbors for Coke:\nAccuracy: 0.5176678445229682\nROC AUC: 0.6020289215298972\nF1-score: 0.46181165997224355\nEvaluating Naive Bayes for Coke:\nAccuracy: 0.46466431095406363\nROC AUC: 0.7054577656498042\nF1-score: 0.4689762943958616\nEvaluating Gradient Boosting for Coke:\nAccuracy: 0.5353356890459364\nROC AUC: 0.7133803496826004\nF1-score: 0.48909421211931264\nEvaluating AdaBoost for Coke:\nAccuracy: 0.24558303886925795\nROC AUC: 0.5592235266412593\nF1-score: 0.26392060251017907\nEvaluating XGBoost for Coke:\nAccuracy: 0.5265017667844523\nROC AUC: 0.708384630997559\nF1-score: 0.4855648380584925\nEvaluating Random Forest for Ecstasy:\nAccuracy: 0.5530035335689046\nROC AUC: 0.7142539516335814\nF1-score: 0.48297008871347535\nEvaluating Logistic Regression for Ecstasy:\nAccuracy: 0.5424028268551236\nROC AUC: 0.717525174706007\nF1-score: 0.46204589006558144\nEvaluating Support Vector Machine for Ecstasy:\nAccuracy: 0.558303886925795\nROC AUC: 0.7165974065371802\nF1-score: 0.4559434694796054\nEvaluating Decision Tree for Ecstasy:\nAccuracy: 0.44346289752650175\nROC AUC: 0.556622925753233\nF1-score: 0.44634602759112724\nEvaluating K-Nearest Neighbors for Ecstasy:\nAccuracy: 0.49823321554770317\nROC AUC: 0.6126077776851078\nF1-score: 0.44237218518707533\nEvaluating Naive Bayes for Ecstasy:\nAccuracy: 0.26325088339222613\nROC AUC: 0.6636669171567259\nF1-score: 0.3239954050509161\nEvaluating Gradient Boosting for Ecstasy:\nAccuracy: 0.5318021201413428\nROC AUC: 0.7059939511137888\nF1-score: 0.48232389414691423\nEvaluating AdaBoost for Ecstasy:\nAccuracy: 0.450530035335689\nROC AUC: 0.6257458651088561\nF1-score: 0.4413597062713154\nEvaluating XGBoost for Ecstasy:\nAccuracy: 0.5\nROC AUC: 0.6915563555638693\nF1-score: 0.4573859272983278\nEvaluating Random Forest for Heroin:\nAccuracy: 0.8515901060070671\nROC AUC: 0.645660042619225\nF1-score: 0.7897346632085271\nEvaluating Logistic Regression for Heroin:\nAccuracy: 0.8515901060070671\nROC AUC: 0.7813809524338373\nF1-score: 0.7865676765473402\nEvaluating Support Vector Machine for Heroin:\nAccuracy: 0.8515901060070671\nROC AUC: 0.7419798319613748\nF1-score: 0.7833328837698595\nEvaluating Decision Tree for Heroin:\nAccuracy: 0.7279151943462897\nROC AUC: 0.517926048931253\nF1-score: 0.7392854875073133\nEvaluating K-Nearest Neighbors for Heroin:\nAccuracy: 0.842756183745583\nROC AUC: 0.5930823537698682\nF1-score: 0.7884492687887082\nEvaluating Naive Bayes for Heroin:\nAccuracy: 0.5600706713780919\nROC AUC: 0.7127652672859249\nF1-score: 0.6471307140543079\nEvaluating Gradient Boosting for Heroin:\nAccuracy: 0.8215547703180212\nROC AUC: 0.7192205592321075\nF1-score: 0.7758617675206125\nEvaluating AdaBoost for Heroin:\nAccuracy: 0.3498233215547703\nROC AUC: 0.5861409584523835\nF1-score: 0.452772930561078\nEvaluating XGBoost for Heroin:\nAccuracy: 0.8215547703180212\nROC AUC: 0.7185135204829015\nF1-score: 0.7747832776325407\nEvaluating Random Forest for Ketamine:\nAccuracy: 0.7879858657243817\nROC AUC: 0.6372331972171716\nF1-score: 0.6974845187698981\nEvaluating Logistic Regression for Ketamine:\nAccuracy: 0.7897526501766784\nROC AUC: 0.6487014691162158\nF1-score: 0.6983569428862023\nEvaluating Support Vector Machine for Ketamine:\nAccuracy: 0.7897526501766784\nROC AUC: 0.6680976466851154\nF1-score: 0.6969781532654991\nEvaluating Decision Tree for Ketamine:\nAccuracy: 0.6219081272084805\nROC AUC: 0.5035336269882499\nF1-score: 0.6379002825694672\nEvaluating K-Nearest Neighbors for Ketamine:\nAccuracy: 0.7720848056537103\nROC AUC: 0.5829572835152909\nF1-score: 0.6937123781451427\nEvaluating Naive Bayes for Ketamine:\nAccuracy: 0.5371024734982333\nROC AUC: 0.6155978479894179\nF1-score: 0.6094686479676803\nEvaluating Gradient Boosting for Ketamine:\nAccuracy: 0.765017667844523\nROC AUC: 0.6263255786810362\nF1-score: 0.6922325860860359\nEvaluating AdaBoost for Ketamine:\nAccuracy: 0.7879858657243817\nROC AUC: 0.47985162924293184\nF1-score: 0.6961060908671908\nEvaluating XGBoost for Ketamine:\nAccuracy: 0.7561837455830389\nROC AUC: 0.6345519932049589\nF1-score: 0.6926029661766352\nEvaluating Random Forest for Legalh:\nAccuracy: 0.5936395759717314\nROC AUC: 0.6886612429312233\nF1-score: 0.5249846279244803\nEvaluating Logistic Regression for Legalh:\nAccuracy: 0.6201413427561837\nROC AUC: 0.7528403051538729\nF1-score: 0.5393130826024701\nEvaluating Support Vector Machine for Legalh:\nAccuracy: 0.627208480565371\nROC AUC: 0.698798089569781\nF1-score: 0.5434637084947573\nEvaluating Decision Tree for Legalh:\nAccuracy: 0.49469964664310956\nROC AUC: 0.548596854104389\nF1-score: 0.4996004578651003\nEvaluating K-Nearest Neighbors for Legalh:\nAccuracy: 0.5918727915194346\nROC AUC: 0.608001700871361\nF1-score: 0.5440828082680398\nEvaluating Naive Bayes for Legalh:\nAccuracy: 0.6024734982332155\nROC AUC: 0.7549737661007363\nF1-score: 0.5588910600384593\nEvaluating Gradient Boosting for Legalh:\nAccuracy: 0.6060070671378092\nROC AUC: 0.7176736575031111\nF1-score: 0.5619394435740717\nEvaluating AdaBoost for Legalh:\nAccuracy: 0.5106007067137809\nROC AUC: 0.6449211381781292\nF1-score: 0.5077235249290862\nEvaluating XGBoost for Legalh:\nAccuracy: 0.5706713780918727\nROC AUC: 0.6921255210853927\nF1-score: 0.5364685676137599\nEvaluating Random Forest for LSD:\nAccuracy: 0.5954063604240283\nROC AUC: 0.8017386112325876\nF1-score: 0.5507258603293539\nEvaluating Logistic Regression for LSD:\nAccuracy: 0.5812720848056537\nROC AUC: 0.8061475630015092\nF1-score: 0.5255380889388828\nEvaluating Support Vector Machine for LSD:\nAccuracy: 0.5936395759717314\nROC AUC: 0.8029976815668078\nF1-score: 0.5207709310026698\nEvaluating Decision Tree for LSD:\nAccuracy: 0.49469964664310956\nROC AUC: 0.5593095986185956\nF1-score: 0.4919637814535051\nEvaluating K-Nearest Neighbors for LSD:\nAccuracy: 0.5653710247349824\nROC AUC: 0.6498488679174861\nF1-score: 0.5187435249860425\nEvaluating Naive Bayes for LSD:\nAccuracy: 0.5371024734982333\nROC AUC: 0.7903308598079534\nF1-score: 0.5301393274016034\nEvaluating Gradient Boosting for LSD:\nAccuracy: 0.588339222614841\nROC AUC: 0.7978002376544543\nF1-score: 0.5585803496870456\nEvaluating AdaBoost for LSD:\nAccuracy: 0.450530035335689\nROC AUC: 0.6772380981308981\nF1-score: 0.45406124604280984\nEvaluating XGBoost for LSD:\nAccuracy: 0.5759717314487632\nROC AUC: 0.7886519824007444\nF1-score: 0.5542020332416018\nEvaluating Random Forest for Meth:\nAccuracy: 0.7544169611307421\nROC AUC: 0.736114518276098\nF1-score: 0.6687699928191486\nEvaluating Logistic Regression for Meth:\nAccuracy: 0.7561837455830389\nROC AUC: 0.7467572535708082\nF1-score: 0.6627859648414343\nEvaluating Support Vector Machine for Meth:\nAccuracy: 0.7579505300353356\nROC AUC: 0.7048275130344211\nF1-score: 0.6535895022817266\nEvaluating Decision Tree for Meth:\nAccuracy: 0.6254416961130742\nROC AUC: 0.542259598828781\nF1-score: 0.6463806990056661\nEvaluating K-Nearest Neighbors for Meth:\nAccuracy: 0.7367491166077739\nROC AUC: 0.605695108345813\nF1-score: 0.6645131403149959\nEvaluating Naive Bayes for Meth:\nAccuracy: 0.10070671378091872\nROC AUC: 0.6700224600110157\nF1-score: 0.1488199779419194\nEvaluating Gradient Boosting for Meth:\nAccuracy: 0.7332155477031802\nROC AUC: 0.741091020325068\nF1-score: 0.6790760972324055\nEvaluating AdaBoost for Meth:\nAccuracy: 0.44876325088339225\nROC AUC: 0.5914965659932816\nF1-score: 0.5143316250185231\nEvaluating XGBoost for Meth:\nAccuracy: 0.7243816254416962\nROC AUC: 0.7323779097296003\nF1-score: 0.6743710408838774\nEvaluating Random Forest for Mushrooms:\nAccuracy: 0.5600706713780919\nROC AUC: 0.7196320027925674\nF1-score: 0.5039275281713614\nEvaluating Logistic Regression for Mushrooms:\nAccuracy: 0.5477031802120141\nROC AUC: 0.798337041004423\nF1-score: 0.4882871587015467\nEvaluating Support Vector Machine for Mushrooms:\nAccuracy: 0.5477031802120141\nROC AUC: 0.7448549148171734\nF1-score: 0.4635418367042122\nEvaluating Decision Tree for Mushrooms:\nAccuracy: 0.4045936395759717\nROC AUC: 0.545229743365252\nF1-score: 0.41388852325162984\nEvaluating K-Nearest Neighbors for Mushrooms:\nAccuracy: 0.5212014134275619\nROC AUC: 0.6515535126323587\nF1-score: 0.481020876780594\nEvaluating Naive Bayes for Mushrooms:\nAccuracy: 0.5247349823321554\nROC AUC: 0.7460808840787141\nF1-score: 0.5148250033352818\nEvaluating Gradient Boosting for Mushrooms:\nAccuracy: 0.5424028268551236\nROC AUC: 0.6766601638010641\nF1-score: 0.5143668118009861\nEvaluating AdaBoost for Mushrooms:\nAccuracy: 0.22614840989399293\nROC AUC: 0.5949590296732705\nF1-score: 0.2717469896120977\nEvaluating XGBoost for Mushrooms:\nAccuracy: 0.5141342756183745\nROC AUC: 0.6670424167345959\nF1-score: 0.48610257624981557\nEvaluating Random Forest for Nicotine:\nAccuracy: 0.3657243816254417\nROC AUC: 0.6319597165830478\nF1-score: 0.29782497498468574\nEvaluating Logistic Regression for Nicotine:\nAccuracy: 0.37985865724381623\nROC AUC: 0.6598847375814946\nF1-score: 0.29650352383273737\nEvaluating Support Vector Machine for Nicotine:\nAccuracy: 0.38869257950530034\nROC AUC: 0.6616462262522526\nF1-score: 0.28425174524660635\nEvaluating Decision Tree for Nicotine:\nAccuracy: 0.21554770318021202\nROC AUC: 0.5133892788362838\nF1-score: 0.21773579493706638\nEvaluating K-Nearest Neighbors for Nicotine:\nAccuracy: 0.2950530035335689\nROC AUC: 0.5799534109397103\nF1-score: 0.2754854904167775\nEvaluating Naive Bayes for Nicotine:\nAccuracy: 0.28975265017667845\nROC AUC: 0.6632705778366882\nF1-score: 0.2882173023221724\nEvaluating Gradient Boosting for Nicotine:\nAccuracy: 0.3568904593639576\nROC AUC: 0.6401426360777237\nF1-score: 0.3091988070360519\nEvaluating AdaBoost for Nicotine:\nAccuracy: 0.3286219081272085\nROC AUC: 0.6326128934971892\nF1-score: 0.3036001934409035\nEvaluating XGBoost for Nicotine:\nAccuracy: 0.3409893992932862\nROC AUC: 0.6238033755221032\nF1-score: 0.3108573738611079\nEvaluating Random Forest for VSA:\nAccuracy: 0.7685512367491166\nROC AUC: 0.6661830184788796\nF1-score: 0.6753356551448785\nEvaluating Logistic Regression for VSA:\nAccuracy: 0.765017667844523\nROC AUC: 0.8108962138421507\nF1-score: 0.6699653724409951\nEvaluating Support Vector Machine for VSA:\nAccuracy: 0.7720848056537103\nROC AUC: 0.6168855480575935\nF1-score: 0.6727837688348383\nEvaluating Decision Tree for VSA:\nAccuracy: 0.6254416961130742\nROC AUC: 0.509171248400398\nF1-score: 0.6278397022250857\nEvaluating K-Nearest Neighbors for VSA:\nAccuracy: 0.7491166077738516\nROC AUC: 0.5660634544691167\nF1-score: 0.6850521127178786\nEvaluating Naive Bayes for VSA:\nAccuracy: 0.6819787985865724\nROC AUC: 0.7862449007048223\nF1-score: 0.6647152982203679\nEvaluating Gradient Boosting for VSA:\nAccuracy: 0.7561837455830389\nROC AUC: 0.7190726944134802\nF1-score: 0.6875242366585123\nEvaluating AdaBoost for VSA:\nAccuracy: 0.4363957597173145\nROC AUC: 0.5663829147645257\nF1-score: 0.5004669358909642\nEvaluating XGBoost for VSA:\nAccuracy: 0.7420494699646644\nROC AUC: 0.7507086791546854\nF1-score: 0.6856400082339217\n\nEvaluation results:\n{'Alcohol': {'Random Forest': {'Accuracy': 0.36925795053003535, 'ROC_AUC': 0.5857351703570393, 'F1_score': 0.31426589186025383}, 'Logistic Regression': {'Accuracy': 0.40636042402826855, 'ROC_AUC': 0.6172541829619488, 'F1_score': 0.310497739865071}, 'Support Vector Machine': {'Accuracy': 0.3869257950530035, 'ROC_AUC': 0.5802127661968001, 'F1_score': 0.2755436206806189}, 'Decision Tree': {'Accuracy': 0.3003533568904594, 'ROC_AUC': 0.5085726602691011, 'F1_score': 0.3017817412328392}, 'K-Nearest Neighbors': {'Accuracy': 0.32685512367491165, 'ROC_AUC': 0.5159220011607785, 'F1_score': 0.3146654693284055}, 'Naive Bayes': {'Accuracy': 0.35335689045936397, 'ROC_AUC': 0.5997824650160487, 'F1_score': 0.3091665528914293}, 'Gradient Boosting': {'Accuracy': 0.3745583038869258, 'ROC_AUC': 0.6116545992556315, 'F1_score': 0.32924349774982375}, 'AdaBoost': {'Accuracy': 0.22614840989399293, 'ROC_AUC': 0.5407102565051605, 'F1_score': 0.23637623194961907}, 'XGBoost': {'Accuracy': 0.35335689045936397, 'ROC_AUC': 0.6057705096464858, 'F1_score': 0.32876958133109846}}, 'Amphet': {'Random Forest': {'Accuracy': 0.49469964664310956, 'ROC_AUC': 0.7314909292135056, 'F1_score': 0.3946675706612681}, 'Logistic Regression': {'Accuracy': 0.5265017667844523, 'ROC_AUC': 0.7428295384663594, 'F1_score': 0.4200925489701222}, 'Support Vector Machine': {'Accuracy': 0.519434628975265, 'ROC_AUC': 0.7259130649730554, 'F1_score': 0.3623388851697358}, 'Decision Tree': {'Accuracy': 0.3957597173144876, 'ROC_AUC': 0.5422367120864248, 'F1_score': 0.3948553046461072}, 'K-Nearest Neighbors': {'Accuracy': 0.5, 'ROC_AUC': 0.6272400313037517, 'F1_score': 0.4313601372344664}, 'Naive Bayes': {'Accuracy': 0.4558303886925795, 'ROC_AUC': 0.7417466340772637, 'F1_score': 0.4479150440556291}, 'Gradient Boosting': {'Accuracy': 0.5159010600706714, 'ROC_AUC': 0.7423588871796659, 'F1_score': 0.4452615713609305}, 'AdaBoost': {'Accuracy': 0.3551236749116608, 'ROC_AUC': 0.6027947571176618, 'F1_score': 0.37811717516383697}, 'XGBoost': {'Accuracy': 0.4823321554770318, 'ROC_AUC': 0.7237867159176451, 'F1_score': 0.43219271336640214}}, 'Amyl': {'Random Forest': {'Accuracy': 0.6872791519434629, 'ROC_AUC': 0.6703088296684095, 'F1_score': 0.5936698973681374}, 'Logistic Regression': {'Accuracy': 0.6802120141342756, 'ROC_AUC': 0.7576580046360811, 'F1_score': 0.5740481243939631}, 'Support Vector Machine': {'Accuracy': 0.6943462897526502, 'ROC_AUC': 0.7139373111811473, 'F1_score': 0.5708580143152002}, 'Decision Tree': {'Accuracy': 0.5282685512367491, 'ROC_AUC': 0.525419416009749, 'F1_score': 0.5445422004763901}, 'K-Nearest Neighbors': {'Accuracy': 0.6625441696113075, 'ROC_AUC': 0.5752193494464508, 'F1_score': 0.5899862735947102}, 'Naive Bayes': {'Accuracy': 0.549469964664311, 'ROC_AUC': 0.6569756236110365, 'F1_score': 0.5716189193858844}, 'Gradient Boosting': {'Accuracy': 0.6749116607773852, 'ROC_AUC': 0.7106065844305888, 'F1_score': 0.6093452303122359}, 'AdaBoost': {'Accuracy': 0.6925795053003534, 'ROC_AUC': 0.6159009693678612, 'F1_score': 0.566787403085049}, 'XGBoost': {'Accuracy': 0.6501766784452296, 'ROC_AUC': 0.7191795262528732, 'F1_score': 0.5966127656595741}}, 'Benzos': {'Random Forest': {'Accuracy': 0.5265017667844523, 'ROC_AUC': 0.6898115261010328, 'F1_score': 0.4204883857058052}, 'Logistic Regression': {'Accuracy': 0.5335689045936396, 'ROC_AUC': 0.7193953178359164, 'F1_score': 0.4163979189699522}, 'Support Vector Machine': {'Accuracy': 0.5300353356890459, 'ROC_AUC': 0.7042472177219574, 'F1_score': 0.3737171090049133}, 'Decision Tree': {'Accuracy': 0.3586572438162544, 'ROC_AUC': 0.5174154900622974, 'F1_score': 0.37006623096003444}, 'K-Nearest Neighbors': {'Accuracy': 0.48056537102473496, 'ROC_AUC': 0.6116600454216129, 'F1_score': 0.4027831174287144}, 'Naive Bayes': {'Accuracy': 0.45229681978798586, 'ROC_AUC': 0.6957057840433067, 'F1_score': 0.42251490825870136}, 'Gradient Boosting': {'Accuracy': 0.5106007067137809, 'ROC_AUC': 0.7022465659059639, 'F1_score': 0.43002424542128753}, 'AdaBoost': {'Accuracy': 0.4293286219081272, 'ROC_AUC': 0.6205248729057615, 'F1_score': 0.4085981759479232}, 'XGBoost': {'Accuracy': 0.4876325088339223, 'ROC_AUC': 0.6782073467430341, 'F1_score': 0.4290915114309039}}, 'Caff': {'Random Forest': {'Accuracy': 0.7332155477031802, 'ROC_AUC': 0.5917072292875635, 'F1_score': 0.6218504950958675}, 'Logistic Regression': {'Accuracy': 0.734982332155477, 'ROC_AUC': 0.5946724723740934, 'F1_score': 0.6227141551459846}, 'Support Vector Machine': {'Accuracy': 0.734982332155477, 'ROC_AUC': 0.46229237037031146, 'F1_score': 0.6227141551459846}, 'Decision Tree': {'Accuracy': 0.5530035335689046, 'ROC_AUC': 0.49948322788614063, 'F1_score': 0.5623668026933374}, 'K-Nearest Neighbors': {'Accuracy': 0.666077738515901, 'ROC_AUC': 0.5260062495828948, 'F1_score': 0.6153157375169742}, 'Naive Bayes': {'Accuracy': 0.6890459363957597, 'ROC_AUC': 0.5672961717317276, 'F1_score': 0.6169230017072541}, 'Gradient Boosting': {'Accuracy': 0.7190812720848057, 'ROC_AUC': 0.5671025128497683, 'F1_score': 0.6259304202098189}, 'AdaBoost': {'Accuracy': 0.4929328621908127, 'ROC_AUC': 0.4848831332214295, 'F1_score': 0.5126501766784451}, 'XGBoost': {'Accuracy': 0.7102473498233216, 'ROC_AUC': 0.5436981450245058, 'F1_score': 0.6331979317020274}}, 'Cannabis': {'Random Forest': {'Accuracy': 0.3957597173144876, 'ROC_AUC': 0.7322971572472026, 'F1_score': 0.34073072786062775}, 'Logistic Regression': {'Accuracy': 0.4045936395759717, 'ROC_AUC': 0.7364786248566777, 'F1_score': 0.3160977402036804}, 'Support Vector Machine': {'Accuracy': 0.4134275618374558, 'ROC_AUC': 0.7357923122706689, 'F1_score': 0.3179321279503898}, 'Decision Tree': {'Accuracy': 0.2703180212014134, 'ROC_AUC': 0.5534860418423363, 'F1_score': 0.27453367571893256}, 'K-Nearest Neighbors': {'Accuracy': 0.36395759717314485, 'ROC_AUC': 0.6596474411226, 'F1_score': 0.33334294358862226}, 'Naive Bayes': {'Accuracy': 0.36042402826855124, 'ROC_AUC': 0.7269422000036304, 'F1_score': 0.3336373920503561}, 'Gradient Boosting': {'Accuracy': 0.3763250883392226, 'ROC_AUC': 0.7267159872913853, 'F1_score': 0.33918772675169073}, 'AdaBoost': {'Accuracy': 0.3127208480565371, 'ROC_AUC': 0.6847148483215703, 'F1_score': 0.29867916858827154}, 'XGBoost': {'Accuracy': 0.3568904593639576, 'ROC_AUC': 0.7039146351335004, 'F1_score': 0.33464629505345983}}, 'Choc': {'Random Forest': {'Accuracy': 0.3957597173144876, 'ROC_AUC': 0.5192522966628008, 'F1_score': 0.35925323707850315}, 'Logistic Regression': {'Accuracy': 0.43109540636042404, 'ROC_AUC': 0.5328391716542077, 'F1_score': 0.35016807883810613}, 'Support Vector Machine': {'Accuracy': 0.42579505300353354, 'ROC_AUC': 0.5636027130844907, 'F1_score': 0.3516542532954211}, 'Decision Tree': {'Accuracy': 0.31448763250883394, 'ROC_AUC': 0.4986486015811558, 'F1_score': 0.31519001456342943}, 'K-Nearest Neighbors': {'Accuracy': 0.36395759717314485, 'ROC_AUC': 0.5094095577671142, 'F1_score': 0.35198737966154364}, 'Naive Bayes': {'Accuracy': 0.34452296819787986, 'ROC_AUC': 0.5243906627985556, 'F1_score': 0.25249873994335575}, 'Gradient Boosting': {'Accuracy': 0.4169611307420495, 'ROC_AUC': 0.6529210165700061, 'F1_score': 0.38192499067808555}, 'AdaBoost': {'Accuracy': 0.41519434628975266, 'ROC_AUC': 0.552385016981018, 'F1_score': 0.356871879603893}, 'XGBoost': {'Accuracy': 0.39399293286219084, 'ROC_AUC': 0.5946916517833494, 'F1_score': 0.3652573287530808}}, 'Coke': {'Random Forest': {'Accuracy': 0.5388692579505301, 'ROC_AUC': 0.6892539441453703, 'F1_score': 0.4666756969801674}, 'Logistic Regression': {'Accuracy': 0.5371024734982333, 'ROC_AUC': 0.730860630567283, 'F1_score': 0.45426291212920167}, 'Support Vector Machine': {'Accuracy': 0.5742049469964664, 'ROC_AUC': 0.702196157981928, 'F1_score': 0.4744152672874518}, 'Decision Tree': {'Accuracy': 0.4134275618374558, 'ROC_AUC': 0.5522976712885093, 'F1_score': 0.42750952776429907}, 'K-Nearest Neighbors': {'Accuracy': 0.5176678445229682, 'ROC_AUC': 0.6020289215298972, 'F1_score': 0.46181165997224355}, 'Naive Bayes': {'Accuracy': 0.46466431095406363, 'ROC_AUC': 0.7054577656498042, 'F1_score': 0.4689762943958616}, 'Gradient Boosting': {'Accuracy': 0.5353356890459364, 'ROC_AUC': 0.7133803496826004, 'F1_score': 0.48909421211931264}, 'AdaBoost': {'Accuracy': 0.24558303886925795, 'ROC_AUC': 0.5592235266412593, 'F1_score': 0.26392060251017907}, 'XGBoost': {'Accuracy': 0.5265017667844523, 'ROC_AUC': 0.708384630997559, 'F1_score': 0.4855648380584925}}, 'Ecstasy': {'Random Forest': {'Accuracy': 0.5530035335689046, 'ROC_AUC': 0.7142539516335814, 'F1_score': 0.48297008871347535}, 'Logistic Regression': {'Accuracy': 0.5424028268551236, 'ROC_AUC': 0.717525174706007, 'F1_score': 0.46204589006558144}, 'Support Vector Machine': {'Accuracy': 0.558303886925795, 'ROC_AUC': 0.7165974065371802, 'F1_score': 0.4559434694796054}, 'Decision Tree': {'Accuracy': 0.44346289752650175, 'ROC_AUC': 0.556622925753233, 'F1_score': 0.44634602759112724}, 'K-Nearest Neighbors': {'Accuracy': 0.49823321554770317, 'ROC_AUC': 0.6126077776851078, 'F1_score': 0.44237218518707533}, 'Naive Bayes': {'Accuracy': 0.26325088339222613, 'ROC_AUC': 0.6636669171567259, 'F1_score': 0.3239954050509161}, 'Gradient Boosting': {'Accuracy': 0.5318021201413428, 'ROC_AUC': 0.7059939511137888, 'F1_score': 0.48232389414691423}, 'AdaBoost': {'Accuracy': 0.450530035335689, 'ROC_AUC': 0.6257458651088561, 'F1_score': 0.4413597062713154}, 'XGBoost': {'Accuracy': 0.5, 'ROC_AUC': 0.6915563555638693, 'F1_score': 0.4573859272983278}}, 'Heroin': {'Random Forest': {'Accuracy': 0.8515901060070671, 'ROC_AUC': 0.645660042619225, 'F1_score': 0.7897346632085271}, 'Logistic Regression': {'Accuracy': 0.8515901060070671, 'ROC_AUC': 0.7813809524338373, 'F1_score': 0.7865676765473402}, 'Support Vector Machine': {'Accuracy': 0.8515901060070671, 'ROC_AUC': 0.7419798319613748, 'F1_score': 0.7833328837698595}, 'Decision Tree': {'Accuracy': 0.7279151943462897, 'ROC_AUC': 0.517926048931253, 'F1_score': 0.7392854875073133}, 'K-Nearest Neighbors': {'Accuracy': 0.842756183745583, 'ROC_AUC': 0.5930823537698682, 'F1_score': 0.7884492687887082}, 'Naive Bayes': {'Accuracy': 0.5600706713780919, 'ROC_AUC': 0.7127652672859249, 'F1_score': 0.6471307140543079}, 'Gradient Boosting': {'Accuracy': 0.8215547703180212, 'ROC_AUC': 0.7192205592321075, 'F1_score': 0.7758617675206125}, 'AdaBoost': {'Accuracy': 0.3498233215547703, 'ROC_AUC': 0.5861409584523835, 'F1_score': 0.452772930561078}, 'XGBoost': {'Accuracy': 0.8215547703180212, 'ROC_AUC': 0.7185135204829015, 'F1_score': 0.7747832776325407}}, 'Ketamine': {'Random Forest': {'Accuracy': 0.7879858657243817, 'ROC_AUC': 0.6372331972171716, 'F1_score': 0.6974845187698981}, 'Logistic Regression': {'Accuracy': 0.7897526501766784, 'ROC_AUC': 0.6487014691162158, 'F1_score': 0.6983569428862023}, 'Support Vector Machine': {'Accuracy': 0.7897526501766784, 'ROC_AUC': 0.6680976466851154, 'F1_score': 0.6969781532654991}, 'Decision Tree': {'Accuracy': 0.6219081272084805, 'ROC_AUC': 0.5035336269882499, 'F1_score': 0.6379002825694672}, 'K-Nearest Neighbors': {'Accuracy': 0.7720848056537103, 'ROC_AUC': 0.5829572835152909, 'F1_score': 0.6937123781451427}, 'Naive Bayes': {'Accuracy': 0.5371024734982333, 'ROC_AUC': 0.6155978479894179, 'F1_score': 0.6094686479676803}, 'Gradient Boosting': {'Accuracy': 0.765017667844523, 'ROC_AUC': 0.6263255786810362, 'F1_score': 0.6922325860860359}, 'AdaBoost': {'Accuracy': 0.7879858657243817, 'ROC_AUC': 0.47985162924293184, 'F1_score': 0.6961060908671908}, 'XGBoost': {'Accuracy': 0.7561837455830389, 'ROC_AUC': 0.6345519932049589, 'F1_score': 0.6926029661766352}}, 'Legalh': {'Random Forest': {'Accuracy': 0.5936395759717314, 'ROC_AUC': 0.6886612429312233, 'F1_score': 0.5249846279244803}, 'Logistic Regression': {'Accuracy': 0.6201413427561837, 'ROC_AUC': 0.7528403051538729, 'F1_score': 0.5393130826024701}, 'Support Vector Machine': {'Accuracy': 0.627208480565371, 'ROC_AUC': 0.698798089569781, 'F1_score': 0.5434637084947573}, 'Decision Tree': {'Accuracy': 0.49469964664310956, 'ROC_AUC': 0.548596854104389, 'F1_score': 0.4996004578651003}, 'K-Nearest Neighbors': {'Accuracy': 0.5918727915194346, 'ROC_AUC': 0.608001700871361, 'F1_score': 0.5440828082680398}, 'Naive Bayes': {'Accuracy': 0.6024734982332155, 'ROC_AUC': 0.7549737661007363, 'F1_score': 0.5588910600384593}, 'Gradient Boosting': {'Accuracy': 0.6060070671378092, 'ROC_AUC': 0.7176736575031111, 'F1_score': 0.5619394435740717}, 'AdaBoost': {'Accuracy': 0.5106007067137809, 'ROC_AUC': 0.6449211381781292, 'F1_score': 0.5077235249290862}, 'XGBoost': {'Accuracy': 0.5706713780918727, 'ROC_AUC': 0.6921255210853927, 'F1_score': 0.5364685676137599}}, 'LSD': {'Random Forest': {'Accuracy': 0.5954063604240283, 'ROC_AUC': 0.8017386112325876, 'F1_score': 0.5507258603293539}, 'Logistic Regression': {'Accuracy': 0.5812720848056537, 'ROC_AUC': 0.8061475630015092, 'F1_score': 0.5255380889388828}, 'Support Vector Machine': {'Accuracy': 0.5936395759717314, 'ROC_AUC': 0.8029976815668078, 'F1_score': 0.5207709310026698}, 'Decision Tree': {'Accuracy': 0.49469964664310956, 'ROC_AUC': 0.5593095986185956, 'F1_score': 0.4919637814535051}, 'K-Nearest Neighbors': {'Accuracy': 0.5653710247349824, 'ROC_AUC': 0.6498488679174861, 'F1_score': 0.5187435249860425}, 'Naive Bayes': {'Accuracy': 0.5371024734982333, 'ROC_AUC': 0.7903308598079534, 'F1_score': 0.5301393274016034}, 'Gradient Boosting': {'Accuracy': 0.588339222614841, 'ROC_AUC': 0.7978002376544543, 'F1_score': 0.5585803496870456}, 'AdaBoost': {'Accuracy': 0.450530035335689, 'ROC_AUC': 0.6772380981308981, 'F1_score': 0.45406124604280984}, 'XGBoost': {'Accuracy': 0.5759717314487632, 'ROC_AUC': 0.7886519824007444, 'F1_score': 0.5542020332416018}}, 'Meth': {'Random Forest': {'Accuracy': 0.7544169611307421, 'ROC_AUC': 0.736114518276098, 'F1_score': 0.6687699928191486}, 'Logistic Regression': {'Accuracy': 0.7561837455830389, 'ROC_AUC': 0.7467572535708082, 'F1_score': 0.6627859648414343}, 'Support Vector Machine': {'Accuracy': 0.7579505300353356, 'ROC_AUC': 0.7048275130344211, 'F1_score': 0.6535895022817266}, 'Decision Tree': {'Accuracy': 0.6254416961130742, 'ROC_AUC': 0.542259598828781, 'F1_score': 0.6463806990056661}, 'K-Nearest Neighbors': {'Accuracy': 0.7367491166077739, 'ROC_AUC': 0.605695108345813, 'F1_score': 0.6645131403149959}, 'Naive Bayes': {'Accuracy': 0.10070671378091872, 'ROC_AUC': 0.6700224600110157, 'F1_score': 0.1488199779419194}, 'Gradient Boosting': {'Accuracy': 0.7332155477031802, 'ROC_AUC': 0.741091020325068, 'F1_score': 0.6790760972324055}, 'AdaBoost': {'Accuracy': 0.44876325088339225, 'ROC_AUC': 0.5914965659932816, 'F1_score': 0.5143316250185231}, 'XGBoost': {'Accuracy': 0.7243816254416962, 'ROC_AUC': 0.7323779097296003, 'F1_score': 0.6743710408838774}}, 'Mushrooms': {'Random Forest': {'Accuracy': 0.5600706713780919, 'ROC_AUC': 0.7196320027925674, 'F1_score': 0.5039275281713614}, 'Logistic Regression': {'Accuracy': 0.5477031802120141, 'ROC_AUC': 0.798337041004423, 'F1_score': 0.4882871587015467}, 'Support Vector Machine': {'Accuracy': 0.5477031802120141, 'ROC_AUC': 0.7448549148171734, 'F1_score': 0.4635418367042122}, 'Decision Tree': {'Accuracy': 0.4045936395759717, 'ROC_AUC': 0.545229743365252, 'F1_score': 0.41388852325162984}, 'K-Nearest Neighbors': {'Accuracy': 0.5212014134275619, 'ROC_AUC': 0.6515535126323587, 'F1_score': 0.481020876780594}, 'Naive Bayes': {'Accuracy': 0.5247349823321554, 'ROC_AUC': 0.7460808840787141, 'F1_score': 0.5148250033352818}, 'Gradient Boosting': {'Accuracy': 0.5424028268551236, 'ROC_AUC': 0.6766601638010641, 'F1_score': 0.5143668118009861}, 'AdaBoost': {'Accuracy': 0.22614840989399293, 'ROC_AUC': 0.5949590296732705, 'F1_score': 0.2717469896120977}, 'XGBoost': {'Accuracy': 0.5141342756183745, 'ROC_AUC': 0.6670424167345959, 'F1_score': 0.48610257624981557}}, 'Nicotine': {'Random Forest': {'Accuracy': 0.3657243816254417, 'ROC_AUC': 0.6319597165830478, 'F1_score': 0.29782497498468574}, 'Logistic Regression': {'Accuracy': 0.37985865724381623, 'ROC_AUC': 0.6598847375814946, 'F1_score': 0.29650352383273737}, 'Support Vector Machine': {'Accuracy': 0.38869257950530034, 'ROC_AUC': 0.6616462262522526, 'F1_score': 0.28425174524660635}, 'Decision Tree': {'Accuracy': 0.21554770318021202, 'ROC_AUC': 0.5133892788362838, 'F1_score': 0.21773579493706638}, 'K-Nearest Neighbors': {'Accuracy': 0.2950530035335689, 'ROC_AUC': 0.5799534109397103, 'F1_score': 0.2754854904167775}, 'Naive Bayes': {'Accuracy': 0.28975265017667845, 'ROC_AUC': 0.6632705778366882, 'F1_score': 0.2882173023221724}, 'Gradient Boosting': {'Accuracy': 0.3568904593639576, 'ROC_AUC': 0.6401426360777237, 'F1_score': 0.3091988070360519}, 'AdaBoost': {'Accuracy': 0.3286219081272085, 'ROC_AUC': 0.6326128934971892, 'F1_score': 0.3036001934409035}, 'XGBoost': {'Accuracy': 0.3409893992932862, 'ROC_AUC': 0.6238033755221032, 'F1_score': 0.3108573738611079}}, 'VSA': {'Random Forest': {'Accuracy': 0.7685512367491166, 'ROC_AUC': 0.6661830184788796, 'F1_score': 0.6753356551448785}, 'Logistic Regression': {'Accuracy': 0.765017667844523, 'ROC_AUC': 0.8108962138421507, 'F1_score': 0.6699653724409951}, 'Support Vector Machine': {'Accuracy': 0.7720848056537103, 'ROC_AUC': 0.6168855480575935, 'F1_score': 0.6727837688348383}, 'Decision Tree': {'Accuracy': 0.6254416961130742, 'ROC_AUC': 0.509171248400398, 'F1_score': 0.6278397022250857}, 'K-Nearest Neighbors': {'Accuracy': 0.7491166077738516, 'ROC_AUC': 0.5660634544691167, 'F1_score': 0.6850521127178786}, 'Naive Bayes': {'Accuracy': 0.6819787985865724, 'ROC_AUC': 0.7862449007048223, 'F1_score': 0.6647152982203679}, 'Gradient Boosting': {'Accuracy': 0.7561837455830389, 'ROC_AUC': 0.7190726944134802, 'F1_score': 0.6875242366585123}, 'AdaBoost': {'Accuracy': 0.4363957597173145, 'ROC_AUC': 0.5663829147645257, 'F1_score': 0.5004669358909642}, 'XGBoost': {'Accuracy': 0.7420494699646644, 'ROC_AUC': 0.7507086791546854, 'F1_score': 0.6856400082339217}}}\n","output_type":"stream"}]},{"cell_type":"code","source":"\n# Evaluate each algorithm for the 'Crack' column\nfor algorithm_name, model in algorithms.items():\n    # Create and train the model\n    model.fit(X_train, y_train)\n\n    # Predict probabilities for the test set\n    y_pred_proba = model.predict_proba(X_test)\n\n    # Predict labels for the test set\n    y_pred = model.predict(X_test)\n\n    # Calculate evaluation metrics\n    accuracy = accuracy_score(y_test, y_pred)\n    roc_auc = roc_auc_score(y_test, y_pred_proba, multi_class='ovr')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n\n    # Print evaluation metrics\n    print(f\"Evaluating {algorithm_name} for Crack:\")\n    print(f\"Accuracy: {accuracy}\")\n    print(f\"ROC AUC: {roc_auc}\")\n    print(f\"F1-score: {f1}\")\n    \n    # Store evaluation metrics in the dictionary\n    if \"Crack\" not in evaluation_results:\n        evaluation_results['Crack'] = {}\n    evaluation_results['Crack'][algorithm_name] = {'Accuracy': accuracy, 'ROC_AUC': roc_auc, 'F1_score': f1}\n\n    # Print the evaluation results for the 'Crack' column\nprint(\"\\nEvaluation results for Crack:\")\nprint(evaluation_results['Crack'])\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:47:54.741603Z","iopub.execute_input":"2024-04-30T04:47:54.742329Z","iopub.status.idle":"2024-04-30T04:47:58.918561Z","shell.execute_reply.started":"2024-04-30T04:47:54.742291Z","shell.execute_reply":"2024-04-30T04:47:58.917585Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stdout","text":"Evaluating Random Forest for Crack:\nAccuracy: 0.7667844522968198\nROC AUC: 0.7432605865348659\nF1-score: 0.6715126365805816\nEvaluating Logistic Regression for Crack:\nAccuracy: 0.765017667844523\nROC AUC: 0.8108962138421507\nF1-score: 0.6699653724409951\nEvaluating Support Vector Machine for Crack:\nAccuracy: 0.7720848056537103\nROC AUC: 0.5935675037696713\nF1-score: 0.6727837688348383\nEvaluating Decision Tree for Crack:\nAccuracy: 0.6236749116607774\nROC AUC: 0.5122850336603654\nF1-score: 0.6268132845932332\nEvaluating K-Nearest Neighbors for Crack:\nAccuracy: 0.7491166077738516\nROC AUC: 0.5660634544691167\nF1-score: 0.6850521127178786\nEvaluating Naive Bayes for Crack:\nAccuracy: 0.6819787985865724\nROC AUC: 0.7862449007048223\nF1-score: 0.6647152982203679\nEvaluating Gradient Boosting for Crack:\nAccuracy: 0.7579505300353356\nROC AUC: 0.7195912641792142\nF1-score: 0.6903552886033141\nEvaluating AdaBoost for Crack:\nAccuracy: 0.4363957597173145\nROC AUC: 0.5663829147645257\nF1-score: 0.5004669358909642\nEvaluating XGBoost for Crack:\nAccuracy: 0.7420494699646644\nROC AUC: 0.7507086791546854\nF1-score: 0.6856400082339217\n\nEvaluation results for Crack:\n{'Random Forest': {'Accuracy': 0.7667844522968198, 'ROC_AUC': 0.7432605865348659, 'F1_score': 0.6715126365805816}, 'Logistic Regression': {'Accuracy': 0.765017667844523, 'ROC_AUC': 0.8108962138421507, 'F1_score': 0.6699653724409951}, 'Support Vector Machine': {'Accuracy': 0.7720848056537103, 'ROC_AUC': 0.5935675037696713, 'F1_score': 0.6727837688348383}, 'Decision Tree': {'Accuracy': 0.6236749116607774, 'ROC_AUC': 0.5122850336603654, 'F1_score': 0.6268132845932332}, 'K-Nearest Neighbors': {'Accuracy': 0.7491166077738516, 'ROC_AUC': 0.5660634544691167, 'F1_score': 0.6850521127178786}, 'Naive Bayes': {'Accuracy': 0.6819787985865724, 'ROC_AUC': 0.7862449007048223, 'F1_score': 0.6647152982203679}, 'Gradient Boosting': {'Accuracy': 0.7579505300353356, 'ROC_AUC': 0.7195912641792142, 'F1_score': 0.6903552886033141}, 'AdaBoost': {'Accuracy': 0.4363957597173145, 'ROC_AUC': 0.5663829147645257, 'F1_score': 0.5004669358909642}, 'XGBoost': {'Accuracy': 0.7420494699646644, 'ROC_AUC': 0.7507086791546854, 'F1_score': 0.6856400082339217}}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## With CV","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, f1_score\nimport numpy as np\n\n# Define the list of classification algorithms to evaluate\nalgorithms = {\n    'Random Forest': RandomForestClassifier(),\n    'Logistic Regression': LogisticRegression(),\n    'Support Vector Machine': SVC(probability=True),\n    'Decision Tree': DecisionTreeClassifier(),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Naive Bayes': GaussianNB(),\n    'Gradient Boosting': GradientBoostingClassifier(),\n    'AdaBoost': AdaBoostClassifier(),\n    'XGBoost': XGBClassifier()\n}\n\n# Initialize the dictionary to store evaluation results\nevaluation_results_kfold = {}\n\n# Define number of folds for cross-validation\nnum_folds = 5\n\n# Define cross-validation strategy\ncv_strategy = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=42)\n\nfor i in y_toPred:\n    y = y_toPred[i]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\n    \n    for algorithm_name, model in algorithms.items():\n        # Cross-validation scores\n        cv_accuracy = cross_val_score(model, X_train, y_train, cv=cv_strategy, scoring='accuracy')\n        cv_roc_auc = cross_val_score(model, X_train, y_train, cv=cv_strategy, scoring='roc_auc_ovr')\n        cv_f1 = cross_val_score(model, X_train, y_train, cv=cv_strategy, scoring='f1_weighted')\n\n        # Print cross-validation scores\n        print(f\"Cross-validation scores for {algorithm_name} ({i}):\")\n        print(f\"Accuracy: {np.mean(cv_accuracy)}\")\n        print(f\"ROC AUC: {np.mean(cv_roc_auc)}\")\n        print(f\"F1-score: {np.mean(cv_f1)}\")\n\n        # Store cross-validation scores in the dictionary\n        if i not in evaluation_results_kfold:\n            evaluation_results_kfold[i] = {}\n        evaluation_results_kfold[i][algorithm_name] = {\n            'CV_Accuracy': np.mean(cv_accuracy),\n            'CV_ROC_AUC': np.mean(cv_roc_auc),\n            'CV_F1_score': np.mean(cv_f1)\n        }\n\n# Print the evaluation results\nprint(\"\\nEvaluation results:\")\nprint(evaluation_results_kfold)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T04:47:58.920323Z","iopub.execute_input":"2024-04-30T04:47:58.921036Z","iopub.status.idle":"2024-04-30T05:02:51.601209Z","shell.execute_reply.started":"2024-04-30T04:47:58.921001Z","shell.execute_reply":"2024-04-30T05:02:51.600234Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"Cross-validation scores for Random Forest (Alcohol):\nAccuracy: 0.38817548104620353\nROC AUC: 0.6024297374232644\nF1-score: 0.31025072013472454\nCross-validation scores for Logistic Regression (Alcohol):\nAccuracy: 0.3987988247493951\nROC AUC: 0.6393817584638157\nF1-score: 0.3064922531574758\nCross-validation scores for Support Vector Machine (Alcohol):\nAccuracy: 0.40331547413296465\nROC AUC: 0.6213365943125343\nF1-score: 0.2907283327783044\nCross-validation scores for Decision Tree (Alcohol):\nAccuracy: 0.28128816683949764\nROC AUC: 0.5108164299244267\nF1-score: 0.29184404694732147\nCross-validation scores for K-Nearest Neighbors (Alcohol):\nAccuracy: 0.3199389330568038\nROC AUC: 0.5449742162371234\nF1-score: 0.29875947096887245\nCross-validation scores for Naive Bayes (Alcohol):\nAccuracy: 0.36848427238161074\nROC AUC: 0.6164581901202114\nF1-score: 0.32631621978767045\nCross-validation scores for Gradient Boosting (Alcohol):\nAccuracy: 0.3783183546491531\nROC AUC: 0.6246212585338462\nF1-score: 0.3315581910329865\nCross-validation scores for AdaBoost (Alcohol):\nAccuracy: 0.25703134001613087\nROC AUC: 0.584104067659864\nF1-score: 0.2513469681794141\nCross-validation scores for XGBoost (Alcohol):\nAccuracy: 0.3351019702730729\nROC AUC: 0.6243705107328583\nF1-score: 0.3008380074441168\nCross-validation scores for Random Forest (Amphet):\nAccuracy: 0.5049400852632793\nROC AUC: 0.7259613723262366\nF1-score: 0.4199862103481501\nCross-validation scores for Logistic Regression (Amphet):\nAccuracy: 0.491312363175481\nROC AUC: 0.742990426260252\nF1-score: 0.3974624473367467\nCross-validation scores for Support Vector Machine (Amphet):\nAccuracy: 0.5155461458693398\nROC AUC: 0.7278506925675488\nF1-score: 0.36264107724586264\nCross-validation scores for Decision Tree (Amphet):\nAccuracy: 0.3783356377462842\nROC AUC: 0.5385604623025015\nF1-score: 0.37733281668980456\nCross-validation scores for K-Nearest Neighbors (Amphet):\nAccuracy: 0.4609718861620003\nROC AUC: 0.6332482114997254\nF1-score: 0.39370506773307884\nCross-validation scores for Naive Bayes (Amphet):\nAccuracy: 0.45262703076391286\nROC AUC: 0.7475854674269324\nF1-score: 0.44859393837422357\nCross-validation scores for Gradient Boosting (Amphet):\nAccuracy: 0.4966009908975688\nROC AUC: 0.7304278632499969\nF1-score: 0.43699517550013606\nCross-validation scores for AdaBoost (Amphet):\nAccuracy: 0.3259764949879019\nROC AUC: 0.6325482862644807\nF1-score: 0.34823522796507084\nCross-validation scores for XGBoost (Amphet):\nAccuracy: 0.4837135614702155\nROC AUC: 0.7129162860580187\nF1-score: 0.4383499988353378\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Random Forest (Amyl):\nAccuracy: 0.6974939509160042\nROC AUC: nan\nF1-score: 0.6038006015047548\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Logistic Regression (Amyl):\nAccuracy: 0.6838633483120174\nROC AUC: nan\nF1-score: 0.5885505907788756\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Support Vector Machine (Amyl):\nAccuracy: 0.6929484963705497\nROC AUC: nan\nF1-score: 0.5696154570918239\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Decision Tree (Amyl):\nAccuracy: 0.5572387371817029\nROC AUC: nan\nF1-score: 0.5528796855918612\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for K-Nearest Neighbors (Amyl):\nAccuracy: 0.6807984790874524\nROC AUC: nan\nF1-score: 0.6045348472331047\nCross-validation scores for Naive Bayes (Amyl):\nAccuracy: 0.5004090332987671\nROC AUC: nan\nF1-score: 0.5332433414405127\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Gradient Boosting (Amyl):\nAccuracy: 0.6891433344855398\nROC AUC: nan\nF1-score: 0.6281868807863201\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for AdaBoost (Amyl):\nAccuracy: 0.5937060721281254\nROC AUC: nan\nF1-score: 0.516890128086342\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for XGBoost (Amyl):\nAccuracy: 0.6724622652379307\nROC AUC: nan\nF1-score: 0.6208290614889821\nCross-validation scores for Random Forest (Benzos):\nAccuracy: 0.5314667588431847\nROC AUC: 0.6901267292927338\nF1-score: 0.4282600345460515\nCross-validation scores for Logistic Regression (Benzos):\nAccuracy: 0.5284422168452587\nROC AUC: 0.718232377391191\nF1-score: 0.4276557644827122\nCross-validation scores for Support Vector Machine (Benzos):\nAccuracy: 0.5329819103583363\nROC AUC: 0.6965660179699139\nF1-score: 0.38121405915094864\nCross-validation scores for Decision Tree (Benzos):\nAccuracy: 0.386700656757691\nROC AUC: 0.5295009109875979\nF1-score: 0.3924453175953914\nCross-validation scores for K-Nearest Neighbors (Benzos):\nAccuracy: 0.5072012904712524\nROC AUC: 0.6031443759795213\nF1-score: 0.43154660892342056\nCross-validation scores for Naive Bayes (Benzos):\nAccuracy: 0.45036870607212814\nROC AUC: 0.6969888770186026\nF1-score: 0.42954973760247095\nCross-validation scores for Gradient Boosting (Benzos):\nAccuracy: 0.5132676575642354\nROC AUC: 0.6916709240441379\nF1-score: 0.44387239096643133\nCross-validation scores for AdaBoost (Benzos):\nAccuracy: 0.38966182739947\nROC AUC: 0.6153348512819222\nF1-score: 0.3804056223955248\nCross-validation scores for XGBoost (Benzos):\nAccuracy: 0.4988564350731651\nROC AUC: 0.6815256440557373\nF1-score: 0.44570937013355766\nCross-validation scores for Random Forest (Caff):\nAccuracy: 0.7301013941698352\nROC AUC: 0.5584694337109506\nF1-score: 0.621326320567612\nCross-validation scores for Logistic Regression (Caff):\nAccuracy: 0.7346468487152897\nROC AUC: 0.600339483532304\nF1-score: 0.622266194174623\nCross-validation scores for Support Vector Machine (Caff):\nAccuracy: 0.7346468487152897\nROC AUC: 0.5347794251463468\nF1-score: 0.622266194174623\nCross-validation scores for Decision Tree (Caff):\nAccuracy: 0.5390367553865654\nROC AUC: 0.5007623286905971\nF1-score: 0.5581679997757968\nCross-validation scores for K-Nearest Neighbors (Caff):\nAccuracy: 0.6618648461804355\nROC AUC: 0.5043104528851736\nF1-score: 0.598341801076105\nCross-validation scores for Naive Bayes (Caff):\nAccuracy: 0.5656815301301993\nROC AUC: 0.5894308654697585\nF1-score: 0.5085289614567908\nCross-validation scores for Gradient Boosting (Caff):\nAccuracy: 0.7028085032837885\nROC AUC: 0.5137808933325632\nF1-score: 0.6129387920086756\nCross-validation scores for AdaBoost (Caff):\nAccuracy: 0.608854706763452\nROC AUC: 0.5143369962247106\nF1-score: 0.5703108593643149\nCross-validation scores for XGBoost (Caff):\nAccuracy: 0.7028142643161656\nROC AUC: 0.5637482563896749\nF1-score: 0.6214423021431414\nCross-validation scores for Random Forest (Cannabis):\nAccuracy: 0.38742078580481626\nROC AUC: 0.7126856127164982\nF1-score: 0.33236677690747707\nCross-validation scores for Logistic Regression (Cannabis):\nAccuracy: 0.41319564465952296\nROC AUC: 0.7476402403997079\nF1-score: 0.33099966109823803\nCross-validation scores for Support Vector Machine (Cannabis):\nAccuracy: 0.4018377693282636\nROC AUC: 0.7420585601871071\nF1-score: 0.30965371483095405\nCross-validation scores for Decision Tree (Cannabis):\nAccuracy: 0.2941842378154165\nROC AUC: 0.5637081742395177\nF1-score: 0.28873536239725006\nCross-validation scores for K-Nearest Neighbors (Cannabis):\nAccuracy: 0.3358537849982716\nROC AUC: 0.639929789145281\nF1-score: 0.3079914679289321\nCross-validation scores for Naive Bayes (Cannabis):\nAccuracy: 0.364667588431847\nROC AUC: 0.7447658162780705\nF1-score: 0.34331083475952506\nCross-validation scores for Gradient Boosting (Cannabis):\nAccuracy: 0.364684871528978\nROC AUC: 0.6998414442118562\nF1-score: 0.3265009744677196\nCross-validation scores for AdaBoost (Cannabis):\nAccuracy: 0.30097361447171334\nROC AUC: 0.6777444703096943\nF1-score: 0.2925051624367194\nCross-validation scores for XGBoost (Cannabis):\nAccuracy: 0.34951607328033185\nROC AUC: 0.6828102822874036\nF1-score: 0.32473492956935857\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Random Forest (Choc):\nAccuracy: 0.3949850213158198\nROC AUC: nan\nF1-score: 0.36472345018153185\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Logistic Regression (Choc):\nAccuracy: 0.3987786611360756\nROC AUC: nan\nF1-score: 0.32521292696030973\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Support Vector Machine (Choc):\nAccuracy: 0.400299573683604\nROC AUC: nan\nF1-score: 0.33382273680329116\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Decision Tree (Choc):\nAccuracy: 0.35331835464915307\nROC AUC: nan\nF1-score: 0.34853988711448236\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for K-Nearest Neighbors (Choc):\nAccuracy: 0.3730182048623113\nROC AUC: nan\nF1-score: 0.36284156264909045\nCross-validation scores for Naive Bayes (Choc):\nAccuracy: 0.33284364558128815\nROC AUC: nan\nF1-score: 0.26223308778876064\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Gradient Boosting (Choc):\nAccuracy: 0.37524196335983406\nROC AUC: nan\nF1-score: 0.350472182678112\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for AdaBoost (Choc):\nAccuracy: 0.40939048277451323\nROC AUC: nan\nF1-score: 0.36226076745494595\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for XGBoost (Choc):\nAccuracy: 0.36162864385297844\nROC AUC: nan\nF1-score: 0.33645473907186085\nCross-validation scores for Random Forest (Coke):\nAccuracy: 0.5731766332526789\nROC AUC: 0.7018095075995763\nF1-score: 0.4808606184087497\nCross-validation scores for Logistic Regression (Coke):\nAccuracy: 0.5549573683604102\nROC AUC: 0.7253331341113224\nF1-score: 0.4589064914391381\nCross-validation scores for Support Vector Machine (Coke):\nAccuracy: 0.560274801244383\nROC AUC: 0.7083245695449376\nF1-score: 0.4352005536613411\nCross-validation scores for Decision Tree (Coke):\nAccuracy: 0.4366920152091255\nROC AUC: 0.5511808442104008\nF1-score: 0.4520896667689451\nCross-validation scores for K-Nearest Neighbors (Coke):\nAccuracy: 0.5352488765986865\nROC AUC: 0.6121404063989553\nF1-score: 0.4642295635257966\nCross-validation scores for Naive Bayes (Coke):\nAccuracy: 0.4935476437377577\nROC AUC: 0.7175849782681752\nF1-score: 0.48680852223989907\nCross-validation scores for Gradient Boosting (Coke):\nAccuracy: 0.533733725083535\nROC AUC: 0.6950286223852988\nF1-score: 0.47327638527482263\nCross-validation scores for AdaBoost (Coke):\nAccuracy: 0.30706878672658144\nROC AUC: 0.568709577222238\nF1-score: 0.31897256431131726\nCross-validation scores for XGBoost (Coke):\nAccuracy: 0.5519241848139187\nROC AUC: 0.7020992399601133\nF1-score: 0.5038231644535225\nCross-validation scores for Random Forest (Ecstasy):\nAccuracy: 0.5496687406383224\nROC AUC: 0.7055683921947262\nF1-score: 0.46584645879475844\nCross-validation scores for Logistic Regression (Ecstasy):\nAccuracy: 0.5572416176978916\nROC AUC: 0.7320237333794635\nF1-score: 0.4729664296861352\nCross-validation scores for Support Vector Machine (Ecstasy):\nAccuracy: 0.5655749510312248\nROC AUC: 0.7044033855085539\nF1-score: 0.4588901765336109\nCross-validation scores for Decision Tree (Ecstasy):\nAccuracy: 0.4336559511464454\nROC AUC: 0.5375220472041031\nF1-score: 0.43585079617693784\nCross-validation scores for K-Nearest Neighbors (Ecstasy):\nAccuracy: 0.5170670584168683\nROC AUC: 0.5968014257748979\nF1-score: 0.4492988356720137\nCross-validation scores for Naive Bayes (Ecstasy):\nAccuracy: 0.29338633483120174\nROC AUC: 0.6733857546412443\nF1-score: 0.3519723088952528\nCross-validation scores for Gradient Boosting (Ecstasy):\nAccuracy: 0.5246312939278718\nROC AUC: 0.7116719601027329\nF1-score: 0.47273790629221085\nCross-validation scores for AdaBoost (Ecstasy):\nAccuracy: 0.4465289779928563\nROC AUC: 0.6208563736065421\nF1-score: 0.4300455171693171\nCross-validation scores for XGBoost (Ecstasy):\nAccuracy: 0.5238823597188617\nROC AUC: 0.7042065596447887\nF1-score: 0.48100613747544213\nCross-validation scores for Random Forest (Heroin):\nAccuracy: 0.8506452356262242\nROC AUC: 0.7554492252590308\nF1-score: 0.783678886291051\nCross-validation scores for Logistic Regression (Heroin):\nAccuracy: 0.84836674732112\nROC AUC: 0.8180053360861527\nF1-score: 0.781555258578319\nCross-validation scores for Support Vector Machine (Heroin):\nAccuracy: 0.8514028113838\nROC AUC: 0.7526982032908061\nF1-score: 0.7830682532314699\nCross-validation scores for Decision Tree (Heroin):\nAccuracy: 0.7293207742827514\nROC AUC: 0.5428299671389422\nF1-score: 0.7411376656465182\nCross-validation scores for K-Nearest Neighbors (Heroin):\nAccuracy: 0.8400276529554096\nROC AUC: 0.5666023906614258\nF1-score: 0.7824500539462103\nCross-validation scores for Naive Bayes (Heroin):\nAccuracy: 0.6080222375849752\nROC AUC: 0.7721118638127475\nF1-score: 0.6772024012498912\nCross-validation scores for Gradient Boosting (Heroin):\nAccuracy: 0.8339699274109922\nROC AUC: 0.7678826126582907\nF1-score: 0.7907852846868949\nCross-validation scores for AdaBoost (Heroin):\nAccuracy: 0.6832008295886622\nROC AUC: 0.6426179928819871\nF1-score: 0.6949905298674619\nCross-validation scores for XGBoost (Heroin):\nAccuracy: 0.8362541767484734\nROC AUC: 0.7683471162930492\nF1-score: 0.792687514231172\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Random Forest (Ketamine):\nAccuracy: 0.790753543034912\nROC AUC: nan\nF1-score: 0.703876179240867\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Logistic Regression (Ketamine):\nAccuracy: 0.7892355110035718\nROC AUC: nan\nF1-score: 0.6995594390294759\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Support Vector Machine (Ketamine):\nAccuracy: 0.7907506625187234\nROC AUC: nan\nF1-score: 0.6983521452130725\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Decision Tree (Ketamine):\nAccuracy: 0.638351192533702\nROC AUC: nan\nF1-score: 0.651508914776966\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for K-Nearest Neighbors (Ketamine):\nAccuracy: 0.7725486807235856\nROC AUC: nan\nF1-score: 0.6953840524097633\nCross-validation scores for Naive Bayes (Ketamine):\nAccuracy: 0.5054124899181934\nROC AUC: nan\nF1-score: 0.5576086279231371\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Gradient Boosting (Ketamine):\nAccuracy: 0.7695183776932827\nROC AUC: nan\nF1-score: 0.7093057105888496\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for AdaBoost (Ketamine):\nAccuracy: 0.6771142988823597\nROC AUC: nan\nF1-score: 0.6252335384263896\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for XGBoost (Ketamine):\nAccuracy: 0.7695270192418482\nROC AUC: nan\nF1-score: 0.7080983420248556\nCross-validation scores for Random Forest (Legalh):\nAccuracy: 0.630755271344625\nROC AUC: 0.7039893909201644\nF1-score: 0.5593161680284051\nCross-validation scores for Logistic Regression (Legalh):\nAccuracy: 0.6315272496831432\nROC AUC: 0.7539113218037159\nF1-score: 0.5580368175891198\nCross-validation scores for Support Vector Machine (Legalh):\nAccuracy: 0.630772554441756\nROC AUC: 0.7187146718966412\nF1-score: 0.5446027420048773\nCross-validation scores for Decision Tree (Legalh):\nAccuracy: 0.49654626108998734\nROC AUC: 0.5533473980000739\nF1-score: 0.5017063379545232\nCross-validation scores for K-Nearest Neighbors (Legalh):\nAccuracy: 0.5966441986403964\nROC AUC: 0.6406151720999137\nF1-score: 0.5468187137188598\nCross-validation scores for Naive Bayes (Legalh):\nAccuracy: 0.5860525406152782\nROC AUC: 0.7302292489242008\nF1-score: 0.5555313968028172\nCross-validation scores for Gradient Boosting (Legalh):\nAccuracy: 0.5996917847678305\nROC AUC: 0.7024419633188275\nF1-score: 0.555829702051818\nCross-validation scores for AdaBoost (Legalh):\nAccuracy: 0.4943455467219726\nROC AUC: 0.6210653288795227\nF1-score: 0.49757837651986775\nCross-validation scores for XGBoost (Legalh):\nAccuracy: 0.6034566194262012\nROC AUC: 0.7173523526718626\nF1-score: 0.5646976027969758\nCross-validation scores for Random Forest (LSD):\nAccuracy: 0.6141058877750892\nROC AUC: 0.8131176510315289\nF1-score: 0.5513507957815746\nCross-validation scores for Logistic Regression (LSD):\nAccuracy: 0.6019789146215002\nROC AUC: 0.8306048437993659\nF1-score: 0.547643925139604\nCross-validation scores for Support Vector Machine (LSD):\nAccuracy: 0.6004608825901602\nROC AUC: 0.8123620118040167\nF1-score: 0.5281795621619179\nCross-validation scores for Decision Tree (LSD):\nAccuracy: 0.5079617467450167\nROC AUC: 0.57458067323993\nF1-score: 0.5130140020969971\nCross-validation scores for K-Nearest Neighbors (LSD):\nAccuracy: 0.5746802627030764\nROC AUC: 0.6737929761011812\nF1-score: 0.5191983580521089\nCross-validation scores for Naive Bayes (LSD):\nAccuracy: 0.5572877059569075\nROC AUC: 0.7971663721938234\nF1-score: 0.5477755634631439\nCross-validation scores for Gradient Boosting (LSD):\nAccuracy: 0.5883367899527595\nROC AUC: 0.7938882131747264\nF1-score: 0.552391190697324\nCross-validation scores for AdaBoost (LSD):\nAccuracy: 0.27836732342435766\nROC AUC: 0.6857616670025847\nF1-score: 0.24932667885155171\nCross-validation scores for XGBoost (LSD):\nAccuracy: 0.577730729346699\nROC AUC: 0.7929281728555668\nF1-score: 0.5514796833059485\nCross-validation scores for Random Forest (Meth):\nAccuracy: 0.7513307984790875\nROC AUC: 0.7235196021479103\nF1-score: 0.6632871507114602\nCross-validation scores for Logistic Regression (Meth):\nAccuracy: 0.7520883742366633\nROC AUC: 0.7563758435499538\nF1-score: 0.6589804442758442\nCross-validation scores for Support Vector Machine (Meth):\nAccuracy: 0.7581518608134578\nROC AUC: 0.7218849040751784\nF1-score: 0.6538623721072908\nCross-validation scores for Decision Tree (Meth):\nAccuracy: 0.6239774167530822\nROC AUC: 0.5313520275355785\nF1-score: 0.6354827943795911\nCross-validation scores for K-Nearest Neighbors (Meth):\nAccuracy: 0.7429773015324346\nROC AUC: 0.5888401313708803\nF1-score: 0.6704420699495915\nCross-validation scores for Naive Bayes (Meth):\nAccuracy: 0.13718458347735915\nROC AUC: 0.7072056816271799\nF1-score: 0.18567263152020158\nCross-validation scores for Gradient Boosting (Meth):\nAccuracy: 0.7293409378960709\nROC AUC: 0.7294277005186712\nF1-score: 0.6637000951031344\nCross-validation scores for AdaBoost (Meth):\nAccuracy: 0.5011464454430233\nROC AUC: 0.6154701717431956\nF1-score: 0.5393787364046114\nCross-validation scores for XGBoost (Meth):\nAccuracy: 0.7263077543495794\nROC AUC: 0.7307588502553647\nF1-score: 0.6687528590974781\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Random Forest (Mushrooms):\nAccuracy: 0.545843415139993\nROC AUC: nan\nF1-score: 0.4966670012458937\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Logistic Regression (Mushrooms):\nAccuracy: 0.5367669086300265\nROC AUC: nan\nF1-score: 0.46762002255964824\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Support Vector Machine (Mushrooms):\nAccuracy: 0.5534393363290702\nROC AUC: nan\nF1-score: 0.46621524387379154\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Decision Tree (Mushrooms):\nAccuracy: 0.44731247839612853\nROC AUC: nan\nF1-score: 0.45210662672640145\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for K-Nearest Neighbors (Mushrooms):\nAccuracy: 0.5261464454430234\nROC AUC: nan\nF1-score: 0.4745736529862869\nCross-validation scores for Naive Bayes (Mushrooms):\nAccuracy: 0.5193340246572186\nROC AUC: nan\nF1-score: 0.5083130173064775\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for Gradient Boosting (Mushrooms):\nAccuracy: 0.5314437147136767\nROC AUC: nan\nF1-score: 0.49771872731304667\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for AdaBoost (Mushrooms):\nAccuracy: 0.42294619195759875\nROC AUC: nan\nF1-score: 0.38213054564851456\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Cross-validation scores for XGBoost (Mushrooms):\nAccuracy: 0.5102027883396704\nROC AUC: nan\nF1-score: 0.4827987367421002\nCross-validation scores for Random Forest (Nicotine):\nAccuracy: 0.3767801590044936\nROC AUC: 0.6620536153490797\nF1-score: 0.30901409440295097\nCross-validation scores for Logistic Regression (Nicotine):\nAccuracy: 0.4041133771171793\nROC AUC: 0.6916237703299177\nF1-score: 0.31984291164543976\nCross-validation scores for Support Vector Machine (Nicotine):\nAccuracy: 0.39955063947459385\nROC AUC: 0.6867843023614071\nF1-score: 0.2935876966037831\nCross-validation scores for Decision Tree (Nicotine):\nAccuracy: 0.25548450282290586\nROC AUC: 0.5310671154689068\nF1-score: 0.25515070893810665\nCross-validation scores for K-Nearest Neighbors (Nicotine):\nAccuracy: 0.3116171217882245\nROC AUC: 0.5936192550667885\nF1-score: 0.29154570726716733\nCross-validation scores for Naive Bayes (Nicotine):\nAccuracy: 0.3062737642585551\nROC AUC: 0.690798902394499\nF1-score: 0.29757897943514033\nCross-validation scores for Gradient Boosting (Nicotine):\nAccuracy: 0.35177439797211657\nROC AUC: 0.6583212935212837\nF1-score: 0.3132747753322333\nCross-validation scores for AdaBoost (Nicotine):\nAccuracy: 0.29190574951031223\nROC AUC: 0.6117052624638035\nF1-score: 0.2778871228828041\nCross-validation scores for XGBoost (Nicotine):\nAccuracy: 0.34040500057610323\nROC AUC: 0.6387865179384562\nF1-score: 0.3108427500221899\nCross-validation scores for Random Forest (VSA):\nAccuracy: 0.768008987210508\nROC AUC: 0.6510138655184659\nF1-score: 0.6760769567628235\nCross-validation scores for Logistic Regression (VSA):\nAccuracy: 0.7687579214195183\nROC AUC: 0.6683740488428886\nF1-score: 0.6765409682904802\nCross-validation scores for Support Vector Machine (VSA):\nAccuracy: 0.7717968659983869\nROC AUC: 0.7803435661352893\nF1-score: 0.6723920788833654\nCross-validation scores for Decision Tree (VSA):\nAccuracy: 0.6284969466528402\nROC AUC: 0.5284405835904061\nF1-score: 0.6361461945238733\nCross-validation scores for K-Nearest Neighbors (VSA):\nAccuracy: 0.7543611015093905\nROC AUC: 0.6013684324059081\nF1-score: 0.6827500948429519\nCross-validation scores for Naive Bayes (VSA):\nAccuracy: 0.6058215232169605\nROC AUC: 0.6669934138495691\nF1-score: 0.6301394662216198\nCross-validation scores for Gradient Boosting (VSA):\nAccuracy: 0.7391951837769328\nROC AUC: 0.651999852026522\nF1-score: 0.6788577101357562\nCross-validation scores for AdaBoost (VSA):\nAccuracy: 0.6222318239428506\nROC AUC: 0.5451012040273213\nF1-score: 0.5868208347530096\nCross-validation scores for XGBoost (VSA):\nAccuracy: 0.7422197257748588\nROC AUC: 0.6704472605484783\nF1-score: 0.6838760118566326\n\nEvaluation results:\n{'Alcohol': {'Random Forest': {'CV_Accuracy': 0.38817548104620353, 'CV_ROC_AUC': 0.6024297374232644, 'CV_F1_score': 0.31025072013472454}, 'Logistic Regression': {'CV_Accuracy': 0.3987988247493951, 'CV_ROC_AUC': 0.6393817584638157, 'CV_F1_score': 0.3064922531574758}, 'Support Vector Machine': {'CV_Accuracy': 0.40331547413296465, 'CV_ROC_AUC': 0.6213365943125343, 'CV_F1_score': 0.2907283327783044}, 'Decision Tree': {'CV_Accuracy': 0.28128816683949764, 'CV_ROC_AUC': 0.5108164299244267, 'CV_F1_score': 0.29184404694732147}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3199389330568038, 'CV_ROC_AUC': 0.5449742162371234, 'CV_F1_score': 0.29875947096887245}, 'Naive Bayes': {'CV_Accuracy': 0.36848427238161074, 'CV_ROC_AUC': 0.6164581901202114, 'CV_F1_score': 0.32631621978767045}, 'Gradient Boosting': {'CV_Accuracy': 0.3783183546491531, 'CV_ROC_AUC': 0.6246212585338462, 'CV_F1_score': 0.3315581910329865}, 'AdaBoost': {'CV_Accuracy': 0.25703134001613087, 'CV_ROC_AUC': 0.584104067659864, 'CV_F1_score': 0.2513469681794141}, 'XGBoost': {'CV_Accuracy': 0.3351019702730729, 'CV_ROC_AUC': 0.6243705107328583, 'CV_F1_score': 0.3008380074441168}}, 'Amphet': {'Random Forest': {'CV_Accuracy': 0.5049400852632793, 'CV_ROC_AUC': 0.7259613723262366, 'CV_F1_score': 0.4199862103481501}, 'Logistic Regression': {'CV_Accuracy': 0.491312363175481, 'CV_ROC_AUC': 0.742990426260252, 'CV_F1_score': 0.3974624473367467}, 'Support Vector Machine': {'CV_Accuracy': 0.5155461458693398, 'CV_ROC_AUC': 0.7278506925675488, 'CV_F1_score': 0.36264107724586264}, 'Decision Tree': {'CV_Accuracy': 0.3783356377462842, 'CV_ROC_AUC': 0.5385604623025015, 'CV_F1_score': 0.37733281668980456}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.4609718861620003, 'CV_ROC_AUC': 0.6332482114997254, 'CV_F1_score': 0.39370506773307884}, 'Naive Bayes': {'CV_Accuracy': 0.45262703076391286, 'CV_ROC_AUC': 0.7475854674269324, 'CV_F1_score': 0.44859393837422357}, 'Gradient Boosting': {'CV_Accuracy': 0.4966009908975688, 'CV_ROC_AUC': 0.7304278632499969, 'CV_F1_score': 0.43699517550013606}, 'AdaBoost': {'CV_Accuracy': 0.3259764949879019, 'CV_ROC_AUC': 0.6325482862644807, 'CV_F1_score': 0.34823522796507084}, 'XGBoost': {'CV_Accuracy': 0.4837135614702155, 'CV_ROC_AUC': 0.7129162860580187, 'CV_F1_score': 0.4383499988353378}}, 'Amyl': {'Random Forest': {'CV_Accuracy': 0.6974939509160042, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6038006015047548}, 'Logistic Regression': {'CV_Accuracy': 0.6838633483120174, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5885505907788756}, 'Support Vector Machine': {'CV_Accuracy': 0.6929484963705497, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5696154570918239}, 'Decision Tree': {'CV_Accuracy': 0.5572387371817029, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5528796855918612}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.6807984790874524, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6045348472331047}, 'Naive Bayes': {'CV_Accuracy': 0.5004090332987671, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5332433414405127}, 'Gradient Boosting': {'CV_Accuracy': 0.6891433344855398, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6281868807863201}, 'AdaBoost': {'CV_Accuracy': 0.5937060721281254, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.516890128086342}, 'XGBoost': {'CV_Accuracy': 0.6724622652379307, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6208290614889821}}, 'Benzos': {'Random Forest': {'CV_Accuracy': 0.5314667588431847, 'CV_ROC_AUC': 0.6901267292927338, 'CV_F1_score': 0.4282600345460515}, 'Logistic Regression': {'CV_Accuracy': 0.5284422168452587, 'CV_ROC_AUC': 0.718232377391191, 'CV_F1_score': 0.4276557644827122}, 'Support Vector Machine': {'CV_Accuracy': 0.5329819103583363, 'CV_ROC_AUC': 0.6965660179699139, 'CV_F1_score': 0.38121405915094864}, 'Decision Tree': {'CV_Accuracy': 0.386700656757691, 'CV_ROC_AUC': 0.5295009109875979, 'CV_F1_score': 0.3924453175953914}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5072012904712524, 'CV_ROC_AUC': 0.6031443759795213, 'CV_F1_score': 0.43154660892342056}, 'Naive Bayes': {'CV_Accuracy': 0.45036870607212814, 'CV_ROC_AUC': 0.6969888770186026, 'CV_F1_score': 0.42954973760247095}, 'Gradient Boosting': {'CV_Accuracy': 0.5132676575642354, 'CV_ROC_AUC': 0.6916709240441379, 'CV_F1_score': 0.44387239096643133}, 'AdaBoost': {'CV_Accuracy': 0.38966182739947, 'CV_ROC_AUC': 0.6153348512819222, 'CV_F1_score': 0.3804056223955248}, 'XGBoost': {'CV_Accuracy': 0.4988564350731651, 'CV_ROC_AUC': 0.6815256440557373, 'CV_F1_score': 0.44570937013355766}}, 'Caff': {'Random Forest': {'CV_Accuracy': 0.7301013941698352, 'CV_ROC_AUC': 0.5584694337109506, 'CV_F1_score': 0.621326320567612}, 'Logistic Regression': {'CV_Accuracy': 0.7346468487152897, 'CV_ROC_AUC': 0.600339483532304, 'CV_F1_score': 0.622266194174623}, 'Support Vector Machine': {'CV_Accuracy': 0.7346468487152897, 'CV_ROC_AUC': 0.5347794251463468, 'CV_F1_score': 0.622266194174623}, 'Decision Tree': {'CV_Accuracy': 0.5390367553865654, 'CV_ROC_AUC': 0.5007623286905971, 'CV_F1_score': 0.5581679997757968}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.6618648461804355, 'CV_ROC_AUC': 0.5043104528851736, 'CV_F1_score': 0.598341801076105}, 'Naive Bayes': {'CV_Accuracy': 0.5656815301301993, 'CV_ROC_AUC': 0.5894308654697585, 'CV_F1_score': 0.5085289614567908}, 'Gradient Boosting': {'CV_Accuracy': 0.7028085032837885, 'CV_ROC_AUC': 0.5137808933325632, 'CV_F1_score': 0.6129387920086756}, 'AdaBoost': {'CV_Accuracy': 0.608854706763452, 'CV_ROC_AUC': 0.5143369962247106, 'CV_F1_score': 0.5703108593643149}, 'XGBoost': {'CV_Accuracy': 0.7028142643161656, 'CV_ROC_AUC': 0.5637482563896749, 'CV_F1_score': 0.6214423021431414}}, 'Cannabis': {'Random Forest': {'CV_Accuracy': 0.38742078580481626, 'CV_ROC_AUC': 0.7126856127164982, 'CV_F1_score': 0.33236677690747707}, 'Logistic Regression': {'CV_Accuracy': 0.41319564465952296, 'CV_ROC_AUC': 0.7476402403997079, 'CV_F1_score': 0.33099966109823803}, 'Support Vector Machine': {'CV_Accuracy': 0.4018377693282636, 'CV_ROC_AUC': 0.7420585601871071, 'CV_F1_score': 0.30965371483095405}, 'Decision Tree': {'CV_Accuracy': 0.2941842378154165, 'CV_ROC_AUC': 0.5637081742395177, 'CV_F1_score': 0.28873536239725006}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3358537849982716, 'CV_ROC_AUC': 0.639929789145281, 'CV_F1_score': 0.3079914679289321}, 'Naive Bayes': {'CV_Accuracy': 0.364667588431847, 'CV_ROC_AUC': 0.7447658162780705, 'CV_F1_score': 0.34331083475952506}, 'Gradient Boosting': {'CV_Accuracy': 0.364684871528978, 'CV_ROC_AUC': 0.6998414442118562, 'CV_F1_score': 0.3265009744677196}, 'AdaBoost': {'CV_Accuracy': 0.30097361447171334, 'CV_ROC_AUC': 0.6777444703096943, 'CV_F1_score': 0.2925051624367194}, 'XGBoost': {'CV_Accuracy': 0.34951607328033185, 'CV_ROC_AUC': 0.6828102822874036, 'CV_F1_score': 0.32473492956935857}}, 'Choc': {'Random Forest': {'CV_Accuracy': 0.3949850213158198, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.36472345018153185}, 'Logistic Regression': {'CV_Accuracy': 0.3987786611360756, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.32521292696030973}, 'Support Vector Machine': {'CV_Accuracy': 0.400299573683604, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.33382273680329116}, 'Decision Tree': {'CV_Accuracy': 0.35331835464915307, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.34853988711448236}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3730182048623113, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.36284156264909045}, 'Naive Bayes': {'CV_Accuracy': 0.33284364558128815, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.26223308778876064}, 'Gradient Boosting': {'CV_Accuracy': 0.37524196335983406, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.350472182678112}, 'AdaBoost': {'CV_Accuracy': 0.40939048277451323, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.36226076745494595}, 'XGBoost': {'CV_Accuracy': 0.36162864385297844, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.33645473907186085}}, 'Coke': {'Random Forest': {'CV_Accuracy': 0.5731766332526789, 'CV_ROC_AUC': 0.7018095075995763, 'CV_F1_score': 0.4808606184087497}, 'Logistic Regression': {'CV_Accuracy': 0.5549573683604102, 'CV_ROC_AUC': 0.7253331341113224, 'CV_F1_score': 0.4589064914391381}, 'Support Vector Machine': {'CV_Accuracy': 0.560274801244383, 'CV_ROC_AUC': 0.7083245695449376, 'CV_F1_score': 0.4352005536613411}, 'Decision Tree': {'CV_Accuracy': 0.4366920152091255, 'CV_ROC_AUC': 0.5511808442104008, 'CV_F1_score': 0.4520896667689451}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5352488765986865, 'CV_ROC_AUC': 0.6121404063989553, 'CV_F1_score': 0.4642295635257966}, 'Naive Bayes': {'CV_Accuracy': 0.4935476437377577, 'CV_ROC_AUC': 0.7175849782681752, 'CV_F1_score': 0.48680852223989907}, 'Gradient Boosting': {'CV_Accuracy': 0.533733725083535, 'CV_ROC_AUC': 0.6950286223852988, 'CV_F1_score': 0.47327638527482263}, 'AdaBoost': {'CV_Accuracy': 0.30706878672658144, 'CV_ROC_AUC': 0.568709577222238, 'CV_F1_score': 0.31897256431131726}, 'XGBoost': {'CV_Accuracy': 0.5519241848139187, 'CV_ROC_AUC': 0.7020992399601133, 'CV_F1_score': 0.5038231644535225}}, 'Ecstasy': {'Random Forest': {'CV_Accuracy': 0.5496687406383224, 'CV_ROC_AUC': 0.7055683921947262, 'CV_F1_score': 0.46584645879475844}, 'Logistic Regression': {'CV_Accuracy': 0.5572416176978916, 'CV_ROC_AUC': 0.7320237333794635, 'CV_F1_score': 0.4729664296861352}, 'Support Vector Machine': {'CV_Accuracy': 0.5655749510312248, 'CV_ROC_AUC': 0.7044033855085539, 'CV_F1_score': 0.4588901765336109}, 'Decision Tree': {'CV_Accuracy': 0.4336559511464454, 'CV_ROC_AUC': 0.5375220472041031, 'CV_F1_score': 0.43585079617693784}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5170670584168683, 'CV_ROC_AUC': 0.5968014257748979, 'CV_F1_score': 0.4492988356720137}, 'Naive Bayes': {'CV_Accuracy': 0.29338633483120174, 'CV_ROC_AUC': 0.6733857546412443, 'CV_F1_score': 0.3519723088952528}, 'Gradient Boosting': {'CV_Accuracy': 0.5246312939278718, 'CV_ROC_AUC': 0.7116719601027329, 'CV_F1_score': 0.47273790629221085}, 'AdaBoost': {'CV_Accuracy': 0.4465289779928563, 'CV_ROC_AUC': 0.6208563736065421, 'CV_F1_score': 0.4300455171693171}, 'XGBoost': {'CV_Accuracy': 0.5238823597188617, 'CV_ROC_AUC': 0.7042065596447887, 'CV_F1_score': 0.48100613747544213}}, 'Heroin': {'Random Forest': {'CV_Accuracy': 0.8506452356262242, 'CV_ROC_AUC': 0.7554492252590308, 'CV_F1_score': 0.783678886291051}, 'Logistic Regression': {'CV_Accuracy': 0.84836674732112, 'CV_ROC_AUC': 0.8180053360861527, 'CV_F1_score': 0.781555258578319}, 'Support Vector Machine': {'CV_Accuracy': 0.8514028113838, 'CV_ROC_AUC': 0.7526982032908061, 'CV_F1_score': 0.7830682532314699}, 'Decision Tree': {'CV_Accuracy': 0.7293207742827514, 'CV_ROC_AUC': 0.5428299671389422, 'CV_F1_score': 0.7411376656465182}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.8400276529554096, 'CV_ROC_AUC': 0.5666023906614258, 'CV_F1_score': 0.7824500539462103}, 'Naive Bayes': {'CV_Accuracy': 0.6080222375849752, 'CV_ROC_AUC': 0.7721118638127475, 'CV_F1_score': 0.6772024012498912}, 'Gradient Boosting': {'CV_Accuracy': 0.8339699274109922, 'CV_ROC_AUC': 0.7678826126582907, 'CV_F1_score': 0.7907852846868949}, 'AdaBoost': {'CV_Accuracy': 0.6832008295886622, 'CV_ROC_AUC': 0.6426179928819871, 'CV_F1_score': 0.6949905298674619}, 'XGBoost': {'CV_Accuracy': 0.8362541767484734, 'CV_ROC_AUC': 0.7683471162930492, 'CV_F1_score': 0.792687514231172}}, 'Ketamine': {'Random Forest': {'CV_Accuracy': 0.790753543034912, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.703876179240867}, 'Logistic Regression': {'CV_Accuracy': 0.7892355110035718, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6995594390294759}, 'Support Vector Machine': {'CV_Accuracy': 0.7907506625187234, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6983521452130725}, 'Decision Tree': {'CV_Accuracy': 0.638351192533702, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.651508914776966}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.7725486807235856, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6953840524097633}, 'Naive Bayes': {'CV_Accuracy': 0.5054124899181934, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5576086279231371}, 'Gradient Boosting': {'CV_Accuracy': 0.7695183776932827, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.7093057105888496}, 'AdaBoost': {'CV_Accuracy': 0.6771142988823597, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6252335384263896}, 'XGBoost': {'CV_Accuracy': 0.7695270192418482, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.7080983420248556}}, 'Legalh': {'Random Forest': {'CV_Accuracy': 0.630755271344625, 'CV_ROC_AUC': 0.7039893909201644, 'CV_F1_score': 0.5593161680284051}, 'Logistic Regression': {'CV_Accuracy': 0.6315272496831432, 'CV_ROC_AUC': 0.7539113218037159, 'CV_F1_score': 0.5580368175891198}, 'Support Vector Machine': {'CV_Accuracy': 0.630772554441756, 'CV_ROC_AUC': 0.7187146718966412, 'CV_F1_score': 0.5446027420048773}, 'Decision Tree': {'CV_Accuracy': 0.49654626108998734, 'CV_ROC_AUC': 0.5533473980000739, 'CV_F1_score': 0.5017063379545232}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5966441986403964, 'CV_ROC_AUC': 0.6406151720999137, 'CV_F1_score': 0.5468187137188598}, 'Naive Bayes': {'CV_Accuracy': 0.5860525406152782, 'CV_ROC_AUC': 0.7302292489242008, 'CV_F1_score': 0.5555313968028172}, 'Gradient Boosting': {'CV_Accuracy': 0.5996917847678305, 'CV_ROC_AUC': 0.7024419633188275, 'CV_F1_score': 0.555829702051818}, 'AdaBoost': {'CV_Accuracy': 0.4943455467219726, 'CV_ROC_AUC': 0.6210653288795227, 'CV_F1_score': 0.49757837651986775}, 'XGBoost': {'CV_Accuracy': 0.6034566194262012, 'CV_ROC_AUC': 0.7173523526718626, 'CV_F1_score': 0.5646976027969758}}, 'LSD': {'Random Forest': {'CV_Accuracy': 0.6141058877750892, 'CV_ROC_AUC': 0.8131176510315289, 'CV_F1_score': 0.5513507957815746}, 'Logistic Regression': {'CV_Accuracy': 0.6019789146215002, 'CV_ROC_AUC': 0.8306048437993659, 'CV_F1_score': 0.547643925139604}, 'Support Vector Machine': {'CV_Accuracy': 0.6004608825901602, 'CV_ROC_AUC': 0.8123620118040167, 'CV_F1_score': 0.5281795621619179}, 'Decision Tree': {'CV_Accuracy': 0.5079617467450167, 'CV_ROC_AUC': 0.57458067323993, 'CV_F1_score': 0.5130140020969971}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5746802627030764, 'CV_ROC_AUC': 0.6737929761011812, 'CV_F1_score': 0.5191983580521089}, 'Naive Bayes': {'CV_Accuracy': 0.5572877059569075, 'CV_ROC_AUC': 0.7971663721938234, 'CV_F1_score': 0.5477755634631439}, 'Gradient Boosting': {'CV_Accuracy': 0.5883367899527595, 'CV_ROC_AUC': 0.7938882131747264, 'CV_F1_score': 0.552391190697324}, 'AdaBoost': {'CV_Accuracy': 0.27836732342435766, 'CV_ROC_AUC': 0.6857616670025847, 'CV_F1_score': 0.24932667885155171}, 'XGBoost': {'CV_Accuracy': 0.577730729346699, 'CV_ROC_AUC': 0.7929281728555668, 'CV_F1_score': 0.5514796833059485}}, 'Meth': {'Random Forest': {'CV_Accuracy': 0.7513307984790875, 'CV_ROC_AUC': 0.7235196021479103, 'CV_F1_score': 0.6632871507114602}, 'Logistic Regression': {'CV_Accuracy': 0.7520883742366633, 'CV_ROC_AUC': 0.7563758435499538, 'CV_F1_score': 0.6589804442758442}, 'Support Vector Machine': {'CV_Accuracy': 0.7581518608134578, 'CV_ROC_AUC': 0.7218849040751784, 'CV_F1_score': 0.6538623721072908}, 'Decision Tree': {'CV_Accuracy': 0.6239774167530822, 'CV_ROC_AUC': 0.5313520275355785, 'CV_F1_score': 0.6354827943795911}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.7429773015324346, 'CV_ROC_AUC': 0.5888401313708803, 'CV_F1_score': 0.6704420699495915}, 'Naive Bayes': {'CV_Accuracy': 0.13718458347735915, 'CV_ROC_AUC': 0.7072056816271799, 'CV_F1_score': 0.18567263152020158}, 'Gradient Boosting': {'CV_Accuracy': 0.7293409378960709, 'CV_ROC_AUC': 0.7294277005186712, 'CV_F1_score': 0.6637000951031344}, 'AdaBoost': {'CV_Accuracy': 0.5011464454430233, 'CV_ROC_AUC': 0.6154701717431956, 'CV_F1_score': 0.5393787364046114}, 'XGBoost': {'CV_Accuracy': 0.7263077543495794, 'CV_ROC_AUC': 0.7307588502553647, 'CV_F1_score': 0.6687528590974781}}, 'Mushrooms': {'Random Forest': {'CV_Accuracy': 0.545843415139993, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.4966670012458937}, 'Logistic Regression': {'CV_Accuracy': 0.5367669086300265, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.46762002255964824}, 'Support Vector Machine': {'CV_Accuracy': 0.5534393363290702, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.46621524387379154}, 'Decision Tree': {'CV_Accuracy': 0.44731247839612853, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.45210662672640145}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5261464454430234, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.4745736529862869}, 'Naive Bayes': {'CV_Accuracy': 0.5193340246572186, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5083130173064775}, 'Gradient Boosting': {'CV_Accuracy': 0.5314437147136767, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.49771872731304667}, 'AdaBoost': {'CV_Accuracy': 0.42294619195759875, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.38213054564851456}, 'XGBoost': {'CV_Accuracy': 0.5102027883396704, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.4827987367421002}}, 'Nicotine': {'Random Forest': {'CV_Accuracy': 0.3767801590044936, 'CV_ROC_AUC': 0.6620536153490797, 'CV_F1_score': 0.30901409440295097}, 'Logistic Regression': {'CV_Accuracy': 0.4041133771171793, 'CV_ROC_AUC': 0.6916237703299177, 'CV_F1_score': 0.31984291164543976}, 'Support Vector Machine': {'CV_Accuracy': 0.39955063947459385, 'CV_ROC_AUC': 0.6867843023614071, 'CV_F1_score': 0.2935876966037831}, 'Decision Tree': {'CV_Accuracy': 0.25548450282290586, 'CV_ROC_AUC': 0.5310671154689068, 'CV_F1_score': 0.25515070893810665}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3116171217882245, 'CV_ROC_AUC': 0.5936192550667885, 'CV_F1_score': 0.29154570726716733}, 'Naive Bayes': {'CV_Accuracy': 0.3062737642585551, 'CV_ROC_AUC': 0.690798902394499, 'CV_F1_score': 0.29757897943514033}, 'Gradient Boosting': {'CV_Accuracy': 0.35177439797211657, 'CV_ROC_AUC': 0.6583212935212837, 'CV_F1_score': 0.3132747753322333}, 'AdaBoost': {'CV_Accuracy': 0.29190574951031223, 'CV_ROC_AUC': 0.6117052624638035, 'CV_F1_score': 0.2778871228828041}, 'XGBoost': {'CV_Accuracy': 0.34040500057610323, 'CV_ROC_AUC': 0.6387865179384562, 'CV_F1_score': 0.3108427500221899}}, 'VSA': {'Random Forest': {'CV_Accuracy': 0.768008987210508, 'CV_ROC_AUC': 0.6510138655184659, 'CV_F1_score': 0.6760769567628235}, 'Logistic Regression': {'CV_Accuracy': 0.7687579214195183, 'CV_ROC_AUC': 0.6683740488428886, 'CV_F1_score': 0.6765409682904802}, 'Support Vector Machine': {'CV_Accuracy': 0.7717968659983869, 'CV_ROC_AUC': 0.7803435661352893, 'CV_F1_score': 0.6723920788833654}, 'Decision Tree': {'CV_Accuracy': 0.6284969466528402, 'CV_ROC_AUC': 0.5284405835904061, 'CV_F1_score': 0.6361461945238733}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.7543611015093905, 'CV_ROC_AUC': 0.6013684324059081, 'CV_F1_score': 0.6827500948429519}, 'Naive Bayes': {'CV_Accuracy': 0.6058215232169605, 'CV_ROC_AUC': 0.6669934138495691, 'CV_F1_score': 0.6301394662216198}, 'Gradient Boosting': {'CV_Accuracy': 0.7391951837769328, 'CV_ROC_AUC': 0.651999852026522, 'CV_F1_score': 0.6788577101357562}, 'AdaBoost': {'CV_Accuracy': 0.6222318239428506, 'CV_ROC_AUC': 0.5451012040273213, 'CV_F1_score': 0.5868208347530096}, 'XGBoost': {'CV_Accuracy': 0.7422197257748588, 'CV_ROC_AUC': 0.6704472605484783, 'CV_F1_score': 0.6838760118566326}}}\n","output_type":"stream"}]},{"cell_type":"code","source":"for algorithm_name, model in algorithms.items():\n    # Perform cross-validation for the 'Crack' column\n    cv_accuracy = cross_val_score(model, X, df['Crack'], cv=cv_strategy, scoring='accuracy')\n    cv_roc_auc = cross_val_score(model, X, df['Crack'], cv=cv_strategy, scoring='roc_auc_ovr')\n    cv_f1 = cross_val_score(model, X, df['Crack'], cv=cv_strategy, scoring='f1_weighted')\n\n    # Calculate mean evaluation metrics across all folds\n    mean_accuracy = np.mean(cv_accuracy)\n    mean_roc_auc = np.mean(cv_roc_auc)\n    mean_f1 = np.mean(cv_f1)\n\n    # Print mean evaluation metrics\n    print(f\"Mean evaluation metrics for {algorithm_name} (Crack):\")\n    print(f\"Mean Accuracy: {mean_accuracy}\")\n    print(f\"Mean ROC AUC: {mean_roc_auc}\")\n    print(f\"Mean F1-score: {mean_f1}\")\n\n#     evaluation_results_kfold['Crack'] = {}\n#     evaluation_results_kfold['Crack'][algorithm_name] = {\n#             'CV_Accuracy': np.mean(cv_accuracy),\n#             'CV_ROC_AUC': np.mean(cv_roc_auc),\n#             'CV_F1_score': np.mean(cv_f1)\n#         }\n# Store evaluation metrics in the dictionary\n    if \"Crack\" not in evaluation_results:\n        evaluation_results['Crack'] = {}\n    evaluation_results['Crack'][algorithm_name] = {'Accuracy': accuracy, 'ROC_AUC': roc_auc, 'F1_score': f1}\n\nprint(\"\\nEvaluation results:\")\nprint(evaluation_results_kfold)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T05:14:09.105401Z","iopub.execute_input":"2024-04-30T05:14:09.105911Z","iopub.status.idle":"2024-04-30T05:15:09.166794Z","shell.execute_reply.started":"2024-04-30T05:14:09.105871Z","shell.execute_reply":"2024-04-30T05:15:09.165836Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for Random Forest (Crack):\nMean Accuracy: 0.8636604774535808\nMean ROC AUC: nan\nMean F1-score: 0.801867029344369\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for Logistic Regression (Crack):\nMean Accuracy: 0.8604774535809018\nMean ROC AUC: nan\nMean F1-score: 0.7984002755806583\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for Support Vector Machine (Crack):\nMean Accuracy: 0.863129973474801\nMean ROC AUC: nan\nMean F1-score: 0.7997228835704334\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for Decision Tree (Crack):\nMean Accuracy: 0.7607427055702918\nMean ROC AUC: nan\nMean F1-score: 0.7655354992605348\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for K-Nearest Neighbors (Crack):\nMean Accuracy: 0.8567639257294429\nMean ROC AUC: nan\nMean F1-score: 0.7990427288947539\nMean evaluation metrics for Naive Bayes (Crack):\nMean Accuracy: 0.4790450928381963\nMean ROC AUC: nan\nMean F1-score: 0.5897777186560548\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for Gradient Boosting (Crack):\nMean Accuracy: 0.847214854111406\nMean ROC AUC: nan\nMean F1-score: 0.8015051176157622\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for AdaBoost (Crack):\nMean Accuracy: 0.7718832891246684\nMean ROC AUC: nan\nMean F1-score: 0.7579633896769433\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:794: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 115, in __call__\n    score = scorer._score(cached_call, estimator, *args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_scorer.py\", line 327, in _score\n    return self._sign * self._score_func(y, y_pred, **self._kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 566, in roc_auc_score\n    return _multiclass_roc_auc_score(\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py\", line 683, in _multiclass_roc_auc_score\n    raise ValueError(\nValueError: Number of classes in y_true not equal to the number of columns in 'y_score'\n\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=5.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Mean evaluation metrics for XGBoost (Crack):\nMean Accuracy: 0.847214854111406\nMean ROC AUC: nan\nMean F1-score: 0.8060079356240306\n\nEvaluation results:\n{'Alcohol': {'Random Forest': {'CV_Accuracy': 0.38817548104620353, 'CV_ROC_AUC': 0.6024297374232644, 'CV_F1_score': 0.31025072013472454}, 'Logistic Regression': {'CV_Accuracy': 0.3987988247493951, 'CV_ROC_AUC': 0.6393817584638157, 'CV_F1_score': 0.3064922531574758}, 'Support Vector Machine': {'CV_Accuracy': 0.40331547413296465, 'CV_ROC_AUC': 0.6213365943125343, 'CV_F1_score': 0.2907283327783044}, 'Decision Tree': {'CV_Accuracy': 0.28128816683949764, 'CV_ROC_AUC': 0.5108164299244267, 'CV_F1_score': 0.29184404694732147}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3199389330568038, 'CV_ROC_AUC': 0.5449742162371234, 'CV_F1_score': 0.29875947096887245}, 'Naive Bayes': {'CV_Accuracy': 0.36848427238161074, 'CV_ROC_AUC': 0.6164581901202114, 'CV_F1_score': 0.32631621978767045}, 'Gradient Boosting': {'CV_Accuracy': 0.3783183546491531, 'CV_ROC_AUC': 0.6246212585338462, 'CV_F1_score': 0.3315581910329865}, 'AdaBoost': {'CV_Accuracy': 0.25703134001613087, 'CV_ROC_AUC': 0.584104067659864, 'CV_F1_score': 0.2513469681794141}, 'XGBoost': {'CV_Accuracy': 0.3351019702730729, 'CV_ROC_AUC': 0.6243705107328583, 'CV_F1_score': 0.3008380074441168}}, 'Amphet': {'Random Forest': {'CV_Accuracy': 0.5049400852632793, 'CV_ROC_AUC': 0.7259613723262366, 'CV_F1_score': 0.4199862103481501}, 'Logistic Regression': {'CV_Accuracy': 0.491312363175481, 'CV_ROC_AUC': 0.742990426260252, 'CV_F1_score': 0.3974624473367467}, 'Support Vector Machine': {'CV_Accuracy': 0.5155461458693398, 'CV_ROC_AUC': 0.7278506925675488, 'CV_F1_score': 0.36264107724586264}, 'Decision Tree': {'CV_Accuracy': 0.3783356377462842, 'CV_ROC_AUC': 0.5385604623025015, 'CV_F1_score': 0.37733281668980456}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.4609718861620003, 'CV_ROC_AUC': 0.6332482114997254, 'CV_F1_score': 0.39370506773307884}, 'Naive Bayes': {'CV_Accuracy': 0.45262703076391286, 'CV_ROC_AUC': 0.7475854674269324, 'CV_F1_score': 0.44859393837422357}, 'Gradient Boosting': {'CV_Accuracy': 0.4966009908975688, 'CV_ROC_AUC': 0.7304278632499969, 'CV_F1_score': 0.43699517550013606}, 'AdaBoost': {'CV_Accuracy': 0.3259764949879019, 'CV_ROC_AUC': 0.6325482862644807, 'CV_F1_score': 0.34823522796507084}, 'XGBoost': {'CV_Accuracy': 0.4837135614702155, 'CV_ROC_AUC': 0.7129162860580187, 'CV_F1_score': 0.4383499988353378}}, 'Amyl': {'Random Forest': {'CV_Accuracy': 0.6974939509160042, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6038006015047548}, 'Logistic Regression': {'CV_Accuracy': 0.6838633483120174, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5885505907788756}, 'Support Vector Machine': {'CV_Accuracy': 0.6929484963705497, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5696154570918239}, 'Decision Tree': {'CV_Accuracy': 0.5572387371817029, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5528796855918612}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.6807984790874524, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6045348472331047}, 'Naive Bayes': {'CV_Accuracy': 0.5004090332987671, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5332433414405127}, 'Gradient Boosting': {'CV_Accuracy': 0.6891433344855398, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6281868807863201}, 'AdaBoost': {'CV_Accuracy': 0.5937060721281254, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.516890128086342}, 'XGBoost': {'CV_Accuracy': 0.6724622652379307, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6208290614889821}}, 'Benzos': {'Random Forest': {'CV_Accuracy': 0.5314667588431847, 'CV_ROC_AUC': 0.6901267292927338, 'CV_F1_score': 0.4282600345460515}, 'Logistic Regression': {'CV_Accuracy': 0.5284422168452587, 'CV_ROC_AUC': 0.718232377391191, 'CV_F1_score': 0.4276557644827122}, 'Support Vector Machine': {'CV_Accuracy': 0.5329819103583363, 'CV_ROC_AUC': 0.6965660179699139, 'CV_F1_score': 0.38121405915094864}, 'Decision Tree': {'CV_Accuracy': 0.386700656757691, 'CV_ROC_AUC': 0.5295009109875979, 'CV_F1_score': 0.3924453175953914}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5072012904712524, 'CV_ROC_AUC': 0.6031443759795213, 'CV_F1_score': 0.43154660892342056}, 'Naive Bayes': {'CV_Accuracy': 0.45036870607212814, 'CV_ROC_AUC': 0.6969888770186026, 'CV_F1_score': 0.42954973760247095}, 'Gradient Boosting': {'CV_Accuracy': 0.5132676575642354, 'CV_ROC_AUC': 0.6916709240441379, 'CV_F1_score': 0.44387239096643133}, 'AdaBoost': {'CV_Accuracy': 0.38966182739947, 'CV_ROC_AUC': 0.6153348512819222, 'CV_F1_score': 0.3804056223955248}, 'XGBoost': {'CV_Accuracy': 0.4988564350731651, 'CV_ROC_AUC': 0.6815256440557373, 'CV_F1_score': 0.44570937013355766}}, 'Caff': {'Random Forest': {'CV_Accuracy': 0.7301013941698352, 'CV_ROC_AUC': 0.5584694337109506, 'CV_F1_score': 0.621326320567612}, 'Logistic Regression': {'CV_Accuracy': 0.7346468487152897, 'CV_ROC_AUC': 0.600339483532304, 'CV_F1_score': 0.622266194174623}, 'Support Vector Machine': {'CV_Accuracy': 0.7346468487152897, 'CV_ROC_AUC': 0.5347794251463468, 'CV_F1_score': 0.622266194174623}, 'Decision Tree': {'CV_Accuracy': 0.5390367553865654, 'CV_ROC_AUC': 0.5007623286905971, 'CV_F1_score': 0.5581679997757968}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.6618648461804355, 'CV_ROC_AUC': 0.5043104528851736, 'CV_F1_score': 0.598341801076105}, 'Naive Bayes': {'CV_Accuracy': 0.5656815301301993, 'CV_ROC_AUC': 0.5894308654697585, 'CV_F1_score': 0.5085289614567908}, 'Gradient Boosting': {'CV_Accuracy': 0.7028085032837885, 'CV_ROC_AUC': 0.5137808933325632, 'CV_F1_score': 0.6129387920086756}, 'AdaBoost': {'CV_Accuracy': 0.608854706763452, 'CV_ROC_AUC': 0.5143369962247106, 'CV_F1_score': 0.5703108593643149}, 'XGBoost': {'CV_Accuracy': 0.7028142643161656, 'CV_ROC_AUC': 0.5637482563896749, 'CV_F1_score': 0.6214423021431414}}, 'Cannabis': {'Random Forest': {'CV_Accuracy': 0.38742078580481626, 'CV_ROC_AUC': 0.7126856127164982, 'CV_F1_score': 0.33236677690747707}, 'Logistic Regression': {'CV_Accuracy': 0.41319564465952296, 'CV_ROC_AUC': 0.7476402403997079, 'CV_F1_score': 0.33099966109823803}, 'Support Vector Machine': {'CV_Accuracy': 0.4018377693282636, 'CV_ROC_AUC': 0.7420585601871071, 'CV_F1_score': 0.30965371483095405}, 'Decision Tree': {'CV_Accuracy': 0.2941842378154165, 'CV_ROC_AUC': 0.5637081742395177, 'CV_F1_score': 0.28873536239725006}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3358537849982716, 'CV_ROC_AUC': 0.639929789145281, 'CV_F1_score': 0.3079914679289321}, 'Naive Bayes': {'CV_Accuracy': 0.364667588431847, 'CV_ROC_AUC': 0.7447658162780705, 'CV_F1_score': 0.34331083475952506}, 'Gradient Boosting': {'CV_Accuracy': 0.364684871528978, 'CV_ROC_AUC': 0.6998414442118562, 'CV_F1_score': 0.3265009744677196}, 'AdaBoost': {'CV_Accuracy': 0.30097361447171334, 'CV_ROC_AUC': 0.6777444703096943, 'CV_F1_score': 0.2925051624367194}, 'XGBoost': {'CV_Accuracy': 0.34951607328033185, 'CV_ROC_AUC': 0.6828102822874036, 'CV_F1_score': 0.32473492956935857}}, 'Choc': {'Random Forest': {'CV_Accuracy': 0.3949850213158198, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.36472345018153185}, 'Logistic Regression': {'CV_Accuracy': 0.3987786611360756, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.32521292696030973}, 'Support Vector Machine': {'CV_Accuracy': 0.400299573683604, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.33382273680329116}, 'Decision Tree': {'CV_Accuracy': 0.35331835464915307, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.34853988711448236}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3730182048623113, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.36284156264909045}, 'Naive Bayes': {'CV_Accuracy': 0.33284364558128815, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.26223308778876064}, 'Gradient Boosting': {'CV_Accuracy': 0.37524196335983406, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.350472182678112}, 'AdaBoost': {'CV_Accuracy': 0.40939048277451323, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.36226076745494595}, 'XGBoost': {'CV_Accuracy': 0.36162864385297844, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.33645473907186085}}, 'Coke': {'Random Forest': {'CV_Accuracy': 0.5731766332526789, 'CV_ROC_AUC': 0.7018095075995763, 'CV_F1_score': 0.4808606184087497}, 'Logistic Regression': {'CV_Accuracy': 0.5549573683604102, 'CV_ROC_AUC': 0.7253331341113224, 'CV_F1_score': 0.4589064914391381}, 'Support Vector Machine': {'CV_Accuracy': 0.560274801244383, 'CV_ROC_AUC': 0.7083245695449376, 'CV_F1_score': 0.4352005536613411}, 'Decision Tree': {'CV_Accuracy': 0.4366920152091255, 'CV_ROC_AUC': 0.5511808442104008, 'CV_F1_score': 0.4520896667689451}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5352488765986865, 'CV_ROC_AUC': 0.6121404063989553, 'CV_F1_score': 0.4642295635257966}, 'Naive Bayes': {'CV_Accuracy': 0.4935476437377577, 'CV_ROC_AUC': 0.7175849782681752, 'CV_F1_score': 0.48680852223989907}, 'Gradient Boosting': {'CV_Accuracy': 0.533733725083535, 'CV_ROC_AUC': 0.6950286223852988, 'CV_F1_score': 0.47327638527482263}, 'AdaBoost': {'CV_Accuracy': 0.30706878672658144, 'CV_ROC_AUC': 0.568709577222238, 'CV_F1_score': 0.31897256431131726}, 'XGBoost': {'CV_Accuracy': 0.5519241848139187, 'CV_ROC_AUC': 0.7020992399601133, 'CV_F1_score': 0.5038231644535225}}, 'Ecstasy': {'Random Forest': {'CV_Accuracy': 0.5496687406383224, 'CV_ROC_AUC': 0.7055683921947262, 'CV_F1_score': 0.46584645879475844}, 'Logistic Regression': {'CV_Accuracy': 0.5572416176978916, 'CV_ROC_AUC': 0.7320237333794635, 'CV_F1_score': 0.4729664296861352}, 'Support Vector Machine': {'CV_Accuracy': 0.5655749510312248, 'CV_ROC_AUC': 0.7044033855085539, 'CV_F1_score': 0.4588901765336109}, 'Decision Tree': {'CV_Accuracy': 0.4336559511464454, 'CV_ROC_AUC': 0.5375220472041031, 'CV_F1_score': 0.43585079617693784}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5170670584168683, 'CV_ROC_AUC': 0.5968014257748979, 'CV_F1_score': 0.4492988356720137}, 'Naive Bayes': {'CV_Accuracy': 0.29338633483120174, 'CV_ROC_AUC': 0.6733857546412443, 'CV_F1_score': 0.3519723088952528}, 'Gradient Boosting': {'CV_Accuracy': 0.5246312939278718, 'CV_ROC_AUC': 0.7116719601027329, 'CV_F1_score': 0.47273790629221085}, 'AdaBoost': {'CV_Accuracy': 0.4465289779928563, 'CV_ROC_AUC': 0.6208563736065421, 'CV_F1_score': 0.4300455171693171}, 'XGBoost': {'CV_Accuracy': 0.5238823597188617, 'CV_ROC_AUC': 0.7042065596447887, 'CV_F1_score': 0.48100613747544213}}, 'Heroin': {'Random Forest': {'CV_Accuracy': 0.8506452356262242, 'CV_ROC_AUC': 0.7554492252590308, 'CV_F1_score': 0.783678886291051}, 'Logistic Regression': {'CV_Accuracy': 0.84836674732112, 'CV_ROC_AUC': 0.8180053360861527, 'CV_F1_score': 0.781555258578319}, 'Support Vector Machine': {'CV_Accuracy': 0.8514028113838, 'CV_ROC_AUC': 0.7526982032908061, 'CV_F1_score': 0.7830682532314699}, 'Decision Tree': {'CV_Accuracy': 0.7293207742827514, 'CV_ROC_AUC': 0.5428299671389422, 'CV_F1_score': 0.7411376656465182}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.8400276529554096, 'CV_ROC_AUC': 0.5666023906614258, 'CV_F1_score': 0.7824500539462103}, 'Naive Bayes': {'CV_Accuracy': 0.6080222375849752, 'CV_ROC_AUC': 0.7721118638127475, 'CV_F1_score': 0.6772024012498912}, 'Gradient Boosting': {'CV_Accuracy': 0.8339699274109922, 'CV_ROC_AUC': 0.7678826126582907, 'CV_F1_score': 0.7907852846868949}, 'AdaBoost': {'CV_Accuracy': 0.6832008295886622, 'CV_ROC_AUC': 0.6426179928819871, 'CV_F1_score': 0.6949905298674619}, 'XGBoost': {'CV_Accuracy': 0.8362541767484734, 'CV_ROC_AUC': 0.7683471162930492, 'CV_F1_score': 0.792687514231172}}, 'Ketamine': {'Random Forest': {'CV_Accuracy': 0.790753543034912, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.703876179240867}, 'Logistic Regression': {'CV_Accuracy': 0.7892355110035718, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6995594390294759}, 'Support Vector Machine': {'CV_Accuracy': 0.7907506625187234, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6983521452130725}, 'Decision Tree': {'CV_Accuracy': 0.638351192533702, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.651508914776966}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.7725486807235856, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6953840524097633}, 'Naive Bayes': {'CV_Accuracy': 0.5054124899181934, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5576086279231371}, 'Gradient Boosting': {'CV_Accuracy': 0.7695183776932827, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.7093057105888496}, 'AdaBoost': {'CV_Accuracy': 0.6771142988823597, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.6252335384263896}, 'XGBoost': {'CV_Accuracy': 0.7695270192418482, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.7080983420248556}}, 'Legalh': {'Random Forest': {'CV_Accuracy': 0.630755271344625, 'CV_ROC_AUC': 0.7039893909201644, 'CV_F1_score': 0.5593161680284051}, 'Logistic Regression': {'CV_Accuracy': 0.6315272496831432, 'CV_ROC_AUC': 0.7539113218037159, 'CV_F1_score': 0.5580368175891198}, 'Support Vector Machine': {'CV_Accuracy': 0.630772554441756, 'CV_ROC_AUC': 0.7187146718966412, 'CV_F1_score': 0.5446027420048773}, 'Decision Tree': {'CV_Accuracy': 0.49654626108998734, 'CV_ROC_AUC': 0.5533473980000739, 'CV_F1_score': 0.5017063379545232}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5966441986403964, 'CV_ROC_AUC': 0.6406151720999137, 'CV_F1_score': 0.5468187137188598}, 'Naive Bayes': {'CV_Accuracy': 0.5860525406152782, 'CV_ROC_AUC': 0.7302292489242008, 'CV_F1_score': 0.5555313968028172}, 'Gradient Boosting': {'CV_Accuracy': 0.5996917847678305, 'CV_ROC_AUC': 0.7024419633188275, 'CV_F1_score': 0.555829702051818}, 'AdaBoost': {'CV_Accuracy': 0.4943455467219726, 'CV_ROC_AUC': 0.6210653288795227, 'CV_F1_score': 0.49757837651986775}, 'XGBoost': {'CV_Accuracy': 0.6034566194262012, 'CV_ROC_AUC': 0.7173523526718626, 'CV_F1_score': 0.5646976027969758}}, 'LSD': {'Random Forest': {'CV_Accuracy': 0.6141058877750892, 'CV_ROC_AUC': 0.8131176510315289, 'CV_F1_score': 0.5513507957815746}, 'Logistic Regression': {'CV_Accuracy': 0.6019789146215002, 'CV_ROC_AUC': 0.8306048437993659, 'CV_F1_score': 0.547643925139604}, 'Support Vector Machine': {'CV_Accuracy': 0.6004608825901602, 'CV_ROC_AUC': 0.8123620118040167, 'CV_F1_score': 0.5281795621619179}, 'Decision Tree': {'CV_Accuracy': 0.5079617467450167, 'CV_ROC_AUC': 0.57458067323993, 'CV_F1_score': 0.5130140020969971}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5746802627030764, 'CV_ROC_AUC': 0.6737929761011812, 'CV_F1_score': 0.5191983580521089}, 'Naive Bayes': {'CV_Accuracy': 0.5572877059569075, 'CV_ROC_AUC': 0.7971663721938234, 'CV_F1_score': 0.5477755634631439}, 'Gradient Boosting': {'CV_Accuracy': 0.5883367899527595, 'CV_ROC_AUC': 0.7938882131747264, 'CV_F1_score': 0.552391190697324}, 'AdaBoost': {'CV_Accuracy': 0.27836732342435766, 'CV_ROC_AUC': 0.6857616670025847, 'CV_F1_score': 0.24932667885155171}, 'XGBoost': {'CV_Accuracy': 0.577730729346699, 'CV_ROC_AUC': 0.7929281728555668, 'CV_F1_score': 0.5514796833059485}}, 'Meth': {'Random Forest': {'CV_Accuracy': 0.7513307984790875, 'CV_ROC_AUC': 0.7235196021479103, 'CV_F1_score': 0.6632871507114602}, 'Logistic Regression': {'CV_Accuracy': 0.7520883742366633, 'CV_ROC_AUC': 0.7563758435499538, 'CV_F1_score': 0.6589804442758442}, 'Support Vector Machine': {'CV_Accuracy': 0.7581518608134578, 'CV_ROC_AUC': 0.7218849040751784, 'CV_F1_score': 0.6538623721072908}, 'Decision Tree': {'CV_Accuracy': 0.6239774167530822, 'CV_ROC_AUC': 0.5313520275355785, 'CV_F1_score': 0.6354827943795911}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.7429773015324346, 'CV_ROC_AUC': 0.5888401313708803, 'CV_F1_score': 0.6704420699495915}, 'Naive Bayes': {'CV_Accuracy': 0.13718458347735915, 'CV_ROC_AUC': 0.7072056816271799, 'CV_F1_score': 0.18567263152020158}, 'Gradient Boosting': {'CV_Accuracy': 0.7293409378960709, 'CV_ROC_AUC': 0.7294277005186712, 'CV_F1_score': 0.6637000951031344}, 'AdaBoost': {'CV_Accuracy': 0.5011464454430233, 'CV_ROC_AUC': 0.6154701717431956, 'CV_F1_score': 0.5393787364046114}, 'XGBoost': {'CV_Accuracy': 0.7263077543495794, 'CV_ROC_AUC': 0.7307588502553647, 'CV_F1_score': 0.6687528590974781}}, 'Mushrooms': {'Random Forest': {'CV_Accuracy': 0.545843415139993, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.4966670012458937}, 'Logistic Regression': {'CV_Accuracy': 0.5367669086300265, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.46762002255964824}, 'Support Vector Machine': {'CV_Accuracy': 0.5534393363290702, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.46621524387379154}, 'Decision Tree': {'CV_Accuracy': 0.44731247839612853, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.45210662672640145}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.5261464454430234, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.4745736529862869}, 'Naive Bayes': {'CV_Accuracy': 0.5193340246572186, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.5083130173064775}, 'Gradient Boosting': {'CV_Accuracy': 0.5314437147136767, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.49771872731304667}, 'AdaBoost': {'CV_Accuracy': 0.42294619195759875, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.38213054564851456}, 'XGBoost': {'CV_Accuracy': 0.5102027883396704, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.4827987367421002}}, 'Nicotine': {'Random Forest': {'CV_Accuracy': 0.3767801590044936, 'CV_ROC_AUC': 0.6620536153490797, 'CV_F1_score': 0.30901409440295097}, 'Logistic Regression': {'CV_Accuracy': 0.4041133771171793, 'CV_ROC_AUC': 0.6916237703299177, 'CV_F1_score': 0.31984291164543976}, 'Support Vector Machine': {'CV_Accuracy': 0.39955063947459385, 'CV_ROC_AUC': 0.6867843023614071, 'CV_F1_score': 0.2935876966037831}, 'Decision Tree': {'CV_Accuracy': 0.25548450282290586, 'CV_ROC_AUC': 0.5310671154689068, 'CV_F1_score': 0.25515070893810665}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.3116171217882245, 'CV_ROC_AUC': 0.5936192550667885, 'CV_F1_score': 0.29154570726716733}, 'Naive Bayes': {'CV_Accuracy': 0.3062737642585551, 'CV_ROC_AUC': 0.690798902394499, 'CV_F1_score': 0.29757897943514033}, 'Gradient Boosting': {'CV_Accuracy': 0.35177439797211657, 'CV_ROC_AUC': 0.6583212935212837, 'CV_F1_score': 0.3132747753322333}, 'AdaBoost': {'CV_Accuracy': 0.29190574951031223, 'CV_ROC_AUC': 0.6117052624638035, 'CV_F1_score': 0.2778871228828041}, 'XGBoost': {'CV_Accuracy': 0.34040500057610323, 'CV_ROC_AUC': 0.6387865179384562, 'CV_F1_score': 0.3108427500221899}}, 'VSA': {'Random Forest': {'CV_Accuracy': 0.768008987210508, 'CV_ROC_AUC': 0.6510138655184659, 'CV_F1_score': 0.6760769567628235}, 'Logistic Regression': {'CV_Accuracy': 0.7687579214195183, 'CV_ROC_AUC': 0.6683740488428886, 'CV_F1_score': 0.6765409682904802}, 'Support Vector Machine': {'CV_Accuracy': 0.7717968659983869, 'CV_ROC_AUC': 0.7803435661352893, 'CV_F1_score': 0.6723920788833654}, 'Decision Tree': {'CV_Accuracy': 0.6284969466528402, 'CV_ROC_AUC': 0.5284405835904061, 'CV_F1_score': 0.6361461945238733}, 'K-Nearest Neighbors': {'CV_Accuracy': 0.7543611015093905, 'CV_ROC_AUC': 0.6013684324059081, 'CV_F1_score': 0.6827500948429519}, 'Naive Bayes': {'CV_Accuracy': 0.6058215232169605, 'CV_ROC_AUC': 0.6669934138495691, 'CV_F1_score': 0.6301394662216198}, 'Gradient Boosting': {'CV_Accuracy': 0.7391951837769328, 'CV_ROC_AUC': 0.651999852026522, 'CV_F1_score': 0.6788577101357562}, 'AdaBoost': {'CV_Accuracy': 0.6222318239428506, 'CV_ROC_AUC': 0.5451012040273213, 'CV_F1_score': 0.5868208347530096}, 'XGBoost': {'CV_Accuracy': 0.7422197257748588, 'CV_ROC_AUC': 0.6704472605484783, 'CV_F1_score': 0.6838760118566326}}, 'Crack': {'XGBoost': {'CV_Accuracy': 0.847214854111406, 'CV_ROC_AUC': nan, 'CV_F1_score': 0.8060079356240306}}}\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert evaluation results dictionary to a DataFrame\ndf_evaluation_results = pd.DataFrame.from_dict({(i, j): evaluation_results[i][j] \n                                                for i in evaluation_results.keys() \n                                                for j in evaluation_results[i].keys()}, \n                                               orient='index')\n\n# Reset the index to separate the keys into columns\ndf_evaluation_results.reset_index(inplace=True)\ndf_evaluation_results.rename(columns={'level_0': 'Target_Variable', 'level_1': 'Algorithm'}, inplace=True)\n\n# Print the DataFrame\nprint(df_evaluation_results)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T05:15:09.168892Z","iopub.execute_input":"2024-04-30T05:15:09.169557Z","iopub.status.idle":"2024-04-30T05:15:09.187280Z","shell.execute_reply.started":"2024-04-30T05:15:09.169520Z","shell.execute_reply":"2024-04-30T05:15:09.186383Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"    Target_Variable               Algorithm  Accuracy   ROC_AUC  F1_score\n0           Alcohol           Random Forest  0.369258  0.585735  0.314266\n1           Alcohol     Logistic Regression  0.406360  0.617254  0.310498\n2           Alcohol  Support Vector Machine  0.386926  0.580213  0.275544\n3           Alcohol           Decision Tree  0.300353  0.508573  0.301782\n4           Alcohol     K-Nearest Neighbors  0.326855  0.515922  0.314665\n..              ...                     ...       ...       ...       ...\n157           Crack     K-Nearest Neighbors  0.742049  0.750709  0.685640\n158           Crack             Naive Bayes  0.742049  0.750709  0.685640\n159           Crack       Gradient Boosting  0.742049  0.750709  0.685640\n160           Crack                AdaBoost  0.742049  0.750709  0.685640\n161           Crack                 XGBoost  0.742049  0.750709  0.685640\n\n[162 rows x 5 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert evaluation results dictionary to a DataFrame\ndf_evaluation_results_kfold = pd.DataFrame.from_dict({(i, j): evaluation_results_kfold[i][j] \n                                                for i in evaluation_results_kfold.keys() \n                                                for j in evaluation_results_kfold[i].keys()}, \n                                               orient='index')\n\n# Reset the index to separate the keys into columns\ndf_evaluation_results_kfold.reset_index(inplace=True)\ndf_evaluation_results_kfold.rename(columns={'level_0': 'Target_Variable', 'level_1': 'Algorithm'}, inplace=True)\n\n# Print the DataFrame\nprint(df_evaluation_results_kfold)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T05:15:09.188931Z","iopub.execute_input":"2024-04-30T05:15:09.189873Z","iopub.status.idle":"2024-04-30T05:15:09.207530Z","shell.execute_reply.started":"2024-04-30T05:15:09.189833Z","shell.execute_reply":"2024-04-30T05:15:09.205849Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"    Target_Variable               Algorithm  CV_Accuracy  CV_ROC_AUC  \\\n0           Alcohol           Random Forest     0.388175    0.602430   \n1           Alcohol     Logistic Regression     0.398799    0.639382   \n2           Alcohol  Support Vector Machine     0.403315    0.621337   \n3           Alcohol           Decision Tree     0.281288    0.510816   \n4           Alcohol     K-Nearest Neighbors     0.319939    0.544974   \n..              ...                     ...          ...         ...   \n149             VSA             Naive Bayes     0.605822    0.666993   \n150             VSA       Gradient Boosting     0.739195    0.652000   \n151             VSA                AdaBoost     0.622232    0.545101   \n152             VSA                 XGBoost     0.742220    0.670447   \n153           Crack                 XGBoost     0.847215         NaN   \n\n     CV_F1_score  \n0       0.310251  \n1       0.306492  \n2       0.290728  \n3       0.291844  \n4       0.298759  \n..           ...  \n149     0.630139  \n150     0.678858  \n151     0.586821  \n152     0.683876  \n153     0.806008  \n\n[154 rows x 5 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Export the DataFrame to a CSV file\ndf_evaluation_results.to_csv('evaluation_results.csv', index=False)\ndf_evaluation_results_kfold.to_csv('evaluation_results_kfold.csv', index=False)\n\nprint(\"Evaluation results exported to 'evaluation_results.csv' successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-04-30T05:15:09.210174Z","iopub.execute_input":"2024-04-30T05:15:09.210523Z","iopub.status.idle":"2024-04-30T05:15:09.231465Z","shell.execute_reply.started":"2024-04-30T05:15:09.210494Z","shell.execute_reply":"2024-04-30T05:15:09.229903Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"Evaluation results exported to 'evaluation_results.csv' successfully.\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}