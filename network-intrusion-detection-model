{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d063c472",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:23.962563Z",
     "iopub.status.busy": "2024-07-10T08:58:23.962032Z",
     "iopub.status.idle": "2024-07-10T08:58:24.902547Z",
     "shell.execute_reply": "2024-07-10T08:58:24.900966Z"
    },
    "papermill": {
     "duration": 0.963323,
     "end_time": "2024-07-10T08:58:24.905474",
     "exception": false,
     "start_time": "2024-07-10T08:58:23.942151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/network-intrusion-detection/Friday-WorkingHours-Afternoon-PortScan.pcap_ISCX.csv\n",
      "/kaggle/input/network-intrusion-detection/Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv\n",
      "/kaggle/input/network-intrusion-detection/Friday-WorkingHours-Morning.pcap_ISCX.csv\n",
      "/kaggle/input/network-intrusion-detection/NUSW-NB15_features.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df45e27a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:24.939917Z",
     "iopub.status.busy": "2024-07-10T08:58:24.939368Z",
     "iopub.status.idle": "2024-07-10T08:58:34.330225Z",
     "shell.execute_reply": "2024-07-10T08:58:34.328907Z"
    },
    "papermill": {
     "duration": 9.411576,
     "end_time": "2024-07-10T08:58:34.333214",
     "exception": false,
     "start_time": "2024-07-10T08:58:24.921638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "afternoon_ddos_df = pd.read_csv('/kaggle/input/network-intrusion-detection/Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv')\n",
    "afternoon_portscan_df = pd.read_csv('/kaggle/input/network-intrusion-detection/Friday-WorkingHours-Afternoon-PortScan.pcap_ISCX.csv')\n",
    "morning_df = pd.read_csv('/kaggle/input/network-intrusion-detection/Friday-WorkingHours-Morning.pcap_ISCX.csv')\n",
    "nusw_nb15_features_df = pd.read_csv('/kaggle/input/network-intrusion-detection/NUSW-NB15_features.csv', encoding='latin1')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "08f01fba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:34.368360Z",
     "iopub.status.busy": "2024-07-10T08:58:34.367274Z",
     "iopub.status.idle": "2024-07-10T08:58:34.478728Z",
     "shell.execute_reply": "2024-07-10T08:58:34.477560Z"
    },
    "papermill": {
     "duration": 0.131936,
     "end_time": "2024-07-10T08:58:34.481574",
     "exception": false,
     "start_time": "2024-07-10T08:58:34.349638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Afternoon DDos DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Destination Port</th>\n",
       "      <th>Flow Duration</th>\n",
       "      <th>Total Fwd Packets</th>\n",
       "      <th>Total Backward Packets</th>\n",
       "      <th>Total Length of Fwd Packets</th>\n",
       "      <th>Total Length of Bwd Packets</th>\n",
       "      <th>Fwd Packet Length Max</th>\n",
       "      <th>Fwd Packet Length Min</th>\n",
       "      <th>Fwd Packet Length Mean</th>\n",
       "      <th>Fwd Packet Length Std</th>\n",
       "      <th>...</th>\n",
       "      <th>min_seg_size_forward</th>\n",
       "      <th>Active Mean</th>\n",
       "      <th>Active Std</th>\n",
       "      <th>Active Max</th>\n",
       "      <th>Active Min</th>\n",
       "      <th>Idle Mean</th>\n",
       "      <th>Idle Std</th>\n",
       "      <th>Idle Max</th>\n",
       "      <th>Idle Min</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>54865</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>55054</td>\n",
       "      <td>109</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>55055</td>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>46236</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54863</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225740</th>\n",
       "      <td>61374</td>\n",
       "      <td>61</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225741</th>\n",
       "      <td>61378</td>\n",
       "      <td>72</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225742</th>\n",
       "      <td>61375</td>\n",
       "      <td>75</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225743</th>\n",
       "      <td>61323</td>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225744</th>\n",
       "      <td>61326</td>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>225745 rows × 79 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Destination Port   Flow Duration   Total Fwd Packets  \\\n",
       "0                   54865               3                   2   \n",
       "1                   55054             109                   1   \n",
       "2                   55055              52                   1   \n",
       "3                   46236              34                   1   \n",
       "4                   54863               3                   2   \n",
       "...                   ...             ...                 ...   \n",
       "225740              61374              61                   1   \n",
       "225741              61378              72                   1   \n",
       "225742              61375              75                   1   \n",
       "225743              61323              48                   2   \n",
       "225744              61326              68                   1   \n",
       "\n",
       "         Total Backward Packets  Total Length of Fwd Packets  \\\n",
       "0                             0                           12   \n",
       "1                             1                            6   \n",
       "2                             1                            6   \n",
       "3                             1                            6   \n",
       "4                             0                           12   \n",
       "...                         ...                          ...   \n",
       "225740                        1                            6   \n",
       "225741                        1                            6   \n",
       "225742                        1                            6   \n",
       "225743                        0                           12   \n",
       "225744                        1                            6   \n",
       "\n",
       "         Total Length of Bwd Packets   Fwd Packet Length Max  \\\n",
       "0                                  0                       6   \n",
       "1                                  6                       6   \n",
       "2                                  6                       6   \n",
       "3                                  6                       6   \n",
       "4                                  0                       6   \n",
       "...                              ...                     ...   \n",
       "225740                             6                       6   \n",
       "225741                             6                       6   \n",
       "225742                             6                       6   \n",
       "225743                             0                       6   \n",
       "225744                             6                       6   \n",
       "\n",
       "         Fwd Packet Length Min   Fwd Packet Length Mean  \\\n",
       "0                            6                      6.0   \n",
       "1                            6                      6.0   \n",
       "2                            6                      6.0   \n",
       "3                            6                      6.0   \n",
       "4                            6                      6.0   \n",
       "...                        ...                      ...   \n",
       "225740                       6                      6.0   \n",
       "225741                       6                      6.0   \n",
       "225742                       6                      6.0   \n",
       "225743                       6                      6.0   \n",
       "225744                       6                      6.0   \n",
       "\n",
       "         Fwd Packet Length Std  ...   min_seg_size_forward  Active Mean  \\\n",
       "0                          0.0  ...                     20          0.0   \n",
       "1                          0.0  ...                     20          0.0   \n",
       "2                          0.0  ...                     20          0.0   \n",
       "3                          0.0  ...                     20          0.0   \n",
       "4                          0.0  ...                     20          0.0   \n",
       "...                        ...  ...                    ...          ...   \n",
       "225740                     0.0  ...                     20          0.0   \n",
       "225741                     0.0  ...                     20          0.0   \n",
       "225742                     0.0  ...                     20          0.0   \n",
       "225743                     0.0  ...                     20          0.0   \n",
       "225744                     0.0  ...                     20          0.0   \n",
       "\n",
       "         Active Std   Active Max   Active Min  Idle Mean   Idle Std  \\\n",
       "0               0.0            0            0        0.0        0.0   \n",
       "1               0.0            0            0        0.0        0.0   \n",
       "2               0.0            0            0        0.0        0.0   \n",
       "3               0.0            0            0        0.0        0.0   \n",
       "4               0.0            0            0        0.0        0.0   \n",
       "...             ...          ...          ...        ...        ...   \n",
       "225740          0.0            0            0        0.0        0.0   \n",
       "225741          0.0            0            0        0.0        0.0   \n",
       "225742          0.0            0            0        0.0        0.0   \n",
       "225743          0.0            0            0        0.0        0.0   \n",
       "225744          0.0            0            0        0.0        0.0   \n",
       "\n",
       "         Idle Max   Idle Min   Label  \n",
       "0               0          0  BENIGN  \n",
       "1               0          0  BENIGN  \n",
       "2               0          0  BENIGN  \n",
       "3               0          0  BENIGN  \n",
       "4               0          0  BENIGN  \n",
       "...           ...        ...     ...  \n",
       "225740          0          0  BENIGN  \n",
       "225741          0          0  BENIGN  \n",
       "225742          0          0  BENIGN  \n",
       "225743          0          0  BENIGN  \n",
       "225744          0          0  BENIGN  \n",
       "\n",
       "[225745 rows x 79 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Afternoon DDos DataFrame:\")\n",
    "afternoon_ddos_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fb327e72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:34.518030Z",
     "iopub.status.busy": "2024-07-10T08:58:34.516562Z",
     "iopub.status.idle": "2024-07-10T08:58:34.523847Z",
     "shell.execute_reply": "2024-07-10T08:58:34.522373Z"
    },
    "papermill": {
     "duration": 0.028268,
     "end_time": "2024-07-10T08:58:34.526592",
     "exception": false,
     "start_time": "2024-07-10T08:58:34.498324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[' Destination Port', ' Flow Duration', ' Total Fwd Packets', ' Total Backward Packets', 'Total Length of Fwd Packets', ' Total Length of Bwd Packets', ' Fwd Packet Length Max', ' Fwd Packet Length Min', ' Fwd Packet Length Mean', ' Fwd Packet Length Std', 'Bwd Packet Length Max', ' Bwd Packet Length Min', ' Bwd Packet Length Mean', ' Bwd Packet Length Std', 'Flow Bytes/s', ' Flow Packets/s', ' Flow IAT Mean', ' Flow IAT Std', ' Flow IAT Max', ' Flow IAT Min', 'Fwd IAT Total', ' Fwd IAT Mean', ' Fwd IAT Std', ' Fwd IAT Max', ' Fwd IAT Min', 'Bwd IAT Total', ' Bwd IAT Mean', ' Bwd IAT Std', ' Bwd IAT Max', ' Bwd IAT Min', 'Fwd PSH Flags', ' Bwd PSH Flags', ' Fwd URG Flags', ' Bwd URG Flags', ' Fwd Header Length', ' Bwd Header Length', 'Fwd Packets/s', ' Bwd Packets/s', ' Min Packet Length', ' Max Packet Length', ' Packet Length Mean', ' Packet Length Std', ' Packet Length Variance', 'FIN Flag Count', ' SYN Flag Count', ' RST Flag Count', ' PSH Flag Count', ' ACK Flag Count', ' URG Flag Count', ' CWE Flag Count', ' ECE Flag Count', ' Down/Up Ratio', ' Average Packet Size', ' Avg Fwd Segment Size', ' Avg Bwd Segment Size', ' Fwd Header Length.1', 'Fwd Avg Bytes/Bulk', ' Fwd Avg Packets/Bulk', ' Fwd Avg Bulk Rate', ' Bwd Avg Bytes/Bulk', ' Bwd Avg Packets/Bulk', 'Bwd Avg Bulk Rate', 'Subflow Fwd Packets', ' Subflow Fwd Bytes', ' Subflow Bwd Packets', ' Subflow Bwd Bytes', 'Init_Win_bytes_forward', ' Init_Win_bytes_backward', ' act_data_pkt_fwd', ' min_seg_size_forward', 'Active Mean', ' Active Std', ' Active Max', ' Active Min', 'Idle Mean', ' Idle Std', ' Idle Max', ' Idle Min', ' Label']\n"
     ]
    }
   ],
   "source": [
    "print(afternoon_ddos_df.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b6dbb20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:34.563330Z",
     "iopub.status.busy": "2024-07-10T08:58:34.562896Z",
     "iopub.status.idle": "2024-07-10T08:58:34.671441Z",
     "shell.execute_reply": "2024-07-10T08:58:34.670280Z"
    },
    "papermill": {
     "duration": 0.130459,
     "end_time": "2024-07-10T08:58:34.674162",
     "exception": false,
     "start_time": "2024-07-10T08:58:34.543703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Afternoon PortScan DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Destination Port</th>\n",
       "      <th>Flow Duration</th>\n",
       "      <th>Total Fwd Packets</th>\n",
       "      <th>Total Backward Packets</th>\n",
       "      <th>Total Length of Fwd Packets</th>\n",
       "      <th>Total Length of Bwd Packets</th>\n",
       "      <th>Fwd Packet Length Max</th>\n",
       "      <th>Fwd Packet Length Min</th>\n",
       "      <th>Fwd Packet Length Mean</th>\n",
       "      <th>Fwd Packet Length Std</th>\n",
       "      <th>...</th>\n",
       "      <th>min_seg_size_forward</th>\n",
       "      <th>Active Mean</th>\n",
       "      <th>Active Std</th>\n",
       "      <th>Active Max</th>\n",
       "      <th>Active Min</th>\n",
       "      <th>Idle Mean</th>\n",
       "      <th>Idle Std</th>\n",
       "      <th>Idle Max</th>\n",
       "      <th>Idle Min</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>1266342</td>\n",
       "      <td>41</td>\n",
       "      <td>44</td>\n",
       "      <td>2664</td>\n",
       "      <td>6954</td>\n",
       "      <td>456</td>\n",
       "      <td>0</td>\n",
       "      <td>64.975610</td>\n",
       "      <td>109.864573</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>1319353</td>\n",
       "      <td>41</td>\n",
       "      <td>44</td>\n",
       "      <td>2664</td>\n",
       "      <td>6954</td>\n",
       "      <td>456</td>\n",
       "      <td>0</td>\n",
       "      <td>64.975610</td>\n",
       "      <td>109.864573</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>160</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22</td>\n",
       "      <td>1303488</td>\n",
       "      <td>41</td>\n",
       "      <td>42</td>\n",
       "      <td>2728</td>\n",
       "      <td>6634</td>\n",
       "      <td>456</td>\n",
       "      <td>0</td>\n",
       "      <td>66.536585</td>\n",
       "      <td>110.129945</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35396</td>\n",
       "      <td>77</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286462</th>\n",
       "      <td>443</td>\n",
       "      <td>196135</td>\n",
       "      <td>49</td>\n",
       "      <td>57</td>\n",
       "      <td>1331</td>\n",
       "      <td>105841</td>\n",
       "      <td>570</td>\n",
       "      <td>0</td>\n",
       "      <td>27.163265</td>\n",
       "      <td>108.067176</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286463</th>\n",
       "      <td>443</td>\n",
       "      <td>378424</td>\n",
       "      <td>49</td>\n",
       "      <td>59</td>\n",
       "      <td>1325</td>\n",
       "      <td>104393</td>\n",
       "      <td>570</td>\n",
       "      <td>0</td>\n",
       "      <td>27.040816</td>\n",
       "      <td>108.095051</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286464</th>\n",
       "      <td>443</td>\n",
       "      <td>161800</td>\n",
       "      <td>70</td>\n",
       "      <td>103</td>\n",
       "      <td>1427</td>\n",
       "      <td>215903</td>\n",
       "      <td>570</td>\n",
       "      <td>0</td>\n",
       "      <td>20.385714</td>\n",
       "      <td>90.746389</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286465</th>\n",
       "      <td>443</td>\n",
       "      <td>142864</td>\n",
       "      <td>50</td>\n",
       "      <td>62</td>\n",
       "      <td>1331</td>\n",
       "      <td>110185</td>\n",
       "      <td>570</td>\n",
       "      <td>0</td>\n",
       "      <td>26.620000</td>\n",
       "      <td>107.027727</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286466</th>\n",
       "      <td>443</td>\n",
       "      <td>186928</td>\n",
       "      <td>46</td>\n",
       "      <td>57</td>\n",
       "      <td>1319</td>\n",
       "      <td>100049</td>\n",
       "      <td>570</td>\n",
       "      <td>0</td>\n",
       "      <td>28.673913</td>\n",
       "      <td>111.438085</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>286467 rows × 79 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Destination Port   Flow Duration   Total Fwd Packets  \\\n",
       "0                      22         1266342                  41   \n",
       "1                      22         1319353                  41   \n",
       "2                      22             160                   1   \n",
       "3                      22         1303488                  41   \n",
       "4                   35396              77                   1   \n",
       "...                   ...             ...                 ...   \n",
       "286462                443          196135                  49   \n",
       "286463                443          378424                  49   \n",
       "286464                443          161800                  70   \n",
       "286465                443          142864                  50   \n",
       "286466                443          186928                  46   \n",
       "\n",
       "         Total Backward Packets  Total Length of Fwd Packets  \\\n",
       "0                            44                         2664   \n",
       "1                            44                         2664   \n",
       "2                             1                            0   \n",
       "3                            42                         2728   \n",
       "4                             2                            0   \n",
       "...                         ...                          ...   \n",
       "286462                       57                         1331   \n",
       "286463                       59                         1325   \n",
       "286464                      103                         1427   \n",
       "286465                       62                         1331   \n",
       "286466                       57                         1319   \n",
       "\n",
       "         Total Length of Bwd Packets   Fwd Packet Length Max  \\\n",
       "0                               6954                     456   \n",
       "1                               6954                     456   \n",
       "2                                  0                       0   \n",
       "3                               6634                     456   \n",
       "4                                  0                       0   \n",
       "...                              ...                     ...   \n",
       "286462                        105841                     570   \n",
       "286463                        104393                     570   \n",
       "286464                        215903                     570   \n",
       "286465                        110185                     570   \n",
       "286466                        100049                     570   \n",
       "\n",
       "         Fwd Packet Length Min   Fwd Packet Length Mean  \\\n",
       "0                            0                64.975610   \n",
       "1                            0                64.975610   \n",
       "2                            0                 0.000000   \n",
       "3                            0                66.536585   \n",
       "4                            0                 0.000000   \n",
       "...                        ...                      ...   \n",
       "286462                       0                27.163265   \n",
       "286463                       0                27.040816   \n",
       "286464                       0                20.385714   \n",
       "286465                       0                26.620000   \n",
       "286466                       0                28.673913   \n",
       "\n",
       "         Fwd Packet Length Std  ...   min_seg_size_forward  Active Mean  \\\n",
       "0                   109.864573  ...                     32          0.0   \n",
       "1                   109.864573  ...                     32          0.0   \n",
       "2                     0.000000  ...                     32          0.0   \n",
       "3                   110.129945  ...                     32          0.0   \n",
       "4                     0.000000  ...                     32          0.0   \n",
       "...                        ...  ...                    ...          ...   \n",
       "286462              108.067176  ...                     20          0.0   \n",
       "286463              108.095051  ...                     20          0.0   \n",
       "286464               90.746389  ...                     20          0.0   \n",
       "286465              107.027727  ...                     20          0.0   \n",
       "286466              111.438085  ...                     20          0.0   \n",
       "\n",
       "         Active Std   Active Max   Active Min  Idle Mean   Idle Std  \\\n",
       "0               0.0            0            0        0.0        0.0   \n",
       "1               0.0            0            0        0.0        0.0   \n",
       "2               0.0            0            0        0.0        0.0   \n",
       "3               0.0            0            0        0.0        0.0   \n",
       "4               0.0            0            0        0.0        0.0   \n",
       "...             ...          ...          ...        ...        ...   \n",
       "286462          0.0            0            0        0.0        0.0   \n",
       "286463          0.0            0            0        0.0        0.0   \n",
       "286464          0.0            0            0        0.0        0.0   \n",
       "286465          0.0            0            0        0.0        0.0   \n",
       "286466          0.0            0            0        0.0        0.0   \n",
       "\n",
       "         Idle Max   Idle Min   Label  \n",
       "0               0          0  BENIGN  \n",
       "1               0          0  BENIGN  \n",
       "2               0          0  BENIGN  \n",
       "3               0          0  BENIGN  \n",
       "4               0          0  BENIGN  \n",
       "...           ...        ...     ...  \n",
       "286462          0          0  BENIGN  \n",
       "286463          0          0  BENIGN  \n",
       "286464          0          0  BENIGN  \n",
       "286465          0          0  BENIGN  \n",
       "286466          0          0  BENIGN  \n",
       "\n",
       "[286467 rows x 79 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "print(\"\\nAfternoon PortScan DataFrame:\")\n",
    "afternoon_portscan_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "50d25698",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:34.711602Z",
     "iopub.status.busy": "2024-07-10T08:58:34.711149Z",
     "iopub.status.idle": "2024-07-10T08:58:34.788578Z",
     "shell.execute_reply": "2024-07-10T08:58:34.787396Z"
    },
    "papermill": {
     "duration": 0.099275,
     "end_time": "2024-07-10T08:58:34.791197",
     "exception": false,
     "start_time": "2024-07-10T08:58:34.691922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Morning DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Destination Port</th>\n",
       "      <th>Flow Duration</th>\n",
       "      <th>Total Fwd Packets</th>\n",
       "      <th>Total Backward Packets</th>\n",
       "      <th>Total Length of Fwd Packets</th>\n",
       "      <th>Total Length of Bwd Packets</th>\n",
       "      <th>Fwd Packet Length Max</th>\n",
       "      <th>Fwd Packet Length Min</th>\n",
       "      <th>Fwd Packet Length Mean</th>\n",
       "      <th>Fwd Packet Length Std</th>\n",
       "      <th>...</th>\n",
       "      <th>min_seg_size_forward</th>\n",
       "      <th>Active Mean</th>\n",
       "      <th>Active Std</th>\n",
       "      <th>Active Max</th>\n",
       "      <th>Active Min</th>\n",
       "      <th>Idle Mean</th>\n",
       "      <th>Idle Std</th>\n",
       "      <th>Idle Max</th>\n",
       "      <th>Idle Min</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3268</td>\n",
       "      <td>112740690</td>\n",
       "      <td>32</td>\n",
       "      <td>16</td>\n",
       "      <td>6448</td>\n",
       "      <td>1152</td>\n",
       "      <td>403</td>\n",
       "      <td>0</td>\n",
       "      <td>201.5</td>\n",
       "      <td>204.724205</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>3.594286e+02</td>\n",
       "      <td>1.199802e+01</td>\n",
       "      <td>380</td>\n",
       "      <td>343</td>\n",
       "      <td>16100000.0</td>\n",
       "      <td>4.988048e+05</td>\n",
       "      <td>16400000</td>\n",
       "      <td>15400000</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>389</td>\n",
       "      <td>112740560</td>\n",
       "      <td>32</td>\n",
       "      <td>16</td>\n",
       "      <td>6448</td>\n",
       "      <td>5056</td>\n",
       "      <td>403</td>\n",
       "      <td>0</td>\n",
       "      <td>201.5</td>\n",
       "      <td>204.724205</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>3.202857e+02</td>\n",
       "      <td>1.574499e+01</td>\n",
       "      <td>330</td>\n",
       "      <td>285</td>\n",
       "      <td>16100000.0</td>\n",
       "      <td>4.987937e+05</td>\n",
       "      <td>16400000</td>\n",
       "      <td>15400000</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>113757377</td>\n",
       "      <td>545</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9.361829e+06</td>\n",
       "      <td>7.324646e+06</td>\n",
       "      <td>18900000</td>\n",
       "      <td>19</td>\n",
       "      <td>12200000.0</td>\n",
       "      <td>6.935824e+06</td>\n",
       "      <td>20800000</td>\n",
       "      <td>5504997</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5355</td>\n",
       "      <td>100126</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>616</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>54760</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191028</th>\n",
       "      <td>53</td>\n",
       "      <td>61452</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>180</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191029</th>\n",
       "      <td>53</td>\n",
       "      <td>171</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>80</td>\n",
       "      <td>272</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191030</th>\n",
       "      <td>53</td>\n",
       "      <td>222</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191031</th>\n",
       "      <td>123</td>\n",
       "      <td>16842</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191032</th>\n",
       "      <td>53</td>\n",
       "      <td>153</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>68</td>\n",
       "      <td>100</td>\n",
       "      <td>34</td>\n",
       "      <td>34</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>191033 rows × 79 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Destination Port   Flow Duration   Total Fwd Packets  \\\n",
       "0                    3268       112740690                  32   \n",
       "1                     389       112740560                  32   \n",
       "2                       0       113757377                 545   \n",
       "3                    5355          100126                  22   \n",
       "4                       0           54760                   4   \n",
       "...                   ...             ...                 ...   \n",
       "191028                 53           61452                   4   \n",
       "191029                 53             171                   2   \n",
       "191030                 53             222                   2   \n",
       "191031                123           16842                   1   \n",
       "191032                 53             153                   2   \n",
       "\n",
       "         Total Backward Packets  Total Length of Fwd Packets  \\\n",
       "0                            16                         6448   \n",
       "1                            16                         6448   \n",
       "2                             0                            0   \n",
       "3                             0                          616   \n",
       "4                             0                            0   \n",
       "...                         ...                          ...   \n",
       "191028                        2                          180   \n",
       "191029                        2                           80   \n",
       "191030                        2                           90   \n",
       "191031                        1                           48   \n",
       "191032                        2                           68   \n",
       "\n",
       "         Total Length of Bwd Packets   Fwd Packet Length Max  \\\n",
       "0                               1152                     403   \n",
       "1                               5056                     403   \n",
       "2                                  0                       0   \n",
       "3                                  0                      28   \n",
       "4                                  0                       0   \n",
       "...                              ...                     ...   \n",
       "191028                           354                      45   \n",
       "191029                           272                      40   \n",
       "191030                           354                      45   \n",
       "191031                            48                      48   \n",
       "191032                           100                      34   \n",
       "\n",
       "         Fwd Packet Length Min   Fwd Packet Length Mean  \\\n",
       "0                            0                    201.5   \n",
       "1                            0                    201.5   \n",
       "2                            0                      0.0   \n",
       "3                           28                     28.0   \n",
       "4                            0                      0.0   \n",
       "...                        ...                      ...   \n",
       "191028                      45                     45.0   \n",
       "191029                      40                     40.0   \n",
       "191030                      45                     45.0   \n",
       "191031                      48                     48.0   \n",
       "191032                      34                     34.0   \n",
       "\n",
       "         Fwd Packet Length Std  ...   min_seg_size_forward   Active Mean  \\\n",
       "0                   204.724205  ...                     32  3.594286e+02   \n",
       "1                   204.724205  ...                     32  3.202857e+02   \n",
       "2                     0.000000  ...                      0  9.361829e+06   \n",
       "3                     0.000000  ...                     32  0.000000e+00   \n",
       "4                     0.000000  ...                      0  0.000000e+00   \n",
       "...                        ...  ...                    ...           ...   \n",
       "191028                0.000000  ...                     20  0.000000e+00   \n",
       "191029                0.000000  ...                     32  0.000000e+00   \n",
       "191030                0.000000  ...                     32  0.000000e+00   \n",
       "191031                0.000000  ...                     20  0.000000e+00   \n",
       "191032                0.000000  ...                     20  0.000000e+00   \n",
       "\n",
       "          Active Std   Active Max   Active Min   Idle Mean      Idle Std  \\\n",
       "0       1.199802e+01          380          343  16100000.0  4.988048e+05   \n",
       "1       1.574499e+01          330          285  16100000.0  4.987937e+05   \n",
       "2       7.324646e+06     18900000           19  12200000.0  6.935824e+06   \n",
       "3       0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "4       0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "...              ...          ...          ...         ...           ...   \n",
       "191028  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191029  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191030  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191031  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191032  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "\n",
       "         Idle Max   Idle Min   Label  \n",
       "0        16400000   15400000  BENIGN  \n",
       "1        16400000   15400000  BENIGN  \n",
       "2        20800000    5504997  BENIGN  \n",
       "3               0          0  BENIGN  \n",
       "4               0          0  BENIGN  \n",
       "...           ...        ...     ...  \n",
       "191028          0          0  BENIGN  \n",
       "191029          0          0  BENIGN  \n",
       "191030          0          0  BENIGN  \n",
       "191031          0          0  BENIGN  \n",
       "191032          0          0  BENIGN  \n",
       "\n",
       "[191033 rows x 79 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "print(\"\\nMorning DataFrame:\")\n",
    "morning_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a5ecb55e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:34.832273Z",
     "iopub.status.busy": "2024-07-10T08:58:34.831259Z",
     "iopub.status.idle": "2024-07-10T08:58:34.851668Z",
     "shell.execute_reply": "2024-07-10T08:58:34.850477Z"
    },
    "papermill": {
     "duration": 0.045445,
     "end_time": "2024-07-10T08:58:34.855132",
     "exception": false,
     "start_time": "2024-07-10T08:58:34.809687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Features DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No.</th>\n",
       "      <th>Name</th>\n",
       "      <th>Type</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>srcip</td>\n",
       "      <td>nominal</td>\n",
       "      <td>Source IP address</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>sport</td>\n",
       "      <td>integer</td>\n",
       "      <td>Source port number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>dstip</td>\n",
       "      <td>nominal</td>\n",
       "      <td>Destination IP address</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>dsport</td>\n",
       "      <td>integer</td>\n",
       "      <td>Destination port number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>proto</td>\n",
       "      <td>nominal</td>\n",
       "      <td>Transaction protocol</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>state</td>\n",
       "      <td>nominal</td>\n",
       "      <td>Indicates to the state and its dependent proto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>dur</td>\n",
       "      <td>Float</td>\n",
       "      <td>Record total duration</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>sbytes</td>\n",
       "      <td>Integer</td>\n",
       "      <td>Source to destination transaction bytes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>dbytes</td>\n",
       "      <td>Integer</td>\n",
       "      <td>Destination to source transaction bytes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>sttl</td>\n",
       "      <td>Integer</td>\n",
       "      <td>Source to destination time to live value</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>dttl</td>\n",
       "      <td>Integer</td>\n",
       "      <td>Destination to source time to live value</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>sloss</td>\n",
       "      <td>Integer</td>\n",
       "      <td>Source packets retransmitted or dropped</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>dloss</td>\n",
       "      <td>Integer</td>\n",
       "      <td>Destination packets retransmitted or dropped</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>service</td>\n",
       "      <td>nominal</td>\n",
       "      <td>http, ftp, smtp, ssh, dns, ftp-data ,irc  and ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>Sload</td>\n",
       "      <td>Float</td>\n",
       "      <td>Source bits per second</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Dload</td>\n",
       "      <td>Float</td>\n",
       "      <td>Destination bits per second</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Spkts</td>\n",
       "      <td>integer</td>\n",
       "      <td>Source to destination packet count</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Dpkts</td>\n",
       "      <td>integer</td>\n",
       "      <td>Destination to source packet count</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>swin</td>\n",
       "      <td>integer</td>\n",
       "      <td>Source TCP window advertisement value</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>dwin</td>\n",
       "      <td>integer</td>\n",
       "      <td>Destination TCP window advertisement value</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>stcpb</td>\n",
       "      <td>integer</td>\n",
       "      <td>Source TCP base sequence number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>dtcpb</td>\n",
       "      <td>integer</td>\n",
       "      <td>Destination TCP base sequence number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>smeansz</td>\n",
       "      <td>integer</td>\n",
       "      <td>Mean of the ?ow packet size transmitted by the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>dmeansz</td>\n",
       "      <td>integer</td>\n",
       "      <td>Mean of the ?ow packet size transmitted by the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>trans_depth</td>\n",
       "      <td>integer</td>\n",
       "      <td>Represents the pipelined depth into the connec...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>res_bdy_len</td>\n",
       "      <td>integer</td>\n",
       "      <td>Actual uncompressed content size of the data t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>Sjit</td>\n",
       "      <td>Float</td>\n",
       "      <td>Source jitter (mSec)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>Djit</td>\n",
       "      <td>Float</td>\n",
       "      <td>Destination jitter (mSec)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>Stime</td>\n",
       "      <td>Timestamp</td>\n",
       "      <td>record start time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>Ltime</td>\n",
       "      <td>Timestamp</td>\n",
       "      <td>record last time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>31</td>\n",
       "      <td>Sintpkt</td>\n",
       "      <td>Float</td>\n",
       "      <td>Source interpacket arrival time (mSec)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>Dintpkt</td>\n",
       "      <td>Float</td>\n",
       "      <td>Destination interpacket arrival time (mSec)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>33</td>\n",
       "      <td>tcprtt</td>\n",
       "      <td>Float</td>\n",
       "      <td>TCP connection setup round-trip time, the sum ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>synack</td>\n",
       "      <td>Float</td>\n",
       "      <td>TCP connection setup time, the time between th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>35</td>\n",
       "      <td>ackdat</td>\n",
       "      <td>Float</td>\n",
       "      <td>TCP connection setup time, the time between th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>36</td>\n",
       "      <td>is_sm_ips_ports</td>\n",
       "      <td>Binary</td>\n",
       "      <td>If source (1) and destination (3)IP addresses ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>37</td>\n",
       "      <td>ct_state_ttl</td>\n",
       "      <td>Integer</td>\n",
       "      <td>No. for each state (6) according to specific r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>ct_flw_http_mthd</td>\n",
       "      <td>Integer</td>\n",
       "      <td>No. of flows that has methods such as Get and ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>is_ftp_login</td>\n",
       "      <td>Binary</td>\n",
       "      <td>If the ftp session is accessed by user and pas...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>ct_ftp_cmd</td>\n",
       "      <td>integer</td>\n",
       "      <td>No of flows that has a command in ftp session.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>41</td>\n",
       "      <td>ct_srv_src</td>\n",
       "      <td>integer</td>\n",
       "      <td>No. of connections that contain the same servi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>ct_srv_dst</td>\n",
       "      <td>integer</td>\n",
       "      <td>No. of connections that contain the same servi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>ct_dst_ltm</td>\n",
       "      <td>integer</td>\n",
       "      <td>No. of connections of the same destination add...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>ct_src_ ltm</td>\n",
       "      <td>integer</td>\n",
       "      <td>No. of connections of the same source address ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>ct_src_dport_ltm</td>\n",
       "      <td>integer</td>\n",
       "      <td>No of connections of the same source address (...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>ct_dst_sport_ltm</td>\n",
       "      <td>integer</td>\n",
       "      <td>No of connections of the same destination addr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>47</td>\n",
       "      <td>ct_dst_src_ltm</td>\n",
       "      <td>integer</td>\n",
       "      <td>No of connections of the same source (1) and t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>attack_cat</td>\n",
       "      <td>nominal</td>\n",
       "      <td>The name of each attack category. In this data...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>49</td>\n",
       "      <td>Label</td>\n",
       "      <td>binary</td>\n",
       "      <td>0 for normal and 1 for attack records</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    No.              Name      Type   \\\n",
       "0     1             srcip    nominal   \n",
       "1     2             sport    integer   \n",
       "2     3             dstip    nominal   \n",
       "3     4            dsport    integer   \n",
       "4     5             proto    nominal   \n",
       "5     6             state    nominal   \n",
       "6     7               dur      Float   \n",
       "7     8            sbytes    Integer   \n",
       "8     9            dbytes    Integer   \n",
       "9    10              sttl    Integer   \n",
       "10   11              dttl    Integer   \n",
       "11   12             sloss    Integer   \n",
       "12   13             dloss    Integer   \n",
       "13   14           service    nominal   \n",
       "14   15             Sload      Float   \n",
       "15   16             Dload      Float   \n",
       "16   17             Spkts    integer   \n",
       "17   18             Dpkts    integer   \n",
       "18   19              swin    integer   \n",
       "19   20              dwin    integer   \n",
       "20   21             stcpb    integer   \n",
       "21   22             dtcpb    integer   \n",
       "22   23           smeansz    integer   \n",
       "23   24           dmeansz    integer   \n",
       "24   25       trans_depth    integer   \n",
       "25   26       res_bdy_len    integer   \n",
       "26   27              Sjit      Float   \n",
       "27   28              Djit      Float   \n",
       "28   29             Stime  Timestamp   \n",
       "29   30             Ltime  Timestamp   \n",
       "30   31           Sintpkt      Float   \n",
       "31   32           Dintpkt      Float   \n",
       "32   33            tcprtt      Float   \n",
       "33   34            synack      Float   \n",
       "34   35            ackdat      Float   \n",
       "35   36   is_sm_ips_ports     Binary   \n",
       "36   37      ct_state_ttl    Integer   \n",
       "37   38  ct_flw_http_mthd    Integer   \n",
       "38   39      is_ftp_login     Binary   \n",
       "39   40        ct_ftp_cmd    integer   \n",
       "40   41        ct_srv_src    integer   \n",
       "41   42        ct_srv_dst    integer   \n",
       "42   43        ct_dst_ltm    integer   \n",
       "43   44       ct_src_ ltm    integer   \n",
       "44   45  ct_src_dport_ltm    integer   \n",
       "45   46  ct_dst_sport_ltm    integer   \n",
       "46   47    ct_dst_src_ltm    integer   \n",
       "47   48        attack_cat    nominal   \n",
       "48   49             Label     binary   \n",
       "\n",
       "                                          Description  \n",
       "0                                   Source IP address  \n",
       "1                                  Source port number  \n",
       "2                              Destination IP address  \n",
       "3                             Destination port number  \n",
       "4                                Transaction protocol  \n",
       "5   Indicates to the state and its dependent proto...  \n",
       "6                               Record total duration  \n",
       "7            Source to destination transaction bytes   \n",
       "8             Destination to source transaction bytes  \n",
       "9           Source to destination time to live value   \n",
       "10           Destination to source time to live value  \n",
       "11           Source packets retransmitted or dropped   \n",
       "12       Destination packets retransmitted or dropped  \n",
       "13  http, ftp, smtp, ssh, dns, ftp-data ,irc  and ...  \n",
       "14                             Source bits per second  \n",
       "15                        Destination bits per second  \n",
       "16                Source to destination packet count   \n",
       "17                 Destination to source packet count  \n",
       "18              Source TCP window advertisement value  \n",
       "19         Destination TCP window advertisement value  \n",
       "20                    Source TCP base sequence number  \n",
       "21               Destination TCP base sequence number  \n",
       "22  Mean of the ?ow packet size transmitted by the...  \n",
       "23  Mean of the ?ow packet size transmitted by the...  \n",
       "24  Represents the pipelined depth into the connec...  \n",
       "25  Actual uncompressed content size of the data t...  \n",
       "26                               Source jitter (mSec)  \n",
       "27                          Destination jitter (mSec)  \n",
       "28                                  record start time  \n",
       "29                                   record last time  \n",
       "30             Source interpacket arrival time (mSec)  \n",
       "31        Destination interpacket arrival time (mSec)  \n",
       "32  TCP connection setup round-trip time, the sum ...  \n",
       "33  TCP connection setup time, the time between th...  \n",
       "34  TCP connection setup time, the time between th...  \n",
       "35  If source (1) and destination (3)IP addresses ...  \n",
       "36  No. for each state (6) according to specific r...  \n",
       "37  No. of flows that has methods such as Get and ...  \n",
       "38  If the ftp session is accessed by user and pas...  \n",
       "39     No of flows that has a command in ftp session.  \n",
       "40  No. of connections that contain the same servi...  \n",
       "41  No. of connections that contain the same servi...  \n",
       "42  No. of connections of the same destination add...  \n",
       "43  No. of connections of the same source address ...  \n",
       "44  No of connections of the same source address (...  \n",
       "45  No of connections of the same destination addr...  \n",
       "46  No of connections of the same source (1) and t...  \n",
       "47  The name of each attack category. In this data...  \n",
       "48              0 for normal and 1 for attack records  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"\\nFeatures DataFrame:\")\n",
    "nusw_nb15_features_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6bb7aeff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:34.895961Z",
     "iopub.status.busy": "2024-07-10T08:58:34.895574Z",
     "iopub.status.idle": "2024-07-10T08:58:35.126380Z",
     "shell.execute_reply": "2024-07-10T08:58:35.125162Z"
    },
    "papermill": {
     "duration": 0.254506,
     "end_time": "2024-07-10T08:58:35.129425",
     "exception": false,
     "start_time": "2024-07-10T08:58:34.874919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flow Duration</th>\n",
       "      <th>Total Fwd Packets</th>\n",
       "      <th>Total Backward Packets</th>\n",
       "      <th>Total Length of Fwd Packets</th>\n",
       "      <th>Total Length of Bwd Packets</th>\n",
       "      <th>Fwd Packet Length Max</th>\n",
       "      <th>Fwd Packet Length Min</th>\n",
       "      <th>Fwd Packet Length Mean</th>\n",
       "      <th>Fwd Packet Length Std</th>\n",
       "      <th>Bwd Packet Length Max</th>\n",
       "      <th>...</th>\n",
       "      <th>min_seg_size_forward</th>\n",
       "      <th>Active Mean</th>\n",
       "      <th>Active Std</th>\n",
       "      <th>Active Max</th>\n",
       "      <th>Active Min</th>\n",
       "      <th>Idle Mean</th>\n",
       "      <th>Idle Std</th>\n",
       "      <th>Idle Max</th>\n",
       "      <th>Idle Min</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>112740690</td>\n",
       "      <td>32</td>\n",
       "      <td>16</td>\n",
       "      <td>6448</td>\n",
       "      <td>1152</td>\n",
       "      <td>403</td>\n",
       "      <td>0</td>\n",
       "      <td>201.5</td>\n",
       "      <td>204.724205</td>\n",
       "      <td>72</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>3.594286e+02</td>\n",
       "      <td>1.199802e+01</td>\n",
       "      <td>380</td>\n",
       "      <td>343</td>\n",
       "      <td>16100000.0</td>\n",
       "      <td>4.988048e+05</td>\n",
       "      <td>16400000</td>\n",
       "      <td>15400000</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>112740560</td>\n",
       "      <td>32</td>\n",
       "      <td>16</td>\n",
       "      <td>6448</td>\n",
       "      <td>5056</td>\n",
       "      <td>403</td>\n",
       "      <td>0</td>\n",
       "      <td>201.5</td>\n",
       "      <td>204.724205</td>\n",
       "      <td>316</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>3.202857e+02</td>\n",
       "      <td>1.574499e+01</td>\n",
       "      <td>330</td>\n",
       "      <td>285</td>\n",
       "      <td>16100000.0</td>\n",
       "      <td>4.987937e+05</td>\n",
       "      <td>16400000</td>\n",
       "      <td>15400000</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>113757377</td>\n",
       "      <td>545</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9.361829e+06</td>\n",
       "      <td>7.324646e+06</td>\n",
       "      <td>18900000</td>\n",
       "      <td>19</td>\n",
       "      <td>12200000.0</td>\n",
       "      <td>6.935824e+06</td>\n",
       "      <td>20800000</td>\n",
       "      <td>5504997</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100126</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>616</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54760</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191028</th>\n",
       "      <td>61452</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>180</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>177</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191029</th>\n",
       "      <td>171</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>80</td>\n",
       "      <td>272</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>136</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191030</th>\n",
       "      <td>222</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>177</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191031</th>\n",
       "      <td>16842</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>48</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191032</th>\n",
       "      <td>153</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>68</td>\n",
       "      <td>100</td>\n",
       "      <td>34</td>\n",
       "      <td>34</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>50</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>BENIGN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>191033 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Flow Duration   Total Fwd Packets   Total Backward Packets  \\\n",
       "0            112740690                  32                       16   \n",
       "1            112740560                  32                       16   \n",
       "2            113757377                 545                        0   \n",
       "3               100126                  22                        0   \n",
       "4                54760                   4                        0   \n",
       "...                ...                 ...                      ...   \n",
       "191028           61452                   4                        2   \n",
       "191029             171                   2                        2   \n",
       "191030             222                   2                        2   \n",
       "191031           16842                   1                        1   \n",
       "191032             153                   2                        2   \n",
       "\n",
       "        Total Length of Fwd Packets   Total Length of Bwd Packets  \\\n",
       "0                              6448                          1152   \n",
       "1                              6448                          5056   \n",
       "2                                 0                             0   \n",
       "3                               616                             0   \n",
       "4                                 0                             0   \n",
       "...                             ...                           ...   \n",
       "191028                          180                           354   \n",
       "191029                           80                           272   \n",
       "191030                           90                           354   \n",
       "191031                           48                            48   \n",
       "191032                           68                           100   \n",
       "\n",
       "         Fwd Packet Length Max   Fwd Packet Length Min  \\\n",
       "0                          403                       0   \n",
       "1                          403                       0   \n",
       "2                            0                       0   \n",
       "3                           28                      28   \n",
       "4                            0                       0   \n",
       "...                        ...                     ...   \n",
       "191028                      45                      45   \n",
       "191029                      40                      40   \n",
       "191030                      45                      45   \n",
       "191031                      48                      48   \n",
       "191032                      34                      34   \n",
       "\n",
       "         Fwd Packet Length Mean   Fwd Packet Length Std  \\\n",
       "0                         201.5              204.724205   \n",
       "1                         201.5              204.724205   \n",
       "2                           0.0                0.000000   \n",
       "3                          28.0                0.000000   \n",
       "4                           0.0                0.000000   \n",
       "...                         ...                     ...   \n",
       "191028                     45.0                0.000000   \n",
       "191029                     40.0                0.000000   \n",
       "191030                     45.0                0.000000   \n",
       "191031                     48.0                0.000000   \n",
       "191032                     34.0                0.000000   \n",
       "\n",
       "        Bwd Packet Length Max  ...   min_seg_size_forward   Active Mean  \\\n",
       "0                          72  ...                     32  3.594286e+02   \n",
       "1                         316  ...                     32  3.202857e+02   \n",
       "2                           0  ...                      0  9.361829e+06   \n",
       "3                           0  ...                     32  0.000000e+00   \n",
       "4                           0  ...                      0  0.000000e+00   \n",
       "...                       ...  ...                    ...           ...   \n",
       "191028                    177  ...                     20  0.000000e+00   \n",
       "191029                    136  ...                     32  0.000000e+00   \n",
       "191030                    177  ...                     32  0.000000e+00   \n",
       "191031                     48  ...                     20  0.000000e+00   \n",
       "191032                     50  ...                     20  0.000000e+00   \n",
       "\n",
       "          Active Std   Active Max   Active Min   Idle Mean      Idle Std  \\\n",
       "0       1.199802e+01          380          343  16100000.0  4.988048e+05   \n",
       "1       1.574499e+01          330          285  16100000.0  4.987937e+05   \n",
       "2       7.324646e+06     18900000           19  12200000.0  6.935824e+06   \n",
       "3       0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "4       0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "...              ...          ...          ...         ...           ...   \n",
       "191028  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191029  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191030  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191031  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "191032  0.000000e+00            0            0         0.0  0.000000e+00   \n",
       "\n",
       "         Idle Max   Idle Min   Label  \n",
       "0        16400000   15400000  BENIGN  \n",
       "1        16400000   15400000  BENIGN  \n",
       "2        20800000    5504997  BENIGN  \n",
       "3               0          0  BENIGN  \n",
       "4               0          0  BENIGN  \n",
       "...           ...        ...     ...  \n",
       "191028          0          0  BENIGN  \n",
       "191029          0          0  BENIGN  \n",
       "191030          0          0  BENIGN  \n",
       "191031          0          0  BENIGN  \n",
       "191032          0          0  BENIGN  \n",
       "\n",
       "[191033 rows x 78 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "afternoon_ddos_df = afternoon_ddos_df.iloc[:, 1:]\n",
    "afternoon_portscan_df = afternoon_portscan_df.iloc[:, 1:]\n",
    "morning_df = morning_df.iloc[:, 1:]\n",
    "morning_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb5365b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:35.173487Z",
     "iopub.status.busy": "2024-07-10T08:58:35.173035Z",
     "iopub.status.idle": "2024-07-10T08:58:35.352568Z",
     "shell.execute_reply": "2024-07-10T08:58:35.351333Z"
    },
    "papermill": {
     "duration": 0.204705,
     "end_time": "2024-07-10T08:58:35.355346",
     "exception": false,
     "start_time": "2024-07-10T08:58:35.150641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([' Flow Duration', ' Total Fwd Packets', ' Total Backward Packets',\n",
       "       'Total Length of Fwd Packets', ' Total Length of Bwd Packets',\n",
       "       ' Fwd Packet Length Max', ' Fwd Packet Length Min',\n",
       "       ' Fwd Packet Length Mean', ' Fwd Packet Length Std',\n",
       "       'Bwd Packet Length Max', ' Bwd Packet Length Min',\n",
       "       ' Bwd Packet Length Mean', ' Bwd Packet Length Std', 'Flow Bytes/s',\n",
       "       ' Flow Packets/s', ' Flow IAT Mean', ' Flow IAT Std', ' Flow IAT Max',\n",
       "       ' Flow IAT Min', 'Fwd IAT Total', ' Fwd IAT Mean', ' Fwd IAT Std',\n",
       "       ' Fwd IAT Max', ' Fwd IAT Min', 'Bwd IAT Total', ' Bwd IAT Mean',\n",
       "       ' Bwd IAT Std', ' Bwd IAT Max', ' Bwd IAT Min', 'Fwd PSH Flags',\n",
       "       ' Bwd PSH Flags', ' Fwd URG Flags', ' Bwd URG Flags',\n",
       "       ' Fwd Header Length', ' Bwd Header Length', 'Fwd Packets/s',\n",
       "       ' Bwd Packets/s', ' Min Packet Length', ' Max Packet Length',\n",
       "       ' Packet Length Mean', ' Packet Length Std', ' Packet Length Variance',\n",
       "       'FIN Flag Count', ' SYN Flag Count', ' RST Flag Count',\n",
       "       ' PSH Flag Count', ' ACK Flag Count', ' URG Flag Count',\n",
       "       ' CWE Flag Count', ' ECE Flag Count', ' Down/Up Ratio',\n",
       "       ' Average Packet Size', ' Avg Fwd Segment Size',\n",
       "       ' Avg Bwd Segment Size', ' Fwd Header Length.1', 'Fwd Avg Bytes/Bulk',\n",
       "       ' Fwd Avg Packets/Bulk', ' Fwd Avg Bulk Rate', ' Bwd Avg Bytes/Bulk',\n",
       "       ' Bwd Avg Packets/Bulk', 'Bwd Avg Bulk Rate', 'Subflow Fwd Packets',\n",
       "       ' Subflow Fwd Bytes', ' Subflow Bwd Packets', ' Subflow Bwd Bytes',\n",
       "       'Init_Win_bytes_forward', ' Init_Win_bytes_backward',\n",
       "       ' act_data_pkt_fwd', ' min_seg_size_forward', 'Active Mean',\n",
       "       ' Active Std', ' Active Max', ' Active Min', 'Idle Mean', ' Idle Std',\n",
       "       ' Idle Max', ' Idle Min', ' Label'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_cicids = pd.concat([afternoon_ddos_df,afternoon_portscan_df,morning_df])\n",
    "final_cicids.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "999e42a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:35.398709Z",
     "iopub.status.busy": "2024-07-10T08:58:35.397553Z",
     "iopub.status.idle": "2024-07-10T08:58:35.507320Z",
     "shell.execute_reply": "2024-07-10T08:58:35.505307Z"
    },
    "papermill": {
     "duration": 0.134777,
     "end_time": "2024-07-10T08:58:35.510630",
     "exception": false,
     "start_time": "2024-07-10T08:58:35.375853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flow Bytes/s  ->  6796     NaN\n",
      "14739    NaN\n",
      "15047    NaN\n",
      "209728   NaN\n",
      "12824    NaN\n",
      "12827    NaN\n",
      "14192    NaN\n",
      "40707    NaN\n",
      "52456    NaN\n",
      "56603    NaN\n",
      "76549    NaN\n",
      "76773    NaN\n",
      "225846   NaN\n",
      "237968   NaN\n",
      "238016   NaN\n",
      "239586   NaN\n",
      "253214   NaN\n",
      "259076   NaN\n",
      "259682   NaN\n",
      "10832    NaN\n",
      "20901    NaN\n",
      "23789    NaN\n",
      "26374    NaN\n",
      "34541    NaN\n",
      "36102    NaN\n",
      "36883    NaN\n",
      "39729    NaN\n",
      "49812    NaN\n",
      "57793    NaN\n",
      "63707    NaN\n",
      "70816    NaN\n",
      "87757    NaN\n",
      "107340   NaN\n",
      "120282   NaN\n",
      "122940   NaN\n",
      "126281   NaN\n",
      "126402   NaN\n",
      "130158   NaN\n",
      "131386   NaN\n",
      "131841   NaN\n",
      "131982   NaN\n",
      "135275   NaN\n",
      "158875   NaN\n",
      "164857   NaN\n",
      "171777   NaN\n",
      "180400   NaN\n",
      "189205   NaN\n",
      "Name: Flow Bytes/s, dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3928646995.py:4: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  a = pd.to_numeric(final_cicids[cols], errors='ignore')#converts values into numeric, '1.0' to 1.0 and 'abc' and np.inf to NaN\n"
     ]
    }
   ],
   "source": [
    "for cols in final_cicids.columns:\n",
    "    if( cols == \" Label\" ):\n",
    "        continue\n",
    "    a = pd.to_numeric(final_cicids[cols], errors='ignore')#converts values into numeric, '1.0' to 1.0 and 'abc' and np.inf to NaN\n",
    "    idx = a.isna()\n",
    "    x = final_cicids[idx][cols]\n",
    "    if( x.empty == False ):\n",
    "        print(cols,\" -> \",final_cicids[idx][cols])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b14f2dcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:35.553948Z",
     "iopub.status.busy": "2024-07-10T08:58:35.553520Z",
     "iopub.status.idle": "2024-07-10T08:58:36.810518Z",
     "shell.execute_reply": "2024-07-10T08:58:36.809278Z"
    },
    "papermill": {
     "duration": 1.281842,
     "end_time": "2024-07-10T08:58:36.813300",
     "exception": false,
     "start_time": "2024-07-10T08:58:35.531458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(703245, 78)\n"
     ]
    }
   ],
   "source": [
    "#replacing infinte to Nan, then will replace Nan with mode/mean\n",
    "final_cicids.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
    "\n",
    "\n",
    "#Drop the columns which have more than 25% NaN or NULL values\n",
    "perc = 25.0\n",
    "min_count =  int(((100-perc)/100)*final_cicids.shape[0] + 1)\n",
    "final_cicids.dropna( axis=1, thresh=min_count, inplace=True)\n",
    "print(final_cicids.shape)\n",
    "\n",
    "# replace NaN/NULL values in other columns with the average( or most repetitive) value of the corresponding column.\n",
    "for cols in final_cicids.columns:\n",
    "    if( cols == \" Label\" ):\n",
    "        continue\n",
    "    final_cicids[cols] = final_cicids[cols].fillna(final_cicids[cols].mean())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "676d09b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:36.856730Z",
     "iopub.status.busy": "2024-07-10T08:58:36.855762Z",
     "iopub.status.idle": "2024-07-10T08:58:36.892483Z",
     "shell.execute_reply": "2024-07-10T08:58:36.891562Z"
    },
    "papermill": {
     "duration": 0.061474,
     "end_time": "2024-07-10T08:58:36.895296",
     "exception": false,
     "start_time": "2024-07-10T08:58:36.833822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#prints the columns having atlest one NaN\n",
    "for cols in final_cicids.columns:\n",
    "    if( cols == \" Label\" ):\n",
    "        continue\n",
    "    if( final_cicids[cols].isnull().values.any() == True):\n",
    "        print( cols )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4b1de5c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:36.942479Z",
     "iopub.status.busy": "2024-07-10T08:58:36.942075Z",
     "iopub.status.idle": "2024-07-10T08:58:37.230923Z",
     "shell.execute_reply": "2024-07-10T08:58:37.229784Z"
    },
    "papermill": {
     "duration": 0.314511,
     "end_time": "2024-07-10T08:58:37.234223",
     "exception": false,
     "start_time": "2024-07-10T08:58:36.919712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# Replace all the attack labels with label ‘1’ and benign/no-attack sample labels with label ‘0’.\n",
    "\n",
    "final_cicids.loc[final_cicids[\" Label\"] == \"BENIGN\", \" Label\"] = 0\n",
    "final_cicids.loc[final_cicids[\" Label\"] != 0, \" Label\"] = 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "49dbb197",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:37.277866Z",
     "iopub.status.busy": "2024-07-10T08:58:37.277461Z",
     "iopub.status.idle": "2024-07-10T08:58:39.877553Z",
     "shell.execute_reply": "2024-07-10T08:58:39.876325Z"
    },
    "papermill": {
     "duration": 2.625512,
     "end_time": "2024-07-10T08:58:39.880355",
     "exception": false,
     "start_time": "2024-07-10T08:58:37.254843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flow Duration</th>\n",
       "      <th>Total Fwd Packets</th>\n",
       "      <th>Total Backward Packets</th>\n",
       "      <th>Total Length of Fwd Packets</th>\n",
       "      <th>Total Length of Bwd Packets</th>\n",
       "      <th>Fwd Packet Length Max</th>\n",
       "      <th>Fwd Packet Length Min</th>\n",
       "      <th>Fwd Packet Length Mean</th>\n",
       "      <th>Fwd Packet Length Std</th>\n",
       "      <th>Bwd Packet Length Max</th>\n",
       "      <th>...</th>\n",
       "      <th>min_seg_size_forward</th>\n",
       "      <th>Active Mean</th>\n",
       "      <th>Active Std</th>\n",
       "      <th>Active Max</th>\n",
       "      <th>Active Min</th>\n",
       "      <th>Idle Mean</th>\n",
       "      <th>Idle Std</th>\n",
       "      <th>Idle Max</th>\n",
       "      <th>Idle Min</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>109</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>52</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191028</th>\n",
       "      <td>61452</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>180</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>177</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191029</th>\n",
       "      <td>171</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>80</td>\n",
       "      <td>272</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>136</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191030</th>\n",
       "      <td>222</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>90</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>177</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191031</th>\n",
       "      <td>16842</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191032</th>\n",
       "      <td>153</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>68</td>\n",
       "      <td>100</td>\n",
       "      <td>34</td>\n",
       "      <td>34</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>507341 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Flow Duration   Total Fwd Packets   Total Backward Packets  \\\n",
       "0                    3                   2                        0   \n",
       "1                  109                   1                        1   \n",
       "2                   52                   1                        1   \n",
       "3                   34                   1                        1   \n",
       "4                    3                   2                        0   \n",
       "...                ...                 ...                      ...   \n",
       "191028           61452                   4                        2   \n",
       "191029             171                   2                        2   \n",
       "191030             222                   2                        2   \n",
       "191031           16842                   1                        1   \n",
       "191032             153                   2                        2   \n",
       "\n",
       "        Total Length of Fwd Packets   Total Length of Bwd Packets  \\\n",
       "0                                12                             0   \n",
       "1                                 6                             6   \n",
       "2                                 6                             6   \n",
       "3                                 6                             6   \n",
       "4                                12                             0   \n",
       "...                             ...                           ...   \n",
       "191028                          180                           354   \n",
       "191029                           80                           272   \n",
       "191030                           90                           354   \n",
       "191031                           48                            48   \n",
       "191032                           68                           100   \n",
       "\n",
       "         Fwd Packet Length Max   Fwd Packet Length Min  \\\n",
       "0                            6                       6   \n",
       "1                            6                       6   \n",
       "2                            6                       6   \n",
       "3                            6                       6   \n",
       "4                            6                       6   \n",
       "...                        ...                     ...   \n",
       "191028                      45                      45   \n",
       "191029                      40                      40   \n",
       "191030                      45                      45   \n",
       "191031                      48                      48   \n",
       "191032                      34                      34   \n",
       "\n",
       "         Fwd Packet Length Mean   Fwd Packet Length Std  \\\n",
       "0                           6.0                     0.0   \n",
       "1                           6.0                     0.0   \n",
       "2                           6.0                     0.0   \n",
       "3                           6.0                     0.0   \n",
       "4                           6.0                     0.0   \n",
       "...                         ...                     ...   \n",
       "191028                     45.0                     0.0   \n",
       "191029                     40.0                     0.0   \n",
       "191030                     45.0                     0.0   \n",
       "191031                     48.0                     0.0   \n",
       "191032                     34.0                     0.0   \n",
       "\n",
       "        Bwd Packet Length Max  ...   min_seg_size_forward  Active Mean  \\\n",
       "0                           0  ...                     20          0.0   \n",
       "1                           6  ...                     20          0.0   \n",
       "2                           6  ...                     20          0.0   \n",
       "3                           6  ...                     20          0.0   \n",
       "4                           0  ...                     20          0.0   \n",
       "...                       ...  ...                    ...          ...   \n",
       "191028                    177  ...                     20          0.0   \n",
       "191029                    136  ...                     32          0.0   \n",
       "191030                    177  ...                     32          0.0   \n",
       "191031                     48  ...                     20          0.0   \n",
       "191032                     50  ...                     20          0.0   \n",
       "\n",
       "         Active Std   Active Max   Active Min  Idle Mean   Idle Std  \\\n",
       "0               0.0            0            0        0.0        0.0   \n",
       "1               0.0            0            0        0.0        0.0   \n",
       "2               0.0            0            0        0.0        0.0   \n",
       "3               0.0            0            0        0.0        0.0   \n",
       "4               0.0            0            0        0.0        0.0   \n",
       "...             ...          ...          ...        ...        ...   \n",
       "191028          0.0            0            0        0.0        0.0   \n",
       "191029          0.0            0            0        0.0        0.0   \n",
       "191030          0.0            0            0        0.0        0.0   \n",
       "191031          0.0            0            0        0.0        0.0   \n",
       "191032          0.0            0            0        0.0        0.0   \n",
       "\n",
       "         Idle Max   Idle Min   Label  \n",
       "0               0          0       0  \n",
       "1               0          0       0  \n",
       "2               0          0       0  \n",
       "3               0          0       0  \n",
       "4               0          0       0  \n",
       "...           ...        ...     ...  \n",
       "191028          0          0       0  \n",
       "191029          0          0       0  \n",
       "191030          0          0       0  \n",
       "191031          0          0       0  \n",
       "191032          0          0       0  \n",
       "\n",
       "[507341 rows x 78 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_cicids = final_cicids.drop_duplicates()\n",
    "final_cicids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7ce404e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:39.926612Z",
     "iopub.status.busy": "2024-07-10T08:58:39.925633Z",
     "iopub.status.idle": "2024-07-10T08:58:39.940009Z",
     "shell.execute_reply": "2024-07-10T08:58:39.938499Z"
    },
    "papermill": {
     "duration": 0.040409,
     "end_time": "2024-07-10T08:58:39.942595",
     "exception": false,
     "start_time": "2024-07-10T08:58:39.902186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Label:\n",
      "0    0\n",
      "1    0\n",
      "2    0\n",
      "3    0\n",
      "4    0\n",
      "Name:  Label, dtype: object\n",
      "\n",
      "0         0\n",
      "1         0\n",
      "2         0\n",
      "3         0\n",
      "4         0\n",
      "         ..\n",
      "191028    0\n",
      "191029    0\n",
      "191030    0\n",
      "191031    0\n",
      "191032    0\n",
      "Name:  Label, Length: 507341, dtype: object\n"
     ]
    }
   ],
   "source": [
    "categorical_columns = final_cicids.select_dtypes(include=['object']).columns\n",
    "for col in categorical_columns:\n",
    "    print(f\"{col}:\\n{final_cicids[col].head()}\\n\")\n",
    "print(final_cicids[' Label'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9ef1645c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:39.988298Z",
     "iopub.status.busy": "2024-07-10T08:58:39.987915Z",
     "iopub.status.idle": "2024-07-10T08:58:54.765092Z",
     "shell.execute_reply": "2024-07-10T08:58:54.763876Z"
    },
    "papermill": {
     "duration": 14.802987,
     "end_time": "2024-07-10T08:58:54.768089",
     "exception": false,
     "start_time": "2024-07-10T08:58:39.965102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(final_cicids)\n",
    "final_cicids_normalized = scaler.transform(final_cicids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dd11165d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:54.812207Z",
     "iopub.status.busy": "2024-07-10T08:58:54.811798Z",
     "iopub.status.idle": "2024-07-10T08:58:54.847506Z",
     "shell.execute_reply": "2024-07-10T08:58:54.846264Z"
    },
    "papermill": {
     "duration": 0.06095,
     "end_time": "2024-07-10T08:58:54.850146",
     "exception": false,
     "start_time": "2024-07-10T08:58:54.789196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flow Duration</th>\n",
       "      <th>Total Fwd Packets</th>\n",
       "      <th>Total Backward Packets</th>\n",
       "      <th>Total Length of Fwd Packets</th>\n",
       "      <th>Total Length of Bwd Packets</th>\n",
       "      <th>Fwd Packet Length Max</th>\n",
       "      <th>Fwd Packet Length Min</th>\n",
       "      <th>Fwd Packet Length Mean</th>\n",
       "      <th>Fwd Packet Length Std</th>\n",
       "      <th>Bwd Packet Length Max</th>\n",
       "      <th>...</th>\n",
       "      <th>min_seg_size_forward</th>\n",
       "      <th>Active Mean</th>\n",
       "      <th>Active Std</th>\n",
       "      <th>Active Max</th>\n",
       "      <th>Active Min</th>\n",
       "      <th>Idle Mean</th>\n",
       "      <th>Idle Std</th>\n",
       "      <th>Idle Max</th>\n",
       "      <th>Idle Min</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.333333e-07</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>0.002581</td>\n",
       "      <td>0.00101</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.016667e-06</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>9.569378e-09</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>0.002581</td>\n",
       "      <td>0.00101</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00046</td>\n",
       "      <td>...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.416666e-07</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>9.569378e-09</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>0.002581</td>\n",
       "      <td>0.00101</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00046</td>\n",
       "      <td>...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.916666e-07</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>9.569378e-09</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>0.002581</td>\n",
       "      <td>0.00101</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00046</td>\n",
       "      <td>...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.333333e-07</td>\n",
       "      <td>0.000005</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000010</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>0.002581</td>\n",
       "      <td>0.00101</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Flow Duration   Total Fwd Packets   Total Backward Packets  \\\n",
       "0    1.333333e-07            0.000005                 0.000000   \n",
       "1    1.016667e-06            0.000000                 0.000004   \n",
       "2    5.416666e-07            0.000000                 0.000004   \n",
       "3    3.916666e-07            0.000000                 0.000004   \n",
       "4    1.333333e-07            0.000005                 0.000000   \n",
       "\n",
       "   Total Length of Fwd Packets   Total Length of Bwd Packets  \\\n",
       "0                     0.000010                  0.000000e+00   \n",
       "1                     0.000005                  9.569378e-09   \n",
       "2                     0.000005                  9.569378e-09   \n",
       "3                     0.000005                  9.569378e-09   \n",
       "4                     0.000010                  0.000000e+00   \n",
       "\n",
       "    Fwd Packet Length Max   Fwd Packet Length Min   Fwd Packet Length Mean  \\\n",
       "0                0.000242                0.002581                  0.00101   \n",
       "1                0.000242                0.002581                  0.00101   \n",
       "2                0.000242                0.002581                  0.00101   \n",
       "3                0.000242                0.002581                  0.00101   \n",
       "4                0.000242                0.002581                  0.00101   \n",
       "\n",
       "    Fwd Packet Length Std  Bwd Packet Length Max  ...   min_seg_size_forward  \\\n",
       "0                     0.0                0.00000  ...               0.333333   \n",
       "1                     0.0                0.00046  ...               0.333333   \n",
       "2                     0.0                0.00046  ...               0.333333   \n",
       "3                     0.0                0.00046  ...               0.333333   \n",
       "4                     0.0                0.00000  ...               0.333333   \n",
       "\n",
       "   Active Mean   Active Std   Active Max   Active Min  Idle Mean   Idle Std  \\\n",
       "0          0.0          0.0          0.0          0.0        0.0        0.0   \n",
       "1          0.0          0.0          0.0          0.0        0.0        0.0   \n",
       "2          0.0          0.0          0.0          0.0        0.0        0.0   \n",
       "3          0.0          0.0          0.0          0.0        0.0        0.0   \n",
       "4          0.0          0.0          0.0          0.0        0.0        0.0   \n",
       "\n",
       "    Idle Max   Idle Min   Label  \n",
       "0        0.0        0.0     0.0  \n",
       "1        0.0        0.0     0.0  \n",
       "2        0.0        0.0     0.0  \n",
       "3        0.0        0.0     0.0  \n",
       "4        0.0        0.0     0.0  \n",
       "\n",
       "[5 rows x 78 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_cicids_normalized_df = pd.DataFrame(final_cicids_normalized, columns=final_cicids.columns)\n",
    "\n",
    "\n",
    "final_cicids_normalized_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1a30aba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:54.896345Z",
     "iopub.status.busy": "2024-07-10T08:58:54.895912Z",
     "iopub.status.idle": "2024-07-10T08:58:56.547205Z",
     "shell.execute_reply": "2024-07-10T08:58:56.545522Z"
    },
    "papermill": {
     "duration": 1.679539,
     "end_time": "2024-07-10T08:58:56.551643",
     "exception": false,
     "start_time": "2024-07-10T08:58:54.872104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import SelectKBest, chi2\n",
    "X = final_cicids_normalized_df.drop(columns=[' Label'])\n",
    "y= final_cicids_normalized_df[' Label']\n",
    "\n",
    "k_best_40 = SelectKBest(score_func=chi2, k=5)\n",
    "X_best_40 = k_best_40.fit_transform(X, y)\n",
    "\n",
    "k_best_50 = SelectKBest(score_func=chi2, k=50)\n",
    "X_best_50 = k_best_50.fit_transform(X, y) \n",
    "\n",
    "k_best_60 = SelectKBest(score_func=chi2, k=60)\n",
    "X_best_60 = k_best_60.fit_transform(X, y) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5cebd04e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:56.597727Z",
     "iopub.status.busy": "2024-07-10T08:58:56.597280Z",
     "iopub.status.idle": "2024-07-10T08:58:56.606617Z",
     "shell.execute_reply": "2024-07-10T08:58:56.605429Z"
    },
    "papermill": {
     "duration": 0.035861,
     "end_time": "2024-07-10T08:58:56.609464",
     "exception": false,
     "start_time": "2024-07-10T08:58:56.573603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected features for k=40: Index(['Bwd Packet Length Max', ' Bwd Packet Length Mean',\n",
      "       ' Bwd Packet Length Std', ' Packet Length Std',\n",
      "       ' Avg Bwd Segment Size'],\n",
      "      dtype='object')\n",
      "Selected features for k=50: Index([' Flow Duration', 'Total Length of Fwd Packets',\n",
      "       ' Fwd Packet Length Max', ' Fwd Packet Length Min',\n",
      "       ' Fwd Packet Length Mean', ' Fwd Packet Length Std',\n",
      "       'Bwd Packet Length Max', ' Bwd Packet Length Min',\n",
      "       ' Bwd Packet Length Mean', ' Bwd Packet Length Std', ' Flow IAT Mean',\n",
      "       ' Flow IAT Std', ' Flow IAT Max', ' Flow IAT Min', 'Fwd IAT Total',\n",
      "       ' Fwd IAT Std', ' Fwd IAT Max', ' Fwd IAT Min', 'Bwd IAT Total',\n",
      "       ' Bwd IAT Mean', ' Bwd IAT Std', ' Bwd IAT Max', ' Bwd IAT Min',\n",
      "       'Fwd PSH Flags', 'Fwd Packets/s', ' Bwd Packets/s',\n",
      "       ' Min Packet Length', ' Max Packet Length', ' Packet Length Mean',\n",
      "       ' Packet Length Std', ' Packet Length Variance', 'FIN Flag Count',\n",
      "       ' SYN Flag Count', ' PSH Flag Count', ' ACK Flag Count',\n",
      "       ' URG Flag Count', ' Down/Up Ratio', ' Average Packet Size',\n",
      "       ' Avg Fwd Segment Size', ' Avg Bwd Segment Size', ' Subflow Fwd Bytes',\n",
      "       'Init_Win_bytes_forward', ' Init_Win_bytes_backward',\n",
      "       ' min_seg_size_forward', ' Active Std', ' Active Min', 'Idle Mean',\n",
      "       ' Idle Std', ' Idle Max', ' Idle Min'],\n",
      "      dtype='object')\n",
      "Selected features for k=60: Index([' Flow Duration', ' Total Backward Packets',\n",
      "       'Total Length of Fwd Packets', ' Fwd Packet Length Max',\n",
      "       ' Fwd Packet Length Min', ' Fwd Packet Length Mean',\n",
      "       ' Fwd Packet Length Std', 'Bwd Packet Length Max',\n",
      "       ' Bwd Packet Length Min', ' Bwd Packet Length Mean',\n",
      "       ' Bwd Packet Length Std', ' Flow Packets/s', ' Flow IAT Mean',\n",
      "       ' Flow IAT Std', ' Flow IAT Max', ' Flow IAT Min', 'Fwd IAT Total',\n",
      "       ' Fwd IAT Mean', ' Fwd IAT Std', ' Fwd IAT Max', ' Fwd IAT Min',\n",
      "       'Bwd IAT Total', ' Bwd IAT Mean', ' Bwd IAT Std', ' Bwd IAT Max',\n",
      "       ' Bwd IAT Min', 'Fwd PSH Flags', ' Fwd Header Length',\n",
      "       ' Bwd Header Length', 'Fwd Packets/s', ' Bwd Packets/s',\n",
      "       ' Min Packet Length', ' Max Packet Length', ' Packet Length Mean',\n",
      "       ' Packet Length Std', ' Packet Length Variance', 'FIN Flag Count',\n",
      "       ' SYN Flag Count', ' RST Flag Count', ' PSH Flag Count',\n",
      "       ' ACK Flag Count', ' URG Flag Count', ' ECE Flag Count',\n",
      "       ' Down/Up Ratio', ' Average Packet Size', ' Avg Fwd Segment Size',\n",
      "       ' Avg Bwd Segment Size', ' Fwd Header Length.1', ' Subflow Fwd Bytes',\n",
      "       ' Subflow Bwd Packets', 'Init_Win_bytes_forward',\n",
      "       ' Init_Win_bytes_backward', ' min_seg_size_forward', 'Active Mean',\n",
      "       ' Active Std', ' Active Min', 'Idle Mean', ' Idle Std', ' Idle Max',\n",
      "       ' Idle Min'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "selected_features_40 = X.columns[k_best_40.get_support()]\n",
    "selected_features_50 = X.columns[k_best_50.get_support()]\n",
    "selected_features_60 = X.columns[k_best_60.get_support()]\n",
    "\n",
    "print(f\"Selected features for k=40: {selected_features_40}\")\n",
    "print(f\"Selected features for k=50: {selected_features_50}\")\n",
    "print(f\"Selected features for k=60: {selected_features_60}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ab664a7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:56.655621Z",
     "iopub.status.busy": "2024-07-10T08:58:56.655172Z",
     "iopub.status.idle": "2024-07-10T08:58:57.512453Z",
     "shell.execute_reply": "2024-07-10T08:58:57.510862Z"
    },
    "papermill": {
     "duration": 0.883565,
     "end_time": "2024-07-10T08:58:57.515340",
     "exception": false,
     "start_time": "2024-07-10T08:58:56.631775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "# Splitting for k=40\n",
    "X_40 = X[selected_features_40]\n",
    "X_train_40, X_test_40, y_train, y_test = train_test_split(X_40, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Splitting for k=50\n",
    "X_50 = X[selected_features_50]\n",
    "X_train_50, X_test_50, y_train, y_test = train_test_split(X_50, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Splitting for k=60\n",
    "X_60 = X[selected_features_60]\n",
    "X_train_60, X_test_60, y_train, y_test = train_test_split(X_60, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f1fa8402",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:57.562665Z",
     "iopub.status.busy": "2024-07-10T08:58:57.562201Z",
     "iopub.status.idle": "2024-07-10T08:58:57.690472Z",
     "shell.execute_reply": "2024-07-10T08:58:57.689244Z"
    },
    "papermill": {
     "duration": 0.155912,
     "end_time": "2024-07-10T08:58:57.693568",
     "exception": false,
     "start_time": "2024-07-10T08:58:57.537656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41ab8054",
   "metadata": {
    "papermill": {
     "duration": 0.021641,
     "end_time": "2024-07-10T08:58:57.737308",
     "exception": false,
     "start_time": "2024-07-10T08:58:57.715667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Gaussian Naive Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "67dac972",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:57.784040Z",
     "iopub.status.busy": "2024-07-10T08:58:57.783635Z",
     "iopub.status.idle": "2024-07-10T08:58:57.917309Z",
     "shell.execute_reply": "2024-07-10T08:58:57.915842Z"
    },
    "papermill": {
     "duration": 0.160946,
     "end_time": "2024-07-10T08:58:57.920111",
     "exception": false,
     "start_time": "2024-07-10T08:58:57.759165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gaussian Naive Bayes Accuracy (k=40): 0.8533\n"
     ]
    }
   ],
   "source": [
    "gnb = GaussianNB()\n",
    "gnb.fit(X_train_40, y_train)\n",
    "gnb_pred = gnb.predict(X_test_40)\n",
    "gnb_accuracy = accuracy_score(y_test, gnb_pred)\n",
    "print(f\"Gaussian Naive Bayes Accuracy (k=40): {gnb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4ecdf5b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:58.036050Z",
     "iopub.status.busy": "2024-07-10T08:58:58.035592Z",
     "iopub.status.idle": "2024-07-10T08:58:58.596139Z",
     "shell.execute_reply": "2024-07-10T08:58:58.594500Z"
    },
    "papermill": {
     "duration": 0.58798,
     "end_time": "2024-07-10T08:58:58.599038",
     "exception": false,
     "start_time": "2024-07-10T08:58:58.011058",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gaussian Naive Bayes Accuracy (k=50): 0.8892\n"
     ]
    }
   ],
   "source": [
    "gnb.fit(X_train_50, y_train)\n",
    "gnb_pred = gnb.predict(X_test_50)\n",
    "gnb_accuracy = accuracy_score(y_test, gnb_pred)\n",
    "print(f\"Gaussian Naive Bayes Accuracy (k=50): {gnb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9d35e592",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:58.645689Z",
     "iopub.status.busy": "2024-07-10T08:58:58.645258Z",
     "iopub.status.idle": "2024-07-10T08:58:59.276334Z",
     "shell.execute_reply": "2024-07-10T08:58:59.275032Z"
    },
    "papermill": {
     "duration": 0.657851,
     "end_time": "2024-07-10T08:58:59.279195",
     "exception": false,
     "start_time": "2024-07-10T08:58:58.621344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gaussian Naive Bayes Accuracy (k=60): 0.8699\n"
     ]
    }
   ],
   "source": [
    "gnb.fit(X_train_60, y_train)\n",
    "gnb_pred = gnb.predict(X_test_60)\n",
    "gnb_accuracy = accuracy_score(y_test, gnb_pred)\n",
    "print(f\"Gaussian Naive Bayes Accuracy (k=60): {gnb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68672443",
   "metadata": {
    "papermill": {
     "duration": 0.024136,
     "end_time": "2024-07-10T08:58:59.326981",
     "exception": false,
     "start_time": "2024-07-10T08:58:59.302845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "31412849",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:58:59.374341Z",
     "iopub.status.busy": "2024-07-10T08:58:59.373921Z",
     "iopub.status.idle": "2024-07-10T08:59:00.813277Z",
     "shell.execute_reply": "2024-07-10T08:59:00.811981Z"
    },
    "papermill": {
     "duration": 1.468131,
     "end_time": "2024-07-10T08:59:00.818035",
     "exception": false,
     "start_time": "2024-07-10T08:58:59.349904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Accuracy (k=40): 0.8917\n"
     ]
    }
   ],
   "source": [
    "logreg = LogisticRegression(max_iter=1000)\n",
    "logreg.fit(X_train_40, y_train)\n",
    "logreg_pred = logreg.predict(X_test_40)\n",
    "logreg_accuracy = accuracy_score(y_test, logreg_pred)\n",
    "print(f\"Logistic Regression Accuracy (k=40): {logreg_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "71a69d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:59:00.913716Z",
     "iopub.status.busy": "2024-07-10T08:59:00.913293Z",
     "iopub.status.idle": "2024-07-10T08:59:19.336200Z",
     "shell.execute_reply": "2024-07-10T08:59:19.334965Z"
    },
    "papermill": {
     "duration": 18.472154,
     "end_time": "2024-07-10T08:59:19.340894",
     "exception": false,
     "start_time": "2024-07-10T08:59:00.868740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Accuracy (k=50): 0.9713\n"
     ]
    }
   ],
   "source": [
    "logreg = LogisticRegression(max_iter=1000)\n",
    "logreg.fit(X_train_50, y_train)\n",
    "logreg_pred = logreg.predict(X_test_50)\n",
    "logreg_accuracy = accuracy_score(y_test, logreg_pred)\n",
    "print(f\"Logistic Regression Accuracy (k=50): {logreg_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "54d487af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:59:19.434217Z",
     "iopub.status.busy": "2024-07-10T08:59:19.433836Z",
     "iopub.status.idle": "2024-07-10T08:59:41.564698Z",
     "shell.execute_reply": "2024-07-10T08:59:41.563476Z"
    },
    "papermill": {
     "duration": 22.179939,
     "end_time": "2024-07-10T08:59:41.569707",
     "exception": false,
     "start_time": "2024-07-10T08:59:19.389768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Accuracy (k=60): 0.9715\n"
     ]
    }
   ],
   "source": [
    "logreg = LogisticRegression(max_iter=1000)\n",
    "logreg.fit(X_train_60, y_train)\n",
    "logreg_pred = logreg.predict(X_test_60)\n",
    "logreg_accuracy = accuracy_score(y_test, logreg_pred)\n",
    "print(f\"Logistic Regression Accuracy (k=60): {logreg_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c970591",
   "metadata": {
    "papermill": {
     "duration": 0.04141,
     "end_time": "2024-07-10T08:59:41.659879",
     "exception": false,
     "start_time": "2024-07-10T08:59:41.618469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### SVM (Linear Kernel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cf1c39e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T08:59:41.707503Z",
     "iopub.status.busy": "2024-07-10T08:59:41.707047Z",
     "iopub.status.idle": "2024-07-10T10:16:42.798598Z",
     "shell.execute_reply": "2024-07-10T10:16:42.797218Z"
    },
    "papermill": {
     "duration": 4621.14315,
     "end_time": "2024-07-10T10:16:42.825779",
     "exception": false,
     "start_time": "2024-07-10T08:59:41.682629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM (Linear kernel) Accuracy (k=40): 0.8948\n"
     ]
    }
   ],
   "source": [
    "svm_linear = SVC(kernel='linear')\n",
    "svm_linear.fit(X_train_40, y_train)\n",
    "svm_linear_pred = svm_linear.predict(X_test_40)\n",
    "svm_linear_accuracy = accuracy_score(y_test, svm_linear_pred)\n",
    "print(f\"SVM (Linear kernel) Accuracy (k=40): {svm_linear_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "2733e795",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T10:16:42.873361Z",
     "iopub.status.busy": "2024-07-10T10:16:42.872388Z",
     "iopub.status.idle": "2024-07-10T10:58:23.270640Z",
     "shell.execute_reply": "2024-07-10T10:58:23.269225Z"
    },
    "papermill": {
     "duration": 2500.450683,
     "end_time": "2024-07-10T10:58:23.298840",
     "exception": false,
     "start_time": "2024-07-10T10:16:42.848157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM (Linear kernel) Accuracy (k=50): 0.9685\n"
     ]
    }
   ],
   "source": [
    "svm_linear = SVC(kernel='linear')\n",
    "svm_linear.fit(X_train_50, y_train)\n",
    "svm_linear_pred = svm_linear.predict(X_test_50)\n",
    "svm_linear_accuracy = accuracy_score(y_test, svm_linear_pred)\n",
    "print(f\"SVM (Linear kernel) Accuracy (k=50): {svm_linear_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b1a3df73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T10:58:23.347272Z",
     "iopub.status.busy": "2024-07-10T10:58:23.346825Z",
     "iopub.status.idle": "2024-07-10T11:39:42.283814Z",
     "shell.execute_reply": "2024-07-10T11:39:42.282472Z"
    },
    "papermill": {
     "duration": 2478.989936,
     "end_time": "2024-07-10T11:39:42.311651",
     "exception": false,
     "start_time": "2024-07-10T10:58:23.321715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM (Linear kernel) Accuracy (k=60): 0.9689\n"
     ]
    }
   ],
   "source": [
    "svm_linear = SVC(kernel='linear')\n",
    "svm_linear.fit(X_train_60, y_train)\n",
    "svm_linear_pred = svm_linear.predict(X_test_60)\n",
    "svm_linear_accuracy = accuracy_score(y_test, svm_linear_pred)\n",
    "print(f\"SVM (Linear kernel) Accuracy (k=60): {svm_linear_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1761179d",
   "metadata": {
    "papermill": {
     "duration": 0.022824,
     "end_time": "2024-07-10T11:39:42.357368",
     "exception": false,
     "start_time": "2024-07-10T11:39:42.334544",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Trees (ID3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d2d0e8d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:39:42.405910Z",
     "iopub.status.busy": "2024-07-10T11:39:42.405446Z",
     "iopub.status.idle": "2024-07-10T11:39:44.127256Z",
     "shell.execute_reply": "2024-07-10T11:39:44.125938Z"
    },
    "papermill": {
     "duration": 1.749408,
     "end_time": "2024-07-10T11:39:44.129945",
     "exception": false,
     "start_time": "2024-07-10T11:39:42.380537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree (ID3) Accuracy (k=40): 0.9155\n"
     ]
    }
   ],
   "source": [
    "dt_id3 = DecisionTreeClassifier(criterion='entropy')\n",
    "dt_id3.fit(X_train_40, y_train)\n",
    "dt_id3_pred = dt_id3.predict(X_test_40)\n",
    "dt_id3_accuracy = accuracy_score(y_test, dt_id3_pred)\n",
    "print(f\"Decision Tree (ID3) Accuracy (k=40): {dt_id3_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2ffb16b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:39:44.181166Z",
     "iopub.status.busy": "2024-07-10T11:39:44.180733Z",
     "iopub.status.idle": "2024-07-10T11:39:56.433936Z",
     "shell.execute_reply": "2024-07-10T11:39:56.432537Z"
    },
    "papermill": {
     "duration": 12.281643,
     "end_time": "2024-07-10T11:39:56.436507",
     "exception": false,
     "start_time": "2024-07-10T11:39:44.154864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree (ID3) Accuracy (k=50): 0.9986\n"
     ]
    }
   ],
   "source": [
    "dt_id3 = DecisionTreeClassifier(criterion='entropy')\n",
    "dt_id3.fit(X_train_50, y_train)\n",
    "dt_id3_pred = dt_id3.predict(X_test_50)\n",
    "dt_id3_accuracy = accuracy_score(y_test, dt_id3_pred)\n",
    "print(f\"Decision Tree (ID3) Accuracy (k=50): {dt_id3_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a91c595e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:39:56.486865Z",
     "iopub.status.busy": "2024-07-10T11:39:56.486424Z",
     "iopub.status.idle": "2024-07-10T11:40:09.854622Z",
     "shell.execute_reply": "2024-07-10T11:40:09.853361Z"
    },
    "papermill": {
     "duration": 13.395914,
     "end_time": "2024-07-10T11:40:09.857138",
     "exception": false,
     "start_time": "2024-07-10T11:39:56.461224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree (ID3) Accuracy (k=60): 0.9986\n"
     ]
    }
   ],
   "source": [
    "dt_id3 = DecisionTreeClassifier(criterion='entropy')\n",
    "dt_id3.fit(X_train_60, y_train)\n",
    "dt_id3_pred = dt_id3.predict(X_test_60)\n",
    "dt_id3_accuracy = accuracy_score(y_test, dt_id3_pred)\n",
    "print(f\"Decision Tree (ID3) Accuracy (k=60): {dt_id3_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4da4edb8",
   "metadata": {
    "papermill": {
     "duration": 0.024876,
     "end_time": "2024-07-10T11:40:09.905475",
     "exception": false,
     "start_time": "2024-07-10T11:40:09.880599",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "773f8ec4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:40:09.953901Z",
     "iopub.status.busy": "2024-07-10T11:40:09.953442Z",
     "iopub.status.idle": "2024-07-10T11:41:05.100472Z",
     "shell.execute_reply": "2024-07-10T11:41:05.099076Z"
    },
    "papermill": {
     "duration": 55.199331,
     "end_time": "2024-07-10T11:41:05.128253",
     "exception": false,
     "start_time": "2024-07-10T11:40:09.928922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Accuracy (k=40): 0.9156\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train_40, y_train)\n",
    "rf_pred = rf.predict(X_test_40)\n",
    "rf_accuracy = accuracy_score(y_test, rf_pred)\n",
    "print(f\"Random Forest Accuracy (k=40): {rf_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5a0cac1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:41:05.177780Z",
     "iopub.status.busy": "2024-07-10T11:41:05.177342Z",
     "iopub.status.idle": "2024-07-10T11:43:47.087718Z",
     "shell.execute_reply": "2024-07-10T11:43:47.086325Z"
    },
    "papermill": {
     "duration": 161.970735,
     "end_time": "2024-07-10T11:43:47.122929",
     "exception": false,
     "start_time": "2024-07-10T11:41:05.152194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Accuracy (k=50): 0.9985\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train_50, y_train)\n",
    "rf_pred = rf.predict(X_test_50)\n",
    "rf_accuracy = accuracy_score(y_test, rf_pred)\n",
    "print(f\"Random Forest Accuracy (k=50): {rf_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b6cf0485",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:43:47.298266Z",
     "iopub.status.busy": "2024-07-10T11:43:47.297797Z",
     "iopub.status.idle": "2024-07-10T11:46:22.523529Z",
     "shell.execute_reply": "2024-07-10T11:46:22.522215Z"
    },
    "papermill": {
     "duration": 155.39032,
     "end_time": "2024-07-10T11:46:22.549339",
     "exception": false,
     "start_time": "2024-07-10T11:43:47.159019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Accuracy (k=60): 0.9985\n"
     ]
    }
   ],
   "source": [
    "rf = RandomForestClassifier()\n",
    "rf.fit(X_train_60, y_train)\n",
    "rf_pred = rf.predict(X_test_60)\n",
    "rf_accuracy = accuracy_score(y_test, rf_pred)\n",
    "print(f\"Random Forest Accuracy (k=60): {rf_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74d44d6b",
   "metadata": {
    "papermill": {
     "duration": 0.023765,
     "end_time": "2024-07-10T11:46:22.596904",
     "exception": false,
     "start_time": "2024-07-10T11:46:22.573139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "27b1330f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:46:22.647917Z",
     "iopub.status.busy": "2024-07-10T11:46:22.647497Z",
     "iopub.status.idle": "2024-07-10T11:46:24.886653Z",
     "shell.execute_reply": "2024-07-10T11:46:24.885423Z"
    },
    "papermill": {
     "duration": 2.267775,
     "end_time": "2024-07-10T11:46:24.889844",
     "exception": false,
     "start_time": "2024-07-10T11:46:22.622069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Accuracy (k=40): 0.9150\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "\n",
    "xgb_model = xgb.XGBClassifier()\n",
    "xgb_model.fit(X_train_40, y_train)\n",
    "xgb_pred = xgb_model.predict(X_test_40)\n",
    "xgb_accuracy = accuracy_score(y_test, xgb_pred)\n",
    "print(f\"XGBoost Accuracy (k=40): {xgb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a93d16bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:46:24.942201Z",
     "iopub.status.busy": "2024-07-10T11:46:24.940909Z",
     "iopub.status.idle": "2024-07-10T11:46:32.667829Z",
     "shell.execute_reply": "2024-07-10T11:46:32.666483Z"
    },
    "papermill": {
     "duration": 7.755595,
     "end_time": "2024-07-10T11:46:32.670696",
     "exception": false,
     "start_time": "2024-07-10T11:46:24.915101",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Accuracy (k=50): 0.9988\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "\n",
    "xgb_model = xgb.XGBClassifier()\n",
    "xgb_model.fit(X_train_50, y_train)\n",
    "xgb_pred = xgb_model.predict(X_test_50)\n",
    "xgb_accuracy = accuracy_score(y_test, xgb_pred)\n",
    "print(f\"XGBoost Accuracy (k=50): {xgb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6d1e4aea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:46:32.722823Z",
     "iopub.status.busy": "2024-07-10T11:46:32.722373Z",
     "iopub.status.idle": "2024-07-10T11:46:42.803342Z",
     "shell.execute_reply": "2024-07-10T11:46:42.802026Z"
    },
    "papermill": {
     "duration": 10.109707,
     "end_time": "2024-07-10T11:46:42.805894",
     "exception": false,
     "start_time": "2024-07-10T11:46:32.696187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Accuracy (k=60): 0.9988\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "\n",
    "xgb_model = xgb.XGBClassifier()\n",
    "xgb_model.fit(X_train_60, y_train)\n",
    "xgb_pred = xgb_model.predict(X_test_60)\n",
    "xgb_accuracy = accuracy_score(y_test, xgb_pred)\n",
    "print(f\"XGBoost Accuracy (k=60): {xgb_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5a7e9e3",
   "metadata": {
    "papermill": {
     "duration": 0.024086,
     "end_time": "2024-07-10T11:46:42.854780",
     "exception": false,
     "start_time": "2024-07-10T11:46:42.830694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Voting Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "93343ed9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:46:42.905307Z",
     "iopub.status.busy": "2024-07-10T11:46:42.904922Z",
     "iopub.status.idle": "2024-07-10T11:46:42.910843Z",
     "shell.execute_reply": "2024-07-10T11:46:42.909491Z"
    },
    "papermill": {
     "duration": 0.034105,
     "end_time": "2024-07-10T11:46:42.913324",
     "exception": false,
     "start_time": "2024-07-10T11:46:42.879219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "voting_clf = VotingClassifier(estimators=[\n",
    "    ('gnb', gnb), \n",
    "    ('logreg', logreg), \n",
    "    ('svm_linear', svm_linear)\n",
    "], voting='hard')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "933327a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:46:42.965166Z",
     "iopub.status.busy": "2024-07-10T11:46:42.964785Z",
     "iopub.status.idle": "2024-07-10T13:04:11.786650Z",
     "shell.execute_reply": "2024-07-10T13:04:11.785296Z"
    },
    "papermill": {
     "duration": 4648.876693,
     "end_time": "2024-07-10T13:04:11.815448",
     "exception": false,
     "start_time": "2024-07-10T11:46:42.938755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voting Classifier Accuracy (k=40): 0.8929\n"
     ]
    }
   ],
   "source": [
    "voting_clf.fit(X_train_40, y_train)\n",
    "voting_pred = voting_clf.predict(X_test_40)\n",
    "voting_accuracy = accuracy_score(y_test, voting_pred)\n",
    "print(f\"Voting Classifier Accuracy (k=40): {voting_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "148761a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T13:04:11.867394Z",
     "iopub.status.busy": "2024-07-10T13:04:11.866296Z",
     "iopub.status.idle": "2024-07-10T13:42:17.267122Z",
     "shell.execute_reply": "2024-07-10T13:42:17.265612Z"
    },
    "papermill": {
     "duration": 2285.456169,
     "end_time": "2024-07-10T13:42:17.296091",
     "exception": false,
     "start_time": "2024-07-10T13:04:11.839922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voting Classifier Accuracy (k=50): 0.9683\n"
     ]
    }
   ],
   "source": [
    "voting_clf.fit(X_train_50, y_train)\n",
    "voting_pred = voting_clf.predict(X_test_50)\n",
    "voting_accuracy = accuracy_score(y_test, voting_pred)\n",
    "print(f\"Voting Classifier Accuracy (k=50): {voting_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2a6b981c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T13:42:17.348908Z",
     "iopub.status.busy": "2024-07-10T13:42:17.348468Z",
     "iopub.status.idle": "2024-07-10T14:25:57.744568Z",
     "shell.execute_reply": "2024-07-10T14:25:57.743313Z"
    },
    "papermill": {
     "duration": 2620.452262,
     "end_time": "2024-07-10T14:25:57.773822",
     "exception": false,
     "start_time": "2024-07-10T13:42:17.321560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voting Classifier Accuracy (k=60): 0.9686\n"
     ]
    }
   ],
   "source": [
    "voting_clf.fit(X_train_60, y_train)\n",
    "voting_pred = voting_clf.predict(X_test_60)\n",
    "voting_accuracy = accuracy_score(y_test, voting_pred)\n",
    "print(f\"Voting Classifier Accuracy (k=60): {voting_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f89f46",
   "metadata": {
    "papermill": {
     "duration": 0.02528,
     "end_time": "2024-07-10T14:25:57.824598",
     "exception": false,
     "start_time": "2024-07-10T14:25:57.799318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Adaboost Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2924ee0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T14:25:57.877605Z",
     "iopub.status.busy": "2024-07-10T14:25:57.877202Z",
     "iopub.status.idle": "2024-07-10T14:26:18.098019Z",
     "shell.execute_reply": "2024-07-10T14:26:18.096446Z"
    },
    "papermill": {
     "duration": 20.251054,
     "end_time": "2024-07-10T14:26:18.101185",
     "exception": false,
     "start_time": "2024-07-10T14:25:57.850131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AdaBoost Classifier Accuracy (k=40): 0.9100\n"
     ]
    }
   ],
   "source": [
    "adaboost = AdaBoostClassifier(n_estimators=50, learning_rate=1.0)\n",
    "adaboost.fit(X_train_40, y_train)\n",
    "adaboost_pred = adaboost.predict(X_test_40)\n",
    "adaboost_accuracy = accuracy_score(y_test, adaboost_pred)\n",
    "print(f\"AdaBoost Classifier Accuracy (k=40): {adaboost_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "cb81595b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T14:26:18.158508Z",
     "iopub.status.busy": "2024-07-10T14:26:18.157979Z",
     "iopub.status.idle": "2024-07-10T14:28:19.919640Z",
     "shell.execute_reply": "2024-07-10T14:28:19.918062Z"
    },
    "papermill": {
     "duration": 121.822666,
     "end_time": "2024-07-10T14:28:19.949792",
     "exception": false,
     "start_time": "2024-07-10T14:26:18.127126",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AdaBoost Classifier Accuracy (k=50): 0.9971\n"
     ]
    }
   ],
   "source": [
    "adaboost = AdaBoostClassifier(n_estimators=50, learning_rate=1.0)\n",
    "adaboost.fit(X_train_50, y_train)\n",
    "adaboost_pred = adaboost.predict(X_test_50)\n",
    "adaboost_accuracy = accuracy_score(y_test, adaboost_pred)\n",
    "print(f\"AdaBoost Classifier Accuracy (k=50): {adaboost_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f9ed83c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T14:28:20.004149Z",
     "iopub.status.busy": "2024-07-10T14:28:20.003748Z",
     "iopub.status.idle": "2024-07-10T14:30:35.530246Z",
     "shell.execute_reply": "2024-07-10T14:30:35.529017Z"
    },
    "papermill": {
     "duration": 135.582705,
     "end_time": "2024-07-10T14:30:35.558284",
     "exception": false,
     "start_time": "2024-07-10T14:28:19.975579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AdaBoost Classifier Accuracy (k=60): 0.9975\n"
     ]
    }
   ],
   "source": [
    "adaboost = AdaBoostClassifier(n_estimators=50, learning_rate=1.0)\n",
    "adaboost.fit(X_train_60, y_train)\n",
    "adaboost_pred = adaboost.predict(X_test_60)\n",
    "adaboost_accuracy = accuracy_score(y_test, adaboost_pred)\n",
    "print(f\"AdaBoost Classifier Accuracy (k=60): {adaboost_accuracy:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0326ad1",
   "metadata": {
    "papermill": {
     "duration": 0.024957,
     "end_time": "2024-07-10T14:30:35.608680",
     "exception": false,
     "start_time": "2024-07-10T14:30:35.583723",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### MLP Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e935b78e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T14:30:35.661745Z",
     "iopub.status.busy": "2024-07-10T14:30:35.661310Z",
     "iopub.status.idle": "2024-07-10T14:40:21.463418Z",
     "shell.execute_reply": "2024-07-10T14:40:21.461666Z"
    },
    "papermill": {
     "duration": 585.889923,
     "end_time": "2024-07-10T14:40:21.523976",
     "exception": false,
     "start_time": "2024-07-10T14:30:35.634053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP Classifier Accuracy (k=40): 0.9125\n"
     ]
    }
   ],
   "source": [
    "mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500)\n",
    "mlp.fit(X_train_40, y_train)\n",
    "mlp_pred = mlp.predict(X_test_40)\n",
    "mlp_accuracy = accuracy_score(y_test, mlp_pred)\n",
    "print(f\"MLP Classifier Accuracy (k=40): {mlp_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "018bbcfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T14:40:21.590873Z",
     "iopub.status.busy": "2024-07-10T14:40:21.590422Z",
     "iopub.status.idle": "2024-07-10T14:48:21.212767Z",
     "shell.execute_reply": "2024-07-10T14:48:21.210824Z"
    },
    "papermill": {
     "duration": 479.713299,
     "end_time": "2024-07-10T14:48:21.275950",
     "exception": false,
     "start_time": "2024-07-10T14:40:21.562651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP Classifier Accuracy (k=50): 0.9956\n"
     ]
    }
   ],
   "source": [
    "mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500)\n",
    "mlp.fit(X_train_50, y_train)\n",
    "mlp_pred = mlp.predict(X_test_50)\n",
    "mlp_accuracy = accuracy_score(y_test, mlp_pred)\n",
    "print(f\"MLP Classifier Accuracy (k=50): {mlp_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "ba9a01f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T14:48:21.342259Z",
     "iopub.status.busy": "2024-07-10T14:48:21.341844Z",
     "iopub.status.idle": "2024-07-10T14:56:53.858862Z",
     "shell.execute_reply": "2024-07-10T14:56:53.857598Z"
    },
    "papermill": {
     "duration": 512.606259,
     "end_time": "2024-07-10T14:56:53.920024",
     "exception": false,
     "start_time": "2024-07-10T14:48:21.313765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP Classifier Accuracy (k=60): 0.9959\n"
     ]
    }
   ],
   "source": [
    "mlp = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500)\n",
    "mlp.fit(X_train_60, y_train)\n",
    "mlp_pred = mlp.predict(X_test_60)\n",
    "mlp_accuracy = accuracy_score(y_test, mlp_pred)\n",
    "print(f\"MLP Classifier Accuracy (k=60): {mlp_accuracy:.4f}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5352045,
     "sourceId": 8902549,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21514.501338,
   "end_time": "2024-07-10T14:56:54.836339",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-10T08:58:20.335001",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
